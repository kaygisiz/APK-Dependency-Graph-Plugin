actions.GenerateDependencyInjectionGraph -> actions.GenerateDependencyInjectionGraph:
    java.lang.String apkPath -> apkPath
    utils.PathHelper pathHelper -> pathHelper
    java.lang.String packageName -> packageName
    java.lang.String isInnerClassEnabled -> isInnerClassEnabled
    void <init>() -> <init>
    void actionPerformed(com.intellij.openapi.actionSystem.AnActionEvent) -> actionPerformed
    void initFiles(com.intellij.openapi.project.Project) -> initFiles
    java.util.List filterByExtension(java.lang.String,java.lang.String) -> filterByExtension
    com.intellij.openapi.progress.Task$Backgroundable generateDependencyInjectionGraph(com.intellij.openapi.project.Project) -> generateDependencyInjectionGraph
    void chooseAndSaveApkFile(com.intellij.openapi.project.Project) -> chooseAndSaveApkFile
    void setPackageName(com.intellij.openapi.project.Project) -> setPackageName
    java.lang.String access$000(actions.GenerateDependencyInjectionGraph) -> access$000
    java.util.List access$100(actions.GenerateDependencyInjectionGraph,java.lang.String,java.lang.String) -> access$100
    utils.PathHelper access$200(actions.GenerateDependencyInjectionGraph) -> access$200
    java.lang.String access$300(actions.GenerateDependencyInjectionGraph) -> access$300
    java.lang.String access$400(actions.GenerateDependencyInjectionGraph) -> access$400
actions.GenerateDependencyInjectionGraph$1 -> actions.GenerateDependencyInjectionGraph$1:
    com.intellij.openapi.project.Project val$project -> val$project
    actions.GenerateDependencyInjectionGraph this$0 -> this$0
    void <init>(actions.GenerateDependencyInjectionGraph,com.intellij.openapi.project.Project,java.lang.String,boolean,com.intellij.openapi.project.Project) -> <init>
    void run(com.intellij.openapi.progress.ProgressIndicator) -> run
    void onSuccess() -> onSuccess
actions.SetApkPathAction -> actions.SetApkPathAction:
    void <init>() -> <init>
    void actionPerformed(com.intellij.openapi.actionSystem.AnActionEvent) -> actionPerformed
actions.SetInnerClassMode -> actions.SetInnerClassMode:
    void <init>() -> <init>
    boolean isSelected(com.intellij.openapi.actionSystem.AnActionEvent) -> isSelected
    void setSelected(com.intellij.openapi.actionSystem.AnActionEvent,boolean) -> setSelected
actions.SetPackageFilter -> actions.SetPackageFilter:
    void <init>() -> <init>
    void actionPerformed(com.intellij.openapi.actionSystem.AnActionEvent) -> actionPerformed
actions.ShowGeneratedDependencies -> actions.ShowGeneratedDependencies:
    utils.PathHelper pathHelper -> pathHelper
    void <init>() -> <init>
    void actionPerformed(com.intellij.openapi.actionSystem.AnActionEvent) -> actionPerformed
    void openBrowser() -> openBrowser
com.google.common.base.Absent -> com.google.common.a.a:
    com.google.common.base.Absent INSTANCE -> a
    com.google.common.base.Optional withType() -> a
    void <init>() -> <init>
    java.lang.Object or(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence -> com.google.common.a.b:
    void <init>() -> <init>
    boolean equivalent(java.lang.Object,java.lang.Object) -> a
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> b
    int hash(java.lang.Object) -> a
    int doHash(java.lang.Object) -> b
    com.google.common.base.Equivalence equals() -> a
    com.google.common.base.Equivalence identity() -> b
com.google.common.base.Equivalence$Equals -> com.google.common.a.c:
    com.google.common.base.Equivalence$Equals INSTANCE -> a
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> b
    int doHash(java.lang.Object) -> b
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence$Identity -> com.google.common.a.d:
    com.google.common.base.Equivalence$Identity INSTANCE -> a
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> b
    int doHash(java.lang.Object) -> b
    void <clinit>() -> <clinit>
com.google.common.base.Function -> com.google.common.a.e:
    java.lang.Object apply(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
com.google.common.base.Functions -> com.google.common.a.f:
    java.lang.String separator -> a
    com.google.common.base.Function toStringFunction() -> a
    boolean isUpperCase(char) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    com.google.common.base.Functions on$7c648049(java.lang.String) -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> a
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> a
    java.lang.String join(java.lang.Iterable) -> a
    java.lang.String join(java.util.Iterator) -> a
    java.lang.CharSequence toString(java.lang.Object) -> a
    void checkArgument(boolean) -> a
    void checkArgument(boolean,java.lang.Object) -> a
    void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> a
    void checkState(boolean) -> b
    void checkState(boolean,java.lang.Object) -> b
    java.lang.Object checkNotNull(java.lang.Object) -> b
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> b
    int checkElementIndex(int,int) -> a
    int checkPositionIndex(int,int) -> b
    java.lang.String badPositionIndex(int,int,java.lang.String) -> a
    void checkPositionIndexes(int,int,int) -> a
    java.lang.String lenientFormat(java.lang.String,java.lang.Object[]) -> a
    java.lang.String lenientToString(java.lang.Object) -> c
    int compare(boolean,boolean) -> a
    int saturatedCast(long) -> a
    int compare(int,int) -> c
com.google.common.base.Functions$ToStringFunction -> com.google.common.a.g:
    com.google.common.base.Functions$ToStringFunction INSTANCE -> a
    void <init>(java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.common.base.MoreObjects -> com.google.common.a.h:
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> a
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object) -> a
com.google.common.base.MoreObjects$ToStringHelper -> com.google.common.a.i:
    java.lang.String className -> a
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead -> b
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail -> c
    boolean omitNullValues -> d
    void <init>(java.lang.String) -> <init>
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object) -> a
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,int) -> a
    java.lang.String toString() -> toString
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder() -> a
    com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> b
    void <init>(java.lang.String,byte) -> <init>
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder -> com.google.common.a.j:
    java.lang.String name -> a
    java.lang.Object value -> b
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next -> c
    void <init>() -> <init>
    void <init>(byte) -> <init>
com.google.common.base.Optional -> com.google.common.a.k:
    com.google.common.base.Optional absent() -> b
    com.google.common.base.Optional fromNullable(java.lang.Object) -> b
    void <init>() -> <init>
    java.lang.Object or(java.lang.Object) -> a
com.google.common.base.Predicate -> com.google.common.a.l:
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Present -> com.google.common.a.m:
    java.lang.Object reference -> a
    void <init>(java.lang.Object) -> <init>
    java.lang.Object or(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.a:
    int size -> a
    int position -> b
    java.lang.Object get(int) -> a
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
com.google.common.collect.AbstractIterator -> com.google.common.collect.b:
    int state$1572a20f -> a
    java.lang.Object next -> b
    void <init>() -> <init>
    java.lang.Object computeNext() -> a
    java.lang.Object endOfData() -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.AbstractIterator$1 -> com.google.common.collect.c:
    int[] $SwitchMap$com$google$common$collect$AbstractIterator$State -> a
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.d:
    int READY$1572a20f -> a
    int NOT_READY$1572a20f -> b
    int DONE$1572a20f -> c
    int FAILED$1572a20f -> d
    int[] $VALUES$12ff0e74 -> e
    int[] values$55dd66eb() -> a
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.e:
    void <init>(java.util.Map) -> <init>
    java.util.List createCollection() -> a
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    java.util.List get(java.lang.Object) -> a
    java.util.Map asMap() -> b
    boolean equals(java.lang.Object) -> equals
    java.util.Collection get(java.lang.Object) -> b
    java.util.Collection createCollection() -> c
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.f:
    java.util.Map map -> a
    int totalSize -> b
    void <init>(java.util.Map) -> <init>
    java.util.Collection createCollection() -> c
    void clear() -> d
    java.util.Collection get(java.lang.Object) -> b
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> a
    java.util.Set createKeySet() -> e
    java.util.Map createAsMap() -> f
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> a
    java.util.Iterator access$100(java.util.Collection) -> a
    int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> b
    int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> c
    int access$200(com.google.common.collect.AbstractMapBasedMultimap) -> d
    int access$202(com.google.common.collect.AbstractMapBasedMultimap,int) -> a
    void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.g:
    java.util.Map submap -> a
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> b
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Set createEntrySet() -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Set keySet() -> keySet
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.h:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> a
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    java.util.Map map() -> a
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.i:
    java.util.Iterator delegateIterator -> a
    java.util.Collection collection -> b
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> c
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.j:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> a
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.k:
    java.util.Map$Entry entry -> a
    java.util.Iterator val$entryIterator -> b
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> c
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$KeySet,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.l:
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.m:
    java.lang.Object key -> a
    java.util.Collection delegate -> b
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> c
    java.util.Collection ancestorDelegate -> e
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void refreshIfEmpty() -> a
    void removeIfEmpty() -> b
    void addToMap() -> c
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.n:
    java.util.Iterator delegateIterator -> a
    java.util.Collection originalDelegate -> b
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> c
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection,java.util.Iterator) -> <init>
    void validateIterator() -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.o:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> e
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.List getListDelegate() -> d
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.p:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> b
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int) -> <init>
    java.util.ListIterator getDelegateListIterator() -> b
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.q:
    void <init>() -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap -> com.google.common.collect.r:
    java.util.Set keySet -> a
    java.util.Map asMap -> b
    void <init>() -> <init>
    java.util.Set keySet() -> g
    java.util.Set createKeySet() -> e
    java.util.Map asMap() -> b
    java.util.Map createAsMap() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.s:
    com.google.common.collect.AllEqualOrdering INSTANCE -> a
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.collect.ArrayListMultimap -> com.google.common.collect.t:
    int expectedValuesPerKey -> a
    com.google.common.collect.ArrayListMultimap create() -> h
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.util.List createCollection() -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> b
    java.util.List get(java.lang.Object) -> a
    void clear() -> d
    java.util.Collection createCollection() -> c
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    java.util.Set keySet() -> g
com.google.common.collect.ArrayListMultimapGwtSerializationDependencies -> com.google.common.collect.u:
    void <init>(java.util.Map) -> <init>
com.google.common.collect.BiMap -> com.google.common.collect.v:
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.w:
    com.google.common.base.Function function -> a
    com.google.common.collect.Ordering ordering -> b
    void <init>(com.google.common.base.Function,com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.CompactHashMap -> com.google.common.collect.x:
    int[] table -> d
    long[] entries -> e
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    float loadFactor -> f
    int modCount -> c
    int threshold -> g
    int size -> h
    java.util.Set keySetView -> i
    java.util.Set entrySetView -> j
    java.util.Collection valuesView -> k
    com.google.common.collect.CompactHashMap createWithExpectedSize(int) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void init(int,float) -> a
    int[] newTable(int) -> d
    long[] newEntries(int) -> e
    long swapNext(long,int) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void resizeTable(int) -> f
    int indexOf(java.lang.Object) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object,int) -> a
    void moveLastEntry(int) -> g
    int getSuccessor(int) -> b
    int adjustAfterRemove$255f288(int) -> c
    java.util.Set keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Collection values() -> values
    void clear() -> clear
    java.lang.Object access$000(com.google.common.collect.CompactHashMap,int) -> a
    int access$100(com.google.common.collect.CompactHashMap) -> a
    int access$200(com.google.common.collect.CompactHashMap,java.lang.Object) -> a
com.google.common.collect.CompactHashMap$1 -> com.google.common.collect.y:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object getOutput(int) -> a
com.google.common.collect.CompactHashMap$2 -> com.google.common.collect.z:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object getOutput(int) -> a
com.google.common.collect.CompactHashMap$3 -> com.google.common.collect.A:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object getOutput(int) -> a
com.google.common.collect.CompactHashMap$EntrySetView -> com.google.common.collect.B:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.CompactHashMap$Itr -> com.google.common.collect.C:
    int expectedModCount -> a
    int currentIndex -> b
    int indexToRemove -> c
    com.google.common.collect.CompactHashMap this$0 -> d
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object getOutput(int) -> a
    java.lang.Object next() -> next
    void remove() -> remove
    void checkForConcurrentModification() -> a
    void <init>(com.google.common.collect.CompactHashMap,byte) -> <init>
com.google.common.collect.CompactHashMap$KeySetView -> com.google.common.collect.D:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
com.google.common.collect.CompactHashMap$MapEntry -> com.google.common.collect.E:
    java.lang.Object key -> a
    int lastKnownIndex -> b
    com.google.common.collect.CompactHashMap this$0 -> c
    void <init>(com.google.common.collect.CompactHashMap,int) -> <init>
    java.lang.Object getKey() -> getKey
    void updateLastKnownIndex() -> a
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.CompactHashMap$ValuesView -> com.google.common.collect.F:
    com.google.common.collect.CompactHashMap this$0 -> a
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.G:
    java.util.Comparator comparator -> a
    void <init>(java.util.Comparator) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ComparisonChain -> com.google.common.collect.H:
    com.google.common.collect.ComparisonChain ACTIVE -> a
    com.google.common.collect.ComparisonChain LESS -> b
    com.google.common.collect.ComparisonChain GREATER -> c
    void <init>() -> <init>
    com.google.common.collect.ComparisonChain start() -> a
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> a
    int result() -> b
    void <init>(byte) -> <init>
    com.google.common.collect.ComparisonChain access$100() -> c
    com.google.common.collect.ComparisonChain access$200() -> d
    com.google.common.collect.ComparisonChain access$300() -> e
    void <clinit>() -> <clinit>
com.google.common.collect.ComparisonChain$1 -> com.google.common.collect.I:
    void <init>() -> <init>
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> a
    int result() -> b
com.google.common.collect.ComparisonChain$InactiveComparisonChain -> com.google.common.collect.J:
    int result -> a
    void <init>(int) -> <init>
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> a
    int result() -> b
com.google.common.collect.CompoundOrdering -> com.google.common.collect.K:
    java.util.Comparator[] comparators -> a
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    void <init>(java.lang.Iterable) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Cut -> com.google.common.collect.L:
    java.lang.Comparable endpoint -> a
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    int compareTo(com.google.common.collect.Cut) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.Cut belowAll() -> a
    com.google.common.collect.Cut aboveAll() -> b
    com.google.common.collect.Cut belowValue(java.lang.Comparable) -> b
    com.google.common.collect.Cut aboveValue(java.lang.Comparable) -> c
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$AboveAll -> com.google.common.collect.M:
    com.google.common.collect.Cut$AboveAll INSTANCE -> b
    void <init>() -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    int compareTo(com.google.common.collect.Cut) -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$AboveAll access$100() -> c
    void <clinit>() -> <clinit>
com.google.common.collect.Cut$AboveValue -> com.google.common.collect.N:
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$BelowAll -> com.google.common.collect.O:
    com.google.common.collect.Cut$BelowAll INSTANCE -> b
    void <init>() -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    int compareTo(com.google.common.collect.Cut) -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$BelowAll access$000() -> c
    void <clinit>() -> <clinit>
com.google.common.collect.Cut$BelowValue -> com.google.common.collect.P:
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.Q:
    com.google.common.collect.ImmutableMap rankMap -> a
    void <init>(java.util.List) -> <init>
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    int rank(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.FluentIterable -> com.google.common.collect.R:
    com.google.common.base.Optional iterableDelegate -> a
    void <init>() -> <init>
    void <init>(java.lang.Iterable) -> <init>
    java.lang.Iterable getDelegate() -> a
    com.google.common.collect.FluentIterable from(java.lang.Iterable) -> a
    com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable) -> a
    com.google.common.collect.FluentIterable concat(java.lang.Iterable) -> b
    java.lang.String toString() -> toString
    com.google.common.collect.FluentIterable transform(com.google.common.base.Function) -> a
    com.google.common.collect.FluentIterable limit(int) -> a
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.S:
    java.lang.Iterable val$iterable -> a
    void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$2 -> com.google.common.collect.T:
    java.lang.Iterable val$inputs -> a
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3 -> com.google.common.collect.U:
    java.lang.Iterable[] val$inputs -> a
    void <init>(java.lang.Iterable[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3$1 -> com.google.common.collect.V:
    com.google.common.collect.FluentIterable$3 this$0 -> a
    void <init>(com.google.common.collect.FluentIterable$3,int) -> <init>
    java.lang.Object get(int) -> a
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.W:
    com.google.common.collect.ImmutableBiMap of() -> a
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap inverse() -> b
    com.google.common.collect.ImmutableCollection createValues() -> c
    com.google.common.collect.ImmutableCollection values() -> d
    java.util.Collection values() -> values
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.X:
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object) -> a
    com.google.common.collect.ImmutableBiMap build() -> a
    com.google.common.collect.ImmutableMap build() -> b
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> b
com.google.common.collect.ImmutableCollection -> com.google.common.collect.Y:
    java.lang.Object[] EMPTY_ARRAY -> a
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] internalArray() -> b
    int internalArrayStart() -> c
    int internalArrayEnd() -> d
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.ImmutableList asList() -> e
    boolean isPartialView() -> f
    int copyIntoArray(java.lang.Object[],int) -> a
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder -> com.google.common.collect.Z:
    java.lang.Object[] contents -> a
    int size -> b
    boolean forceCopy -> c
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> a
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> b
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.aa:
    int expandedCapacity(int,int) -> a
    void <init>() -> <init>
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> b
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> a
com.google.common.collect.ImmutableEntry -> com.google.common.collect.ab:
    java.lang.Object key -> a
    java.lang.Object value -> b
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableList -> com.google.common.collect.ac:
    com.google.common.collect.UnmodifiableListIterator EMPTY_ITR -> a
    com.google.common.collect.ImmutableList of() -> g
    com.google.common.collect.ImmutableList of(java.lang.Object) -> a
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object) -> a
    com.google.common.collect.ImmutableList copyOf(java.lang.Iterable) -> a
    com.google.common.collect.ImmutableList copyOf(java.util.Collection) -> a
    com.google.common.collect.ImmutableList copyOf(java.util.Iterator) -> a
    com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable) -> a
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> a
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> b
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.UnmodifiableListIterator listIterator() -> h
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> a
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subList(int,int) -> a
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    com.google.common.collect.ImmutableList asList() -> e
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList reverse() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ad:
    void <init>() -> <init>
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object) -> c
    com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator) -> b
    com.google.common.collect.ImmutableList build() -> a
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> a
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> a
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> b
com.google.common.collect.ImmutableList$Itr -> com.google.common.collect.ae:
    com.google.common.collect.ImmutableList list -> a
    void <init>(com.google.common.collect.ImmutableList,int) -> <init>
    java.lang.Object get(int) -> a
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.af:
    com.google.common.collect.ImmutableList forwardList -> a
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int reverseIndex(int) -> b
    com.google.common.collect.ImmutableList reverse() -> i
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> a
    java.lang.Object get(int) -> get
    int size() -> size
    boolean isPartialView() -> f
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.ag:
    int offset -> a
    int length -> b
    com.google.common.collect.ImmutableList this$0 -> c
    void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    int size() -> size
    java.lang.Object[] internalArray() -> b
    int internalArrayStart() -> c
    int internalArrayEnd() -> d
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subList(int,int) -> a
    boolean isPartialView() -> f
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap -> com.google.common.collect.ah:
    com.google.common.collect.ImmutableSet entrySet -> a
    com.google.common.collect.ImmutableSet keySet -> b
    com.google.common.collect.ImmutableCollection values -> c
    com.google.common.collect.ImmutableMap of() -> e
    void <init>() -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    com.google.common.collect.ImmutableSet entrySet() -> f
    com.google.common.collect.ImmutableSet createEntrySet() -> g
    com.google.common.collect.ImmutableSet keySet() -> h
    com.google.common.collect.ImmutableSet createKeySet() -> i
    com.google.common.collect.ImmutableCollection values() -> d
    com.google.common.collect.ImmutableCollection createValues() -> c
    boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> j
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ai:
    java.lang.Object[] alternatingKeysAndValues -> a
    int size -> b
    boolean entriesUsed -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> b
    com.google.common.collect.ImmutableMap build() -> b
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.aj:
    void <init>() -> <init>
    com.google.common.collect.ImmutableMap map() -> g
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> f
    boolean isHashCodeFast() -> h
    int hashCode() -> hashCode
com.google.common.collect.ImmutableRangeMap -> com.google.common.collect.ak:
    com.google.common.collect.ImmutableList ranges -> a
    com.google.common.collect.ImmutableList values -> b
    com.google.common.collect.ImmutableRangeMap$Builder builder() -> a
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(java.lang.Comparable) -> a
    com.google.common.collect.ImmutableMap asMapOfRanges() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.Map asMapOfRanges() -> b
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableRangeMap$Builder -> com.google.common.collect.al:
    java.util.List entries -> a
    void <init>() -> <init>
    com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object) -> a
    com.google.common.collect.ImmutableRangeMap build() -> a
com.google.common.collect.ImmutableSet -> com.google.common.collect.am:
    com.google.common.collect.ImmutableList asList -> a
    com.google.common.collect.ImmutableSet of() -> i
    com.google.common.collect.ImmutableSet of(java.lang.Object) -> a
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object) -> a
    com.google.common.collect.ImmutableSet construct(int,java.lang.Object[]) -> a
    boolean shouldTrim(int,int) -> a
    int chooseTableSize(int) -> a
    com.google.common.collect.ImmutableSet copyOf(java.util.Collection) -> a
    com.google.common.collect.ImmutableSet copyOf(java.util.Iterator) -> a
    void <init>() -> <init>
    boolean isHashCodeFast() -> h
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.ImmutableList asList() -> e
    com.google.common.collect.ImmutableList createAsList() -> j
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.an:
    java.lang.Object[] hashTable -> d
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> c
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> b
    com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object) -> a
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> a
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> b
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ao:
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> a
    com.google.common.collect.RegularImmutableSortedSet keySet -> b
    com.google.common.collect.ImmutableList valueList -> c
    com.google.common.collect.ImmutableSortedMap descendingMap -> d
    com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> a
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap) -> <init>
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean isPartialView() -> j
    com.google.common.collect.ImmutableSet entrySet() -> f
    com.google.common.collect.ImmutableSet createEntrySet() -> g
    com.google.common.collect.ImmutableSet createKeySet() -> i
    com.google.common.collect.ImmutableCollection values() -> d
    com.google.common.collect.ImmutableCollection createValues() -> c
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> a
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> b
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSet keySet() -> h
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    com.google.common.collect.RegularImmutableSortedSet access$100(com.google.common.collect.ImmutableSortedMap) -> a
    com.google.common.collect.ImmutableList access$200(com.google.common.collect.ImmutableSortedMap) -> b
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedMap$1EntrySet -> com.google.common.collect.ap:
    com.google.common.collect.ImmutableSortedMap this$0 -> a
    void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.ImmutableList createAsList() -> j
    com.google.common.collect.ImmutableMap map() -> g
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSortedMap$1EntrySet$1 -> com.google.common.collect.aq:
    com.google.common.collect.ImmutableSortedMap$1EntrySet this$1 -> a
    void <init>(com.google.common.collect.ImmutableSortedMap$1EntrySet) -> <init>
    boolean isPartialView() -> f
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.ar:
    void <init>() -> <init>
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.as:
    java.util.Comparator comparator -> a
    com.google.common.collect.ImmutableSortedSet descendingSet -> b
    com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator) -> a
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable) -> a
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection) -> b
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable) -> a
    com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> a
    int unsafeCompare(java.lang.Object,java.lang.Object) -> b
    void <init>(java.util.Comparator) -> <init>
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> c
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> b
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> d
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> b
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    com.google.common.collect.ImmutableSortedSet descendingSet() -> g
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> k
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> l
    int indexOf(java.lang.Object) -> b
    java.util.Iterator iterator() -> iterator
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.at:
    void <init>() -> <init>
com.google.common.collect.Iterables -> com.google.common.collect.au:
    java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[]) -> a
    java.lang.Object[] toArray(java.lang.Iterable) -> a
    java.util.Collection castOrCopyToCollection(java.lang.Iterable) -> b
    java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> a
    java.lang.Object getFirst(java.lang.Iterable,java.lang.Object) -> a
    void checkEntryNotNull(java.lang.Object,java.lang.Object) -> a
    int checkNonnegative(int,java.lang.String) -> a
    boolean safeContains(java.util.Collection,java.lang.Object) -> a
    int smear(int) -> a
    int smearedHash(java.lang.Object) -> a
    int closedTableSize(int,double) -> a
    java.lang.Object[] checkElementsNotNull(java.lang.Object[],int) -> a
    java.lang.Object checkElementNotNull(java.lang.Object,int) -> a
    boolean hasSameComparator(java.util.Comparator,java.lang.Iterable) -> a
    java.util.Comparator comparator(java.util.SortedSet) -> a
com.google.common.collect.Iterables$10 -> com.google.common.collect.av:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
com.google.common.collect.Iterables$5 -> com.google.common.collect.aw:
    java.lang.Iterable val$fromIterable -> a
    com.google.common.base.Function val$function -> b
    void <init>(java.lang.Iterable,com.google.common.base.Function) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$7 -> com.google.common.collect.ax:
    java.lang.Iterable val$iterable -> a
    int val$limitSize -> b
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterators -> com.google.common.collect.ay:
    int size(java.util.Iterator) -> a
    boolean addAll(java.util.Collection,java.util.Iterator) -> a
    java.util.Iterator concat(java.util.Iterator) -> b
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate) -> a
    java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> a
    java.lang.Object getNext(java.util.Iterator,java.lang.Object) -> a
    void clear(java.util.Iterator) -> c
    com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable,java.util.Comparator) -> a
com.google.common.collect.Iterators$5 -> com.google.common.collect.az:
    java.util.Iterator val$unfiltered -> a
    com.google.common.base.Predicate val$retainIfTrue -> b
    void <init>(java.util.Iterator,com.google.common.base.Predicate) -> <init>
    java.lang.Object computeNext() -> a
com.google.common.collect.Iterators$6 -> com.google.common.collect.aA:
    com.google.common.base.Function val$function -> b
    void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Iterators$7 -> com.google.common.collect.aB:
    int count -> a
    int val$limitSize -> b
    java.util.Iterator val$iterator -> c
    void <init>(int,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$9 -> com.google.common.collect.aC:
    boolean done -> a
    java.lang.Object val$value -> b
    void <init>(java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$ArrayItr -> com.google.common.collect.aD:
    com.google.common.collect.UnmodifiableListIterator EMPTY -> a
    java.lang.Object[] array -> b
    int offset -> c
    void <init>(java.lang.Object[],int,int,int) -> <init>
    java.lang.Object get(int) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.Iterators$ConcatenatedIterator -> com.google.common.collect.aE:
    java.util.Iterator toRemove -> a
    java.util.Iterator iterator -> b
    java.util.Iterator topMetaIterator -> c
    java.util.Deque metaIterators -> d
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.aF:
    java.util.Queue queue -> a
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.aG:
    java.util.Comparator val$itemComparator -> a
    void <init>(com.google.common.collect.Iterators$MergingIterator,java.util.Comparator) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.aH:
    java.util.Iterator iterator -> a
    boolean hasPeeked -> b
    java.lang.Object peekedElement -> c
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object peek() -> a
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.aI:
    java.util.Comparator elementOrder -> a
    void <init>(java.util.Comparator) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.ListMultimap -> com.google.common.collect.aJ:
com.google.common.collect.Lists -> com.google.common.collect.aK:
    java.util.ArrayList newArrayList(java.lang.Object[]) -> a
    java.util.ArrayList newArrayList(java.lang.Iterable) -> a
    java.util.ArrayList newArrayList(java.util.Iterator) -> a
    java.util.List transform(java.util.List,com.google.common.base.Function) -> a
    int indexOfImpl(java.util.List,java.lang.Object) -> a
    int lastIndexOfImpl(java.util.List,java.lang.Object) -> b
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.aL:
    java.lang.Object first -> a
    java.lang.Object[] rest -> b
    void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.aM:
    java.util.List fromList -> b
    com.google.common.base.Function function -> a
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(int) -> remove
    int size() -> size
com.google.common.collect.Lists$TransformingRandomAccessList$1 -> com.google.common.collect.aN:
    com.google.common.collect.Lists$TransformingRandomAccessList this$0 -> b
    void <init>(com.google.common.collect.Lists$TransformingRandomAccessList,java.util.ListIterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.aO:
    java.util.List fromList -> b
    com.google.common.base.Function function -> a
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.aP:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> b
    void <init>(com.google.common.collect.Lists$TransformingSequentialList,java.util.ListIterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.MapMaker -> com.google.common.collect.aQ:
    boolean useCustomMap -> a
    int initialCapacity -> c
    int concurrencyLevel -> d
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> b
    void <init>() -> <init>
    int getInitialCapacity() -> a
    int getConcurrencyLevel() -> b
    com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> c
    com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> d
    java.lang.String toString() -> toString
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.aR:
    int segmentMask -> d
    int segmentShift -> e
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> a
    int concurrencyLevel -> f
    com.google.common.base.Equivalence keyEquivalence -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntryHelper entryHelper -> c
    com.google.common.collect.MapMakerInternalMap$WeakValueReference UNSET_WEAK_VALUE_REFERENCE -> g
    java.util.Set keySet -> h
    java.util.Collection values -> i
    java.util.Set entrySet -> j
    void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper) -> <init>
    com.google.common.collect.MapMakerInternalMap create(com.google.common.collect.MapMaker) -> a
    com.google.common.collect.MapMakerInternalMap$WeakValueReference unsetWeakValueReference() -> a
    int hash(java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> a
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.base.Equivalence valueEquivalence() -> b
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.ArrayList access$900(java.util.Collection) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.aS:
    void <init>() -> <init>
    void clear() -> clear
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry -> com.google.common.collect.aT:
    java.lang.Object key -> a
    int hash -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> c
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    java.lang.Object getKey() -> a
    int getHash() -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry -> com.google.common.collect.aU:
    int hash -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> b
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    java.lang.Object getKey() -> a
    int getHash() -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.aV:
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.aW:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.aX:
    int nextSegmentIndex -> a
    int nextTableIndex -> b
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> c
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> d
    com.google.common.collect.MapMakerInternalMap$InternalEntry nextEntry -> e
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> f
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> g
    com.google.common.collect.MapMakerInternalMap this$0 -> h
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    void advance() -> b
    boolean nextInChain() -> c
    boolean nextInTable() -> d
    boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    boolean hasNext() -> hasNext
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> a
    void remove() -> remove
com.google.common.collect.MapMakerInternalMap$InternalEntry -> com.google.common.collect.aY:
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
    int getHash() -> b
    java.lang.Object getKey() -> a
    java.lang.Object getValue() -> d
com.google.common.collect.MapMakerInternalMap$InternalEntryHelper -> com.google.common.collect.aZ:
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> a
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.ba:
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.bb:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$SafeToArraySet -> com.google.common.collect.bc:
    void <init>() -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void <init>(byte) -> <init>
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.bd:
    com.google.common.collect.MapMakerInternalMap map -> e
    int count -> a
    int modCount -> b
    int threshold -> f
    java.util.concurrent.atomic.AtomicReferenceArray table -> c
    int maxSegmentSize -> g
    java.util.concurrent.atomic.AtomicInteger readCount -> d
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    void maybeDrainReferenceQueues() -> b
    void maybeClearReferenceQueues() -> c
    void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> a
    void tryDrainReferenceQueues() -> d
    void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue) -> a
    void drainValueReferenceQueue(java.lang.ref.ReferenceQueue) -> b
    void clearReferenceQueue(java.lang.ref.ReferenceQueue) -> c
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int) -> d
    java.lang.Object get(java.lang.Object,int) -> a
    boolean containsKey(java.lang.Object,int) -> b
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> a
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> a
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object,int) -> c
    boolean remove(java.lang.Object,int,java.lang.Object) -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> b
    boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry,int) -> a
    boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> a
    boolean isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    void postReadCleanup() -> e
    void runLockedCleanup() -> f
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.be:
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> a
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> b
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.bf:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.bg:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry -> com.google.common.collect.bh:
    java.lang.Object value -> c
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> <init>
    java.lang.Object getValue() -> d
    void setValue(java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper -> com.google.common.collect.bi:
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper INSTANCE -> a
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper instance() -> b
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment -> com.google.common.collect.bj:
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry -> com.google.common.collect.bk:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> c
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> <init>
    java.lang.Object getValue() -> d
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> a
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> a
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper -> com.google.common.collect.bl:
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper INSTANCE -> a
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper instance() -> b
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment -> com.google.common.collect.bm:
    java.lang.ref.ReferenceQueue queueForValues -> e
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    void maybeDrainReferenceQueues() -> b
    void maybeClearReferenceQueues() -> c
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    java.lang.ref.ReferenceQueue access$100(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment) -> a
com.google.common.collect.MapMakerInternalMap$StrongValueEntry -> com.google.common.collect.bn:
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.bo:
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.bp:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry -> com.google.common.collect.bq:
    java.lang.Object value -> b
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> <init>
    java.lang.Object getValue() -> d
    void setValue(java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper -> com.google.common.collect.br:
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper INSTANCE -> a
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper instance() -> b
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment -> com.google.common.collect.bs:
    java.lang.ref.ReferenceQueue queueForKeys -> e
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    void maybeDrainReferenceQueues() -> b
    void maybeClearReferenceQueues() -> c
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    java.lang.ref.ReferenceQueue access$300(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment) -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry -> com.google.common.collect.bt:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> b
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> <init>
    java.lang.Object getValue() -> d
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> a
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> a
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper -> com.google.common.collect.bu:
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper INSTANCE -> a
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper instance() -> b
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment -> com.google.common.collect.bv:
    java.lang.ref.ReferenceQueue queueForKeys -> e
    java.lang.ref.ReferenceQueue queueForValues -> f
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    void maybeDrainReferenceQueues() -> b
    void maybeClearReferenceQueues() -> c
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    java.lang.ref.ReferenceQueue access$400(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> a
    java.lang.ref.ReferenceQueue access$500(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> b
com.google.common.collect.MapMakerInternalMap$WeakValueEntry -> com.google.common.collect.bw:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.bx:
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl -> com.google.common.collect.by:
    com.google.common.collect.MapMakerInternalMap$InternalEntry entry -> a
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.bz:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.google.common.collect.MapMakerInternalMap this$0 -> c
    void <init>(com.google.common.collect.MapMakerInternalMap,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.Maps -> com.google.common.collect.bA:
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> a
    java.lang.Object safeGet(java.util.Map,java.lang.Object) -> a
    boolean safeContainsKey(java.util.Map,java.lang.Object) -> b
    java.lang.Object safeRemove(java.util.Map,java.lang.Object) -> c
    java.lang.Object keyOrNull(java.util.Map$Entry) -> a
    com.google.common.collect.ImmutableMap indexMap(java.util.Collection) -> a
com.google.common.collect.Maps$1 -> com.google.common.collect.bB:
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$2 -> com.google.common.collect.bC:
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.bD:
    com.google.common.collect.Maps$EntryFunction KEY -> a
    com.google.common.collect.Maps$EntryFunction VALUE -> b
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.bE:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.bF:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.bG:
    void <init>() -> <init>
    java.util.Map map() -> a
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$KeySet -> com.google.common.collect.bH:
    java.util.Map map -> b
    void <init>(java.util.Map) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Maps$Values -> com.google.common.collect.bI:
    java.util.Map map -> a
    void <init>(java.util.Map) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.Maps$ViewCachingAbstractMap -> com.google.common.collect.bJ:
    java.util.Set entrySet -> a
    java.util.Set keySet -> b
    java.util.Collection values -> c
    void <init>() -> <init>
    java.util.Set createEntrySet() -> a
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
com.google.common.collect.Multimap -> com.google.common.collect.bK:
    java.util.Collection get(java.lang.Object) -> b
    java.util.Map asMap() -> b
com.google.common.collect.Multiset -> com.google.common.collect.bL:
    java.util.Set elementSet() -> a
com.google.common.collect.NaturalOrdering -> com.google.common.collect.bM:
    com.google.common.collect.NaturalOrdering INSTANCE -> a
    com.google.common.collect.Ordering nullsFirst -> b
    com.google.common.collect.Ordering nullsLast -> c
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.String toString() -> toString
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.bN:
    com.google.common.collect.Ordering ordering -> a
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.bO:
    com.google.common.collect.Ordering ordering -> a
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    int LEFT_IS_GREATER -> LEFT_IS_GREATER
    int RIGHT_IS_GREATER -> RIGHT_IS_GREATER
    com.google.common.collect.Ordering natural() -> natural
    com.google.common.collect.Ordering from(java.util.Comparator) -> from
    com.google.common.collect.Ordering from(com.google.common.collect.Ordering) -> from
    com.google.common.collect.Ordering explicit(java.util.List) -> explicit
    com.google.common.collect.Ordering explicit(java.lang.Object,java.lang.Object[]) -> explicit
    com.google.common.collect.Ordering allEqual() -> allEqual
    com.google.common.collect.Ordering usingToString() -> usingToString
    com.google.common.collect.Ordering arbitrary() -> arbitrary
    void <init>() -> <init>
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.collect.Ordering onKeys() -> onKeys
    com.google.common.collect.Ordering compound(java.util.Comparator) -> compound
    com.google.common.collect.Ordering compound(java.lang.Iterable) -> compound
    com.google.common.collect.Ordering lexicographical() -> lexicographical
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.util.List leastOf(java.lang.Iterable,int) -> leastOf
    java.util.List leastOf(java.util.Iterator,int) -> leastOf
    java.util.List greatestOf(java.lang.Iterable,int) -> greatestOf
    java.util.List greatestOf(java.util.Iterator,int) -> greatestOf
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    boolean isOrdered(java.lang.Iterable) -> isOrdered
    boolean isStrictlyOrdered(java.lang.Iterable) -> isStrictlyOrdered
    int binarySearch(java.util.List,java.lang.Object) -> binarySearch
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.bP:
    java.util.concurrent.atomic.AtomicInteger counter -> a
    java.util.concurrent.ConcurrentMap uids -> b
    void <init>() -> <init>
    java.lang.Integer getUid(java.lang.Object) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.String toString() -> toString
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.bQ:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> a
    void <clinit>() -> <clinit>
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.bR:
    void <init>(java.lang.Object) -> <init>
com.google.common.collect.PeekingIterator -> com.google.common.collect.bS:
    java.lang.Object peek() -> a
    java.lang.Object next() -> next
com.google.common.collect.Range -> com.google.common.collect.bT:
    com.google.common.collect.Range ALL -> c
    com.google.common.collect.Cut lowerBound -> a
    com.google.common.collect.Cut upperBound -> b
    com.google.common.base.Function lowerBoundFn() -> a
    com.google.common.collect.Ordering rangeLexOrdering() -> b
    com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut) -> a
    com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable) -> a
    com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable) -> b
    com.google.common.collect.Range atMost(java.lang.Comparable) -> a
    com.google.common.collect.Range atLeast(java.lang.Comparable) -> b
    com.google.common.collect.Range all() -> c
    void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut) -> <init>
    boolean isEmpty() -> d
    boolean contains(java.lang.Comparable) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut) -> b
    int compareOrThrow(java.lang.Comparable,java.lang.Comparable) -> c
    boolean apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.collect.Range$LowerBoundFn -> com.google.common.collect.bU:
    com.google.common.collect.Range$LowerBoundFn INSTANCE -> a
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.common.collect.Range$RangeLexOrdering -> com.google.common.collect.bV:
    com.google.common.collect.Ordering INSTANCE -> a
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.RangeGwtSerializationDependencies -> com.google.common.collect.bW:
    void <init>() -> <init>
com.google.common.collect.RangeMap -> com.google.common.collect.bX:
    java.lang.Object get(java.lang.Comparable) -> a
    java.util.Map asMapOfRanges() -> b
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.bY:
    com.google.common.collect.RegularImmutableBiMap EMPTY -> a
    int[] keyHashTable -> b
    java.lang.Object[] alternatingKeysAndValues -> c
    int keyOffset -> d
    int size -> e
    com.google.common.collect.RegularImmutableBiMap inverse -> f
    void <init>() -> <init>
    void <init>(java.lang.Object[],int) -> <init>
    void <init>(int[],java.lang.Object[],int,com.google.common.collect.RegularImmutableBiMap) -> <init>
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> b
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> g
    com.google.common.collect.ImmutableSet createKeySet() -> i
    boolean isPartialView() -> j
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableList -> com.google.common.collect.bZ:
    com.google.common.collect.ImmutableList EMPTY -> a
    java.lang.Object[] array -> b
    int size -> c
    void <init>(java.lang.Object[],int) -> <init>
    int size() -> size
    boolean isPartialView() -> f
    java.lang.Object[] internalArray() -> b
    int internalArrayStart() -> c
    int internalArrayEnd() -> d
    int copyIntoArray(java.lang.Object[],int) -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.ca:
    com.google.common.collect.ImmutableMap EMPTY -> a
    int[] hashTable -> b
    java.lang.Object[] alternatingKeysAndValues -> c
    int size -> d
    com.google.common.collect.RegularImmutableMap create(int,java.lang.Object[]) -> a
    int[] createHashTable(java.lang.Object[],int,int,int) -> a
    void <init>(int[],java.lang.Object[],int) -> <init>
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object get(int[],java.lang.Object[],int,int,java.lang.Object) -> a
    com.google.common.collect.ImmutableSet createEntrySet() -> g
    com.google.common.collect.ImmutableSet createKeySet() -> i
    com.google.common.collect.ImmutableCollection createValues() -> c
    boolean isPartialView() -> j
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap$EntrySet -> com.google.common.collect.cb:
    com.google.common.collect.ImmutableMap map -> a
    java.lang.Object[] alternatingKeysAndValues -> b
    int keyOffset -> c
    int size -> d
    void <init>(com.google.common.collect.ImmutableMap,java.lang.Object[],int,int) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList createAsList() -> j
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> f
    int size() -> size
    java.util.Iterator iterator() -> iterator
    int access$000(com.google.common.collect.RegularImmutableMap$EntrySet) -> a
    java.lang.Object[] access$100(com.google.common.collect.RegularImmutableMap$EntrySet) -> b
    int access$200(com.google.common.collect.RegularImmutableMap$EntrySet) -> c
com.google.common.collect.RegularImmutableMap$EntrySet$1 -> com.google.common.collect.cc:
    com.google.common.collect.RegularImmutableMap$EntrySet this$0 -> a
    void <init>(com.google.common.collect.RegularImmutableMap$EntrySet) -> <init>
    int size() -> size
    boolean isPartialView() -> f
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableMap$KeySet -> com.google.common.collect.cd:
    com.google.common.collect.ImmutableMap map -> a
    com.google.common.collect.ImmutableList list -> b
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList asList() -> e
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> f
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList -> com.google.common.collect.ce:
    java.lang.Object[] alternatingKeysAndValues -> a
    int offset -> b
    int size -> c
    void <init>(java.lang.Object[],int,int) -> <init>
    java.lang.Object get(int) -> get
    boolean isPartialView() -> f
    int size() -> size
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.cf:
    com.google.common.collect.RegularImmutableSet EMPTY -> a
    java.lang.Object[] elements -> b
    java.lang.Object[] table -> c
    int mask -> d
    int hashCode -> e
    int size -> f
    void <init>(java.lang.Object[],int,java.lang.Object[],int,int) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] internalArray() -> b
    int internalArrayStart() -> c
    int internalArrayEnd() -> d
    int copyIntoArray(java.lang.Object[],int) -> a
    com.google.common.collect.ImmutableList createAsList() -> j
    boolean isPartialView() -> f
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> h
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.cg:
    com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET -> b
    com.google.common.collect.ImmutableList elements -> c
    void <init>(com.google.common.collect.ImmutableList,java.util.Comparator) -> <init>
    java.lang.Object[] internalArray() -> b
    int internalArrayStart() -> c
    int internalArrayEnd() -> d
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> l
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isPartialView() -> f
    int copyIntoArray(java.lang.Object[],int) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> a
    int headIndex(java.lang.Object,boolean) -> c
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> b
    int tailIndex(java.lang.Object,boolean) -> d
    com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int) -> a
    int indexOf(java.lang.Object) -> b
    com.google.common.collect.ImmutableList asList() -> e
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> k
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.ch:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> a
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.String toString() -> toString
    void <init>() -> <init>
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.util.Iterator) -> min
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.ReverseOrdering -> com.google.common.collect.ci:
    com.google.common.collect.Ordering forwardOrder -> a
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.Sets -> com.google.common.collect.cj:
    int hashCodeImpl(java.util.Set) -> a
    boolean equalsImpl(java.util.Set,java.lang.Object) -> a
    boolean removeAllImpl(java.util.Set,java.util.Iterator) -> a
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.ck:
    void <init>() -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.cl:
    java.lang.Object element -> a
    int cachedHashCode -> b
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,int) -> <init>
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.ImmutableList createAsList() -> j
    boolean isPartialView() -> f
    int copyIntoArray(java.lang.Object[],int) -> a
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> h
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SortedIterable -> com.google.common.collect.cm:
    java.util.Comparator comparator() -> comparator
com.google.common.collect.SortedLists -> com.google.common.collect.cn:
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.co:
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> a
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> b
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> c
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> a
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.cp:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.cq:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.cr:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.cs:
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> a
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> b
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> c
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> d
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> e
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.ct:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.cu:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.cv:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.cw:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.cx:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.TopKSelector -> com.google.common.collect.cy:
    int k -> a
    java.util.Comparator comparator -> b
    java.lang.Object[] buffer -> c
    int bufferSize -> d
    java.lang.Object threshold -> e
    com.google.common.collect.TopKSelector least(int,java.util.Comparator) -> a
    void <init>(java.util.Comparator,int) -> <init>
    void offer(java.lang.Object) -> a
    java.util.List topK() -> a
com.google.common.collect.TransformedIterator -> com.google.common.collect.cz:
    java.util.Iterator backingIterator -> a
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.TransformedListIterator -> com.google.common.collect.cA:
    void <init>(java.util.ListIterator) -> <init>
    java.util.ListIterator backingIterator() -> a
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.TreeTraverser -> com.google.common.collect.cB:
    void <init>() -> <init>
com.google.common.collect.UnmodifiableIterator -> com.google.common.collect.cC:
    void <init>() -> <init>
    void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.google.common.collect.cD:
    void <init>() -> <init>
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.cE:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.io.ByteStreams -> com.google.common.b.a:
    byte[] toByteArrayInternal(java.io.InputStream,java.util.Deque,int) -> a
    byte[] combineBuffers(java.util.Deque,int) -> a
    byte[] toByteArray(java.io.InputStream) -> a
    void readFully(java.io.InputStream,byte[]) -> a
    void skipFully(java.io.InputStream,long) -> a
    void <clinit>() -> <clinit>
com.google.common.io.ByteStreams$1 -> com.google.common.b.b:
    void <init>() -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    java.lang.String toString() -> toString
com.google.common.io.Files -> com.google.common.b.c:
    java.lang.String getNameWithoutExtension(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.common.io.Files$2 -> com.google.common.b.d:
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.google.common.io.Files$3 -> com.google.common.b.e:
    void <init>() -> <init>
com.google.common.math.IntMath -> com.google.common.c.a:
    int log2(int,java.math.RoundingMode) -> a
com.google.common.math.IntMath$1 -> com.google.common.c.b:
    int[] $SwitchMap$java$math$RoundingMode -> a
    void <clinit>() -> <clinit>
javax.annotation.CheckForNull -> javax.annotation.CheckForNull:
javax.annotation.CheckForSigned -> javax.annotation.CheckForSigned:
javax.annotation.CheckReturnValue -> javax.annotation.CheckReturnValue:
    javax.annotation.meta.When when() -> when
javax.annotation.Detainted -> javax.annotation.Detainted:
javax.annotation.MatchesPattern -> javax.annotation.MatchesPattern:
    java.lang.String value() -> value
    int flags() -> flags
javax.annotation.MatchesPattern$Checker -> javax.annotation.MatchesPattern$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.MatchesPattern,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnegative -> javax.annotation.Nonnegative:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnegative$Checker -> javax.annotation.Nonnegative$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.Nonnegative,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnull -> javax.annotation.Nonnull:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnull$Checker -> javax.annotation.Nonnull$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.Nonnull,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nullable -> javax.annotation.Nullable:
javax.annotation.OverridingMethodsMustInvokeSuper -> javax.annotation.OverridingMethodsMustInvokeSuper:
javax.annotation.ParametersAreNonnullByDefault -> javax.annotation.ParametersAreNonnullByDefault:
javax.annotation.ParametersAreNullableByDefault -> javax.annotation.ParametersAreNullableByDefault:
javax.annotation.PropertyKey -> javax.annotation.PropertyKey:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx -> javax.annotation.RegEx:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx$Checker -> javax.annotation.RegEx$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.RegEx,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Signed -> javax.annotation.Signed:
javax.annotation.Syntax -> javax.annotation.Syntax:
    java.lang.String value() -> value
    javax.annotation.meta.When when() -> when
javax.annotation.Tainted -> javax.annotation.Tainted:
javax.annotation.Untainted -> javax.annotation.Untainted:
    javax.annotation.meta.When when() -> when
javax.annotation.WillClose -> javax.annotation.WillClose:
javax.annotation.WillCloseWhenClosed -> javax.annotation.WillCloseWhenClosed:
javax.annotation.WillNotClose -> javax.annotation.WillNotClose:
javax.annotation.concurrent.GuardedBy -> javax.annotation.concurrent.GuardedBy:
    java.lang.String value() -> value
javax.annotation.concurrent.Immutable -> javax.annotation.concurrent.Immutable:
javax.annotation.concurrent.NotThreadSafe -> javax.annotation.concurrent.NotThreadSafe:
javax.annotation.concurrent.ThreadSafe -> javax.annotation.concurrent.ThreadSafe:
javax.annotation.meta.Exclusive -> javax.annotation.meta.Exclusive:
javax.annotation.meta.Exhaustive -> javax.annotation.meta.Exhaustive:
javax.annotation.meta.TypeQualifier -> javax.annotation.meta.TypeQualifier:
    java.lang.Class applicableTo() -> applicableTo
javax.annotation.meta.TypeQualifierDefault -> javax.annotation.meta.TypeQualifierDefault:
    java.lang.annotation.ElementType[] value() -> value
javax.annotation.meta.TypeQualifierNickname -> javax.annotation.meta.TypeQualifierNickname:
javax.annotation.meta.TypeQualifierValidator -> javax.annotation.meta.TypeQualifierValidator:
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.meta.When -> javax.annotation.meta.When:
    javax.annotation.meta.When ALWAYS -> ALWAYS
    javax.annotation.meta.When UNKNOWN -> UNKNOWN
    javax.annotation.meta.When MAYBE -> MAYBE
    javax.annotation.meta.When NEVER -> NEVER
    javax.annotation.meta.When[] $VALUES -> $VALUES
    javax.annotation.meta.When[] values() -> values
    javax.annotation.meta.When valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
managers.FileChooserDialogManager -> managers.FileChooserDialogManager:
    com.intellij.openapi.fileChooser.FileChooserDescriptor fileChooserDescriptor -> fileChooserDescriptor
    com.intellij.openapi.vfs.VirtualFile selectedFile -> selectedFile
    boolean isFile -> isFile
    boolean isFolder -> isFolder
    boolean isJar -> isJar
    boolean isJarAsFile -> isJarAsFile
    boolean isJarContent -> isJarContent
    boolean isMultiple -> isMultiple
    void <init>(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile,java.lang.String,java.lang.String,java.lang.String,int[]) -> <init>
    void initFileChooserDescriptor(java.lang.String,java.lang.String,java.lang.String) -> initFileChooserDescriptor
    com.intellij.openapi.fileChooser.FileChooserDescriptor getFileChooserDescriptor() -> getFileChooserDescriptor
    com.intellij.openapi.vfs.VirtualFile createFileChooserDialog(com.intellij.openapi.project.Project) -> createFileChooserDialog
    com.intellij.openapi.vfs.VirtualFile createFileChooserDialog(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile) -> createFileChooserDialog
    com.intellij.openapi.vfs.VirtualFile getSelectedFile() -> getSelectedFile
    void fileTypesSwitchStatement(int) -> fileTypesSwitchStatement
    boolean lambda$initFileChooserDescriptor$0(com.intellij.openapi.vfs.VirtualFile) -> lambda$initFileChooserDescriptor$0
    void <init>(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile,java.lang.String,java.lang.String,java.lang.String,int[],managers.FileChooserDialogManager$1) -> <init>
managers.FileChooserDialogManager$1 -> managers.FileChooserDialogManager$1:
managers.FileChooserDialogManager$Builder -> managers.FileChooserDialogManager$Builder:
    com.intellij.openapi.project.Project project -> project
    com.intellij.openapi.vfs.VirtualFile fileToSelectOnCreate -> fileToSelectOnCreate
    java.lang.String title -> title
    java.lang.String description -> description
    java.lang.String filterExtension -> filterExtension
    int[] fileTypes -> fileTypes
    void <init>(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile) -> <init>
    void <init>(com.intellij.openapi.project.Project) -> <init>
    managers.FileChooserDialogManager$Builder setFileTypes(int[]) -> setFileTypes
    managers.FileChooserDialogManager$Builder setTitle(java.lang.String) -> setTitle
    managers.FileChooserDialogManager$Builder setDescription(java.lang.String) -> setDescription
    managers.FileChooserDialogManager$Builder withFileFilter(java.lang.String) -> withFileFilter
    managers.FileChooserDialogManager create() -> create
managers.PropertiesManager -> managers.PropertiesManager:
    void <init>() -> <init>
    java.lang.String getData(com.intellij.openapi.project.Project,java.lang.String,java.lang.String) -> getData
    java.lang.String getData(com.intellij.openapi.project.Project,java.lang.String) -> getData
    java.lang.String getData(java.lang.String,java.lang.String) -> getData
    java.lang.String getData(java.lang.String) -> getData
    void putData(com.intellij.openapi.project.Project,java.lang.String,java.lang.String) -> putData
    void putData(java.lang.String,java.lang.String) -> putData
    java.lang.String loadFromPropertiesComponent(com.intellij.openapi.project.Project,java.lang.String,java.lang.String) -> loadFromPropertiesComponent
    void saveToPropertiesComponent(com.intellij.openapi.project.Project,java.lang.String,java.lang.String) -> saveToPropertiesComponent
org.apache.commons.lang3.StringUtils -> org.apache.commons.lang3.StringUtils:
    boolean isEmpty(java.lang.CharSequence) -> isEmpty
    boolean isNumeric(java.lang.CharSequence) -> isNumeric
    void <init>() -> <init>
org.jf.baksmali.Adaptors.BlankMethodItem -> org.jf.a.a.a:
    void <init>(int) -> <init>
    double getSortOrder() -> a
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.CatchMethodItem -> org.jf.a.a.b:
    java.lang.String exceptionType -> a
    org.jf.baksmali.Adaptors.LabelMethodItem tryStartLabel -> c
    org.jf.baksmali.Adaptors.LabelMethodItem tryEndLabel -> d
    org.jf.baksmali.Adaptors.LabelMethodItem handlerLabel -> e
    void <init>(org.jf.baksmali.BaksmaliOptions,org.jf.baksmali.Adaptors.MethodDefinition$LabelCache,int,java.lang.String,int,int,int) -> <init>
    double getSortOrder() -> a
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.ClassDefinition -> org.jf.a.a.c:
    org.jf.baksmali.BaksmaliOptions options -> a
    org.jf.dexlib2.iface.ClassDef classDef -> b
    java.util.HashSet fieldsSetInStaticConstructor -> c
    void <init>(org.jf.baksmali.BaksmaliOptions,org.jf.dexlib2.iface.ClassDef) -> <init>
    java.util.HashSet findFieldsSetInStaticConstructor(org.jf.dexlib2.iface.ClassDef) -> a
    void writeTo(org.jf.util.IndentingWriter) -> a
    void writeInstanceFields(org.jf.util.IndentingWriter,java.util.Set) -> a
    java.util.Set writeDirectMethods(org.jf.util.IndentingWriter) -> b
    void writeVirtualMethods(org.jf.util.IndentingWriter,java.util.Set) -> b
org.jf.baksmali.Adaptors.ClassDefinition$1 -> org.jf.a.a.d:
    int[] $SwitchMap$org$jf$dexlib2$Opcode -> a
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.CommentingIndentingWriter -> org.jf.a.a.e:
    void <init>(java.io.Writer) -> <init>
    void writeIndent() -> a
org.jf.baksmali.Adaptors.Debug.BeginEpilogueMethodItem -> org.jf.a.a.a.a:
    void <init>(int,int) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.DebugMethodItem -> org.jf.a.a.a.b:
    int sortOrder -> a
    void <init>(int,int) -> <init>
    double getSortOrder() -> a
    org.jf.baksmali.Adaptors.Debug.DebugMethodItem build(org.jf.baksmali.Adaptors.RegisterFormatter,org.jf.dexlib2.iface.debug.DebugItem) -> a
org.jf.baksmali.Adaptors.Debug.EndLocalMethodItem -> org.jf.a.a.a.c:
    org.jf.dexlib2.iface.debug.EndLocal endLocal -> a
    org.jf.baksmali.Adaptors.RegisterFormatter registerFormatter -> c
    void <init>(int,int,org.jf.baksmali.Adaptors.RegisterFormatter,org.jf.dexlib2.iface.debug.EndLocal) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.EndPrologueMethodItem -> org.jf.a.a.a.d:
    void <init>(int,int) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.LineNumberMethodItem -> org.jf.a.a.a.e:
    int lineNumber -> a
    void <init>(int,int,org.jf.dexlib2.iface.debug.LineNumber) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.RestartLocalMethodItem -> org.jf.a.a.a.f:
    org.jf.dexlib2.iface.debug.RestartLocal restartLocal -> a
    org.jf.baksmali.Adaptors.RegisterFormatter registerFormatter -> c
    void <init>(int,int,org.jf.baksmali.Adaptors.RegisterFormatter,org.jf.dexlib2.iface.debug.RestartLocal) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.SetSourceFileMethodItem -> org.jf.a.a.a.g:
    java.lang.String sourceFile -> a
    void <init>(int,int,org.jf.dexlib2.iface.debug.SetSourceFile) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Debug.StartLocalMethodItem -> org.jf.a.a.a.h:
    org.jf.dexlib2.iface.debug.StartLocal startLocal -> a
    org.jf.baksmali.Adaptors.RegisterFormatter registerFormatter -> c
    void <init>(int,int,org.jf.baksmali.Adaptors.RegisterFormatter,org.jf.dexlib2.iface.debug.StartLocal) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.EndTryLabelMethodItem -> org.jf.a.a.f:
    int endTryAddress -> a
    void <init>(org.jf.baksmali.BaksmaliOptions,int,int) -> <init>
    double getSortOrder() -> a
    int getLabelAddress() -> b
org.jf.baksmali.Adaptors.Format.ArrayDataMethodItem -> org.jf.a.a.b.a:
    void <init>(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.formats.ArrayPayload) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.InstructionMethodItem -> org.jf.a.a.b.b:
    org.jf.baksmali.Adaptors.MethodDefinition methodDef -> c
    org.jf.dexlib2.iface.instruction.Instruction instruction -> a
    boolean $assertionsDisabled -> d
    void <init>(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.Instruction) -> <init>
    double getSortOrder() -> a
    boolean writeTo(org.jf.util.IndentingWriter) -> a
    void writeOpcode(org.jf.util.IndentingWriter) -> c
    void writeTargetLabel(org.jf.util.IndentingWriter) -> b
    void writeRegister(org.jf.util.IndentingWriter,int) -> a
    void writeFirstRegister(org.jf.util.IndentingWriter) -> d
    void writeSecondRegister(org.jf.util.IndentingWriter) -> e
    void writeInvokeRegisters(org.jf.util.IndentingWriter) -> f
    void writeInvokeRangeRegisters(org.jf.util.IndentingWriter) -> g
    void writeLiteral(org.jf.util.IndentingWriter) -> h
    void writeCommentIfLikelyFloat(org.jf.util.IndentingWriter,int) -> b
    void writeCommentIfLikelyDouble(org.jf.util.IndentingWriter,long) -> a
    boolean writeCommentIfResourceId(org.jf.util.IndentingWriter,int) -> c
    void writeInlineIndex(org.jf.util.IndentingWriter) -> i
    void writeVtableIndex(org.jf.util.IndentingWriter) -> j
    void lambda$writeTo$2(org.jf.dexlib2.iface.reference.Reference$InvalidReferenceException,org.jf.util.IndentingWriter) -> a
    void lambda$writeTo$1(org.jf.dexlib2.iface.reference.Reference,java.lang.String,org.jf.util.IndentingWriter) -> a
    void lambda$writeTo$0(org.jf.dexlib2.iface.reference.Reference$InvalidReferenceException,org.jf.util.IndentingWriter) -> b
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.Format.InstructionMethodItem$1 -> org.jf.a.a.b.c:
    org.jf.dexlib2.iface.reference.Reference val$reference -> a
    void <init>(org.jf.baksmali.Adaptors.Format.InstructionMethodItem,org.jf.dexlib2.iface.reference.Reference) -> <init>
    void writeTo(org.jf.util.IndentingWriter) -> writeTo
org.jf.baksmali.Adaptors.Format.InstructionMethodItem$2 -> org.jf.a.a.b.d:
    org.jf.dexlib2.iface.reference.Reference val$reference -> a
    java.lang.String val$classContext -> b
    void <init>(org.jf.baksmali.Adaptors.Format.InstructionMethodItem,org.jf.dexlib2.iface.reference.Reference,java.lang.String) -> <init>
    void writeTo(org.jf.util.IndentingWriter) -> writeTo
org.jf.baksmali.Adaptors.Format.InstructionMethodItem$3 -> org.jf.a.a.b.e:
    int[] $SwitchMap$org$jf$dexlib2$Opcode -> a
    int[] $SwitchMap$org$jf$dexlib2$Format -> b
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.Format.InstructionMethodItem$Writable -> org.jf.a.a.b.f:
    void writeTo(org.jf.util.IndentingWriter) -> writeTo
org.jf.baksmali.Adaptors.Format.InstructionMethodItemFactory -> org.jf.a.a.b.g:
    org.jf.baksmali.Adaptors.Format.InstructionMethodItem makeInstructionFormatMethodItem(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.Instruction) -> a
    void writeTo(org.jf.util.IndentingWriter,java.util.Collection,java.lang.String) -> a
    void writeTo(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.Annotation,java.lang.String) -> a
    void writeLocal(org.jf.util.IndentingWriter,java.lang.String,java.lang.String,java.lang.String) -> a
    void writeTo(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.value.ArrayEncodedValue,java.lang.String) -> a
    void writeTo(org.jf.baksmali.BaksmaliOptions,org.jf.util.IndentingWriter,org.jf.dexlib2.iface.Field,boolean) -> a
    void writeStringReference(org.jf.util.IndentingWriter,java.lang.String) -> a
    void writeCallSiteReference(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.reference.CallSiteReference) -> a
    void writeReference(org.jf.util.IndentingWriter,int,org.jf.dexlib2.iface.reference.Reference) -> a
    void writeTo(org.jf.util.IndentingWriter,boolean) -> a
    void writeTo(org.jf.util.IndentingWriter,byte) -> a
    void writeTo(org.jf.util.IndentingWriter,char) -> a
    void writeTo(org.jf.util.IndentingWriter,double) -> a
    void writeTo(org.jf.util.IndentingWriter,float) -> a
    void writeTo(org.jf.util.IndentingWriter,int) -> a
    void writeTo(org.jf.util.IndentingWriter,long) -> a
    void writeSignedIntOrLongTo(org.jf.util.IndentingWriter,long) -> b
    void writeTo(org.jf.util.IndentingWriter,short) -> a
    int mapDexVersionToApi(int) -> a
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload of$4e94cfdd(org.jf.dexlib2.iface.reference.Reference) -> a
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload of$1a940e96(int,org.jf.dexlib2.iface.reference.Reference) -> a
    boolean isDefaultValue(org.jf.dexlib2.iface.value.EncodedValue) -> a
    void writeEncodedValue(java.io.Writer,org.jf.dexlib2.iface.value.EncodedValue) -> a
    void checkFormat(org.jf.dexlib2.Opcode,org.jf.dexlib2.Format) -> a
    int checkNibbleRegister(int) -> b
    int checkByteRegister(int) -> c
    int checkShortRegister(int) -> d
    int checkNibbleLiteral(int) -> e
    int checkByteLiteral(int) -> f
    int checkShortLiteral(int) -> g
    int checkIntegerHatLiteral(int) -> h
    long checkLongHatLiteral(long) -> a
    int checkShortCodeOffset(int) -> i
    int check35cAnd45ccRegisterCount(int) -> j
    int checkRegisterRangeCount(int) -> k
    void checkValueArg(int,int) -> a
    int checkVtableIndex(int) -> l
    int checkInlineIndex(int) -> m
    int checkVerificationError(int) -> n
    java.util.List checkArrayPayloadElements(int,java.util.List) -> a
    java.lang.String getMethodDescriptor(org.jf.dexlib2.iface.reference.MethodReference) -> a
    java.lang.String getMethodDescriptor(org.jf.dexlib2.iface.reference.MethodReference,boolean) -> a
    java.lang.String getMethodProtoDescriptor(org.jf.dexlib2.iface.reference.MethodProtoReference) -> a
    void writeMethodProtoDescriptor(java.io.Writer,org.jf.dexlib2.iface.reference.MethodProtoReference) -> a
    void writeMethodDescriptor(java.io.Writer,org.jf.dexlib2.iface.reference.MethodReference) -> a
    void writeMethodDescriptor(java.io.Writer,org.jf.dexlib2.iface.reference.MethodReference,boolean) -> a
    java.lang.String getFieldDescriptor(org.jf.dexlib2.iface.reference.FieldReference,boolean) -> a
    java.lang.String getShortFieldDescriptor(org.jf.dexlib2.iface.reference.FieldReference) -> a
    void writeFieldDescriptor(java.io.Writer,org.jf.dexlib2.iface.reference.FieldReference,boolean) -> a
    java.lang.String getMethodHandleString(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    void writeMethodHandle(java.io.Writer,org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    java.lang.String getCallSiteString(org.jf.dexlib2.iface.reference.CallSiteReference) -> a
    void writeCallSite(java.io.Writer,org.jf.dexlib2.iface.reference.CallSiteReference) -> a
    java.lang.String getReferenceString(org.jf.dexlib2.iface.reference.Reference,java.lang.String) -> a
    boolean isWideType(java.lang.String) -> a
    int compareAsIterable(java.util.Comparator,java.lang.Iterable,java.lang.Iterable) -> a
    boolean isNaturalSortedSet(java.lang.Iterable) -> a
    java.util.SortedSet toNaturalSortedSet(java.util.Collection) -> a
    int compareAsSet(java.util.Collection,java.util.Collection) -> a
    java.lang.String u4(int) -> o
    java.lang.String u1(int) -> p
    com.google.common.collect.ImmutableList nullToEmptyList(com.google.common.collect.ImmutableList) -> a
    com.google.common.collect.ImmutableSet nullToEmptySet(com.google.common.collect.ImmutableSet) -> a
    void writeEscapedChar(java.io.Writer,char) -> a
    void writeEscapedString(java.io.Writer,java.lang.String) -> a
    java.lang.String escapeString(java.lang.String) -> b
org.jf.baksmali.Adaptors.Format.InstructionMethodItemFactory$1 -> org.jf.a.a.b.h:
    int[] $SwitchMap$org$jf$dexlib2$Format -> a
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.Format.OffsetInstructionFormatMethodItem -> org.jf.a.a.b.i:
    org.jf.baksmali.Adaptors.LabelMethodItem label -> c
    boolean $assertionsDisabled -> d
    void <init>(org.jf.baksmali.BaksmaliOptions,org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.OffsetInstruction) -> <init>
    void writeTargetLabel(org.jf.util.IndentingWriter) -> b
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.Format.OffsetInstructionFormatMethodItem$1 -> org.jf.a.a.b.j:
    int[] $SwitchMap$org$jf$dexlib2$Format -> a
    void <clinit>() -> <clinit>
org.jf.baksmali.Adaptors.Format.PackedSwitchMethodItem -> org.jf.a.a.b.k:
    java.util.List targets -> c
    int firstKey -> d
    boolean commentedOut -> e
    void <init>(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.PackedSwitchMethodItem$PackedSwitchLabelTarget -> org.jf.a.a.b.l:
    org.jf.baksmali.Adaptors.LabelMethodItem target -> a
    void <init>(org.jf.baksmali.Adaptors.LabelMethodItem) -> <init>
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.PackedSwitchMethodItem$PackedSwitchOffsetTarget -> org.jf.a.a.b.m:
    int target -> a
    void <init>(int) -> <init>
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.PackedSwitchMethodItem$PackedSwitchTarget -> org.jf.a.a.b.n:
    void <init>() -> <init>
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
    void <init>(byte) -> <init>
org.jf.baksmali.Adaptors.Format.SparseSwitchMethodItem -> org.jf.a.a.b.o:
    java.util.List targets -> c
    boolean commentedOut -> d
    void <init>(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.SparseSwitchMethodItem$SparseSwitchLabelTarget -> org.jf.a.a.b.p:
    org.jf.baksmali.Adaptors.LabelMethodItem target -> a
    void <init>(int,org.jf.baksmali.Adaptors.LabelMethodItem) -> <init>
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.SparseSwitchMethodItem$SparseSwitchOffsetTarget -> org.jf.a.a.b.q:
    int target -> a
    void <init>(int,int) -> <init>
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.SparseSwitchMethodItem$SparseSwitchTarget -> org.jf.a.a.b.r:
    int key -> a
    void <init>(int) -> <init>
    int getKey() -> a
    void writeTargetTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.Format.UnresolvedOdexInstructionMethodItem -> org.jf.a.a.b.s:
    void <init>(org.jf.baksmali.Adaptors.MethodDefinition,int,org.jf.dexlib2.analysis.UnresolvedOdexInstruction) -> <init>
    boolean writeTo(org.jf.util.IndentingWriter) -> a
org.jf.baksmali.Adaptors.LabelMethodItem -> org.jf.a.a.g:
    org.jf.baksmali.BaksmaliOptions options -> a
    java.lang.String labelPrefix -> c
    int labelSequence -> d
    void <init>(org.jf.baksmali.BaksmaliOptions,int,java.lang.String) -> <init>
    double getSortOrder() -> a
    int compareTo(org.jf.baksmali.Adaptors.MethodItem) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean writeTo(org.jf.util.IndentingWriter) -> a
    java.lang.String getLabelPrefix() -> c
    int getLabelAddress() -> b
    void setLabelSequence(int) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.baksmali.Adaptors.MethodDefinition -> org.jf.a.a.h:
    org.jf.baksmali.Adaptors.ClassDefinition classDef -> a
    org.jf.dexlib2.iface.Method method -> b
    org.jf.dexlib2.iface.MethodImplementation methodImpl -> d
    com.google.common.collect.ImmutableList instructions -> e
    java.util.List effectiveInstructions -> f
    com.google.common.collect.ImmutableList methodParameters -> g
    org.jf.baksmali.Adaptors.RegisterFormatter registerFormatter -> c
    org.jf.baksmali.Adaptors.MethodDefinition$LabelCache labelCache -> h
    org.jf.dexlib2.util.DexUtil packedSwitchMap$4451c7a0 -> i
    org.jf.dexlib2.util.DexUtil sparseSwitchMap$4451c7a0 -> j
    org.jf.dexlib2.util.InstructionOffsetMap instructionOffsetMap -> k
    void <init>(org.jf.baksmali.Adaptors.ClassDefinition,org.jf.dexlib2.iface.Method,org.jf.dexlib2.iface.MethodImplementation) -> <init>
    void writeEmptyMethodTo(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.Method,org.jf.baksmali.BaksmaliOptions) -> a
    void writeTo(org.jf.util.IndentingWriter) -> a
    org.jf.dexlib2.iface.instruction.Instruction findSwitchPayload(int,org.jf.dexlib2.Opcode) -> b
    int findPayloadOffset(int,org.jf.dexlib2.Opcode) -> a
    void writeAccessFlagsAndRestrictions(org.jf.util.IndentingWriter,int,java.util.Set) -> a
    void writeParameters(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.Method,java.util.List,org.jf.baksmali.BaksmaliOptions) -> a
    org.jf.baksmali.Adaptors.MethodDefinition$LabelCache getLabelCache() -> a
    int getPackedSwitchBaseAddress(int) -> a
    int getSparseSwitchBaseAddress(int) -> b
    void addInstructionMethodItems(java.util.List) -> a
    void addTries(java.util.List) -> b
    void addDebugInfo(java.util.List) -> c
    void setLabelSequentialNumbers() -> b
org.jf.baksmali.Adaptors.MethodDefinition$InvalidSwitchPayload -> org.jf.a.a.i:
    void <init>(int) -> <init>
org.jf.baksmali.Adaptors.MethodDefinition$LabelCache -> org.jf.a.a.j:
    java.util.HashMap labels -> a
    void <init>() -> <init>
    org.jf.baksmali.Adaptors.LabelMethodItem internLabel(org.jf.baksmali.Adaptors.LabelMethodItem) -> a
    java.util.Collection getLabels() -> a
org.jf.baksmali.Adaptors.MethodItem -> org.jf.a.a.k:
    int codeAddress -> b
    void <init>(int) -> <init>
    int getCodeAddress() -> d
    double getSortOrder() -> a
    int compareTo(org.jf.baksmali.Adaptors.MethodItem) -> a
    boolean writeTo(org.jf.util.IndentingWriter) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.baksmali.Adaptors.RegisterFormatter -> org.jf.a.a.l:
    org.jf.baksmali.BaksmaliOptions options -> a
    int registerCount -> b
    int parameterRegisterCount -> c
    boolean $assertionsDisabled -> d
    void <init>(org.jf.baksmali.BaksmaliOptions,int,int) -> <init>
    void writeRegisterRange(org.jf.util.IndentingWriter,int,int) -> a
    void writeTo(org.jf.util.IndentingWriter,int) -> a
    void <clinit>() -> <clinit>
org.jf.baksmali.BaksmaliOptions -> org.jf.a.a:
    int apiLevel -> a
    boolean parameterRegisters -> b
    boolean localsDirective -> c
    boolean sequentialLabels -> d
    boolean debugInfo -> e
    boolean codeOffsets -> f
    boolean accessorComments -> g
    boolean allowOdex -> h
    boolean deodex -> i
    boolean implicitReferences -> j
    boolean normalizeVirtualMethods -> k
    int registerInfo -> l
    java.util.Map resourceIds -> m
    org.jf.dexlib2.analysis.InlineMethodResolver inlineResolver -> n
    org.jf.baksmali.Adaptors.Format.InstructionMethodItemFactory classPath$98bf72a -> o
    org.jf.dexlib2.util.SyntheticAccessorResolver syntheticAccessorResolver -> p
    void <init>() -> <init>
org.jf.dexlib2.AccessFlags -> org.jf.dexlib2.a:
    org.jf.dexlib2.AccessFlags PUBLIC -> a
    org.jf.dexlib2.AccessFlags PRIVATE -> b
    org.jf.dexlib2.AccessFlags PROTECTED -> c
    org.jf.dexlib2.AccessFlags STATIC -> d
    org.jf.dexlib2.AccessFlags FINAL -> e
    org.jf.dexlib2.AccessFlags SYNCHRONIZED -> i
    org.jf.dexlib2.AccessFlags VOLATILE -> j
    org.jf.dexlib2.AccessFlags BRIDGE -> k
    org.jf.dexlib2.AccessFlags TRANSIENT -> l
    org.jf.dexlib2.AccessFlags VARARGS -> m
    org.jf.dexlib2.AccessFlags NATIVE -> n
    org.jf.dexlib2.AccessFlags INTERFACE -> f
    org.jf.dexlib2.AccessFlags ABSTRACT -> o
    org.jf.dexlib2.AccessFlags STRICTFP -> p
    org.jf.dexlib2.AccessFlags SYNTHETIC -> g
    org.jf.dexlib2.AccessFlags ANNOTATION -> q
    org.jf.dexlib2.AccessFlags ENUM -> r
    org.jf.dexlib2.AccessFlags CONSTRUCTOR -> h
    org.jf.dexlib2.AccessFlags DECLARED_SYNCHRONIZED -> s
    int value -> t
    java.lang.String accessFlagName -> u
    boolean validForClass -> v
    boolean validForMethod -> w
    boolean validForField -> x
    org.jf.dexlib2.AccessFlags[] allFlags -> y
    java.util.HashMap accessFlagsByName -> z
    org.jf.dexlib2.AccessFlags[] $VALUES -> A
    void <init>(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean) -> <init>
    boolean isSet(int) -> a
    org.jf.dexlib2.AccessFlags[] getAccessFlagsForClass(int) -> b
    org.jf.dexlib2.AccessFlags[] getAccessFlagsForMethod(int) -> c
    org.jf.dexlib2.AccessFlags[] getAccessFlagsForField(int) -> d
    int getValue() -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.jf.dexlib2.AnnotationVisibility -> org.jf.dexlib2.b:
    java.lang.String[] NAMES -> a
    java.lang.String getVisibility(int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.DexFileFactory -> org.jf.dexlib2.DexFileFactory:
    org.jf.dexlib2.dexbacked.DexBackedDexFile loadDexFile(java.lang.String,org.jf.dexlib2.Opcodes) -> loadDexFile
    org.jf.dexlib2.dexbacked.DexBackedDexFile loadDexFile(java.io.File,org.jf.dexlib2.Opcodes) -> loadDexFile
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry loadDexEntry(java.io.File,java.lang.String,boolean,org.jf.dexlib2.Opcodes) -> loadDexEntry
    org.jf.dexlib2.iface.MultiDexContainer loadDexContainer(java.io.File,org.jf.dexlib2.Opcodes) -> loadDexContainer
    void writeDexFile(java.lang.String,org.jf.dexlib2.iface.DexFile) -> writeDexFile
    void <init>() -> <init>
    boolean fullEntryMatch(java.lang.String,java.lang.String) -> fullEntryMatch
    boolean partialEntryMatch(java.lang.String,java.lang.String) -> partialEntryMatch
    boolean access$000(java.lang.String,java.lang.String) -> access$000
    boolean access$100(java.lang.String,java.lang.String) -> access$100
org.jf.dexlib2.DexFileFactory$DexEntryFinder -> org.jf.dexlib2.c:
    java.lang.String filename -> a
    org.jf.dexlib2.iface.MultiDexContainer dexContainer -> b
    boolean $assertionsDisabled -> c
    void <init>(java.lang.String,org.jf.dexlib2.iface.MultiDexContainer) -> <init>
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry findEntry(java.lang.String,boolean) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.DexFileFactory$DexFileNotFoundException -> org.jf.dexlib2.d:
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> <init>
org.jf.dexlib2.DexFileFactory$FilenameVdexProvider -> org.jf.dexlib2.e:
    java.io.File vdexFile -> a
    byte[] buf -> b
    boolean loadedVdex -> c
    void <init>(java.io.File) -> <init>
    byte[] getVdex() -> a
org.jf.dexlib2.DexFileFactory$MultipleMatchingDexEntriesException -> org.jf.dexlib2.f:
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
org.jf.dexlib2.DexFileFactory$SingletonMultiDexContainer -> org.jf.dexlib2.g:
    java.lang.String entryName -> a
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    void <init>(java.lang.String,org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    java.util.List getDexEntryNames() -> a
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry getEntry(java.lang.String) -> a
    org.jf.dexlib2.dexbacked.DexBackedDexFile access$200(org.jf.dexlib2.DexFileFactory$SingletonMultiDexContainer) -> a
org.jf.dexlib2.DexFileFactory$SingletonMultiDexContainer$1 -> org.jf.dexlib2.h:
    org.jf.dexlib2.DexFileFactory$SingletonMultiDexContainer this$0 -> a
    void <init>(org.jf.dexlib2.DexFileFactory$SingletonMultiDexContainer,java.lang.String) -> <init>
    org.jf.dexlib2.iface.DexFile getDexFile() -> a
org.jf.dexlib2.DexFileFactory$UnsupportedFileTypeException -> org.jf.dexlib2.i:
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
org.jf.dexlib2.DexFileFactory$UnsupportedOatVersionException -> org.jf.dexlib2.j:
    void <init>(org.jf.dexlib2.dexbacked.OatFile) -> <init>
org.jf.dexlib2.Format -> org.jf.dexlib2.k:
    org.jf.dexlib2.Format Format10t -> a
    org.jf.dexlib2.Format Format10x -> b
    org.jf.dexlib2.Format Format11n -> c
    org.jf.dexlib2.Format Format11x -> d
    org.jf.dexlib2.Format Format12x -> e
    org.jf.dexlib2.Format Format20bc -> f
    org.jf.dexlib2.Format Format20t -> g
    org.jf.dexlib2.Format Format21c -> h
    org.jf.dexlib2.Format Format21ih -> i
    org.jf.dexlib2.Format Format21lh -> j
    org.jf.dexlib2.Format Format21s -> k
    org.jf.dexlib2.Format Format21t -> l
    org.jf.dexlib2.Format Format22b -> m
    org.jf.dexlib2.Format Format22c -> n
    org.jf.dexlib2.Format Format22cs -> o
    org.jf.dexlib2.Format Format22s -> p
    org.jf.dexlib2.Format Format22t -> q
    org.jf.dexlib2.Format Format22x -> r
    org.jf.dexlib2.Format Format23x -> s
    org.jf.dexlib2.Format Format30t -> t
    org.jf.dexlib2.Format Format31c -> u
    org.jf.dexlib2.Format Format31i -> v
    org.jf.dexlib2.Format Format31t -> w
    org.jf.dexlib2.Format Format32x -> x
    org.jf.dexlib2.Format Format35c -> y
    org.jf.dexlib2.Format Format35mi -> z
    org.jf.dexlib2.Format Format35ms -> A
    org.jf.dexlib2.Format Format3rc -> B
    org.jf.dexlib2.Format Format3rmi -> C
    org.jf.dexlib2.Format Format3rms -> D
    org.jf.dexlib2.Format Format45cc -> E
    org.jf.dexlib2.Format Format4rcc -> F
    org.jf.dexlib2.Format Format51l -> G
    org.jf.dexlib2.Format ArrayPayload -> H
    org.jf.dexlib2.Format PackedSwitchPayload -> I
    org.jf.dexlib2.Format SparseSwitchPayload -> J
    org.jf.dexlib2.Format UnresolvedOdexInstruction -> K
    int size -> L
    boolean isPayloadFormat -> M
    org.jf.dexlib2.Format[] $VALUES -> N
    org.jf.dexlib2.Format[] values() -> a
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,int,int,boolean) -> <init>
    void <clinit>() -> <clinit>
org.jf.dexlib2.HiddenApiRestriction -> org.jf.dexlib2.l:
    org.jf.dexlib2.HiddenApiRestriction WHITELIST -> a
    org.jf.dexlib2.HiddenApiRestriction GREYLIST -> b
    org.jf.dexlib2.HiddenApiRestriction BLACKLIST -> c
    org.jf.dexlib2.HiddenApiRestriction GREYLIST_MAX_O -> d
    org.jf.dexlib2.HiddenApiRestriction GREYLIST_MAX_P -> e
    org.jf.dexlib2.HiddenApiRestriction GREYLIST_MAX_Q -> f
    org.jf.dexlib2.HiddenApiRestriction CORE_PLATFORM_API -> g
    org.jf.dexlib2.HiddenApiRestriction[] hiddenApiFlags -> h
    org.jf.dexlib2.HiddenApiRestriction[] domainSpecificApiFlags -> i
    java.util.Map hiddenApiRestrictionsByName -> j
    int value -> k
    java.lang.String name -> l
    boolean isDomainSpecificApiFlag -> m
    org.jf.dexlib2.HiddenApiRestriction[] $VALUES -> n
    void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    java.lang.String toString() -> toString
    int getValue() -> a
    java.util.Set getAllFlags(int) -> a
    int combineFlags(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.MethodHandleType -> org.jf.dexlib2.m:
    com.google.common.collect.BiMap methodHandleTypeNames -> a
    java.lang.String toString(int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.MethodHandleType$InvalidMethodHandleTypeException -> org.jf.dexlib2.n:
    void <init>(int) -> <init>
org.jf.dexlib2.Opcode -> org.jf.dexlib2.Opcode:
    org.jf.dexlib2.Opcode NOP -> NOP
    org.jf.dexlib2.Opcode MOVE -> MOVE
    org.jf.dexlib2.Opcode MOVE_FROM16 -> MOVE_FROM16
    org.jf.dexlib2.Opcode MOVE_16 -> MOVE_16
    org.jf.dexlib2.Opcode MOVE_WIDE -> MOVE_WIDE
    org.jf.dexlib2.Opcode MOVE_WIDE_FROM16 -> MOVE_WIDE_FROM16
    org.jf.dexlib2.Opcode MOVE_WIDE_16 -> MOVE_WIDE_16
    org.jf.dexlib2.Opcode MOVE_OBJECT -> MOVE_OBJECT
    org.jf.dexlib2.Opcode MOVE_OBJECT_FROM16 -> MOVE_OBJECT_FROM16
    org.jf.dexlib2.Opcode MOVE_OBJECT_16 -> MOVE_OBJECT_16
    org.jf.dexlib2.Opcode MOVE_RESULT -> MOVE_RESULT
    org.jf.dexlib2.Opcode MOVE_RESULT_WIDE -> MOVE_RESULT_WIDE
    org.jf.dexlib2.Opcode MOVE_RESULT_OBJECT -> MOVE_RESULT_OBJECT
    org.jf.dexlib2.Opcode MOVE_EXCEPTION -> MOVE_EXCEPTION
    org.jf.dexlib2.Opcode RETURN_VOID -> RETURN_VOID
    org.jf.dexlib2.Opcode RETURN -> RETURN
    org.jf.dexlib2.Opcode RETURN_WIDE -> RETURN_WIDE
    org.jf.dexlib2.Opcode RETURN_OBJECT -> RETURN_OBJECT
    org.jf.dexlib2.Opcode CONST_4 -> CONST_4
    org.jf.dexlib2.Opcode CONST_16 -> CONST_16
    org.jf.dexlib2.Opcode CONST -> CONST
    org.jf.dexlib2.Opcode CONST_HIGH16 -> CONST_HIGH16
    org.jf.dexlib2.Opcode CONST_WIDE_16 -> CONST_WIDE_16
    org.jf.dexlib2.Opcode CONST_WIDE_32 -> CONST_WIDE_32
    org.jf.dexlib2.Opcode CONST_WIDE -> CONST_WIDE
    org.jf.dexlib2.Opcode CONST_WIDE_HIGH16 -> CONST_WIDE_HIGH16
    org.jf.dexlib2.Opcode CONST_STRING -> CONST_STRING
    org.jf.dexlib2.Opcode CONST_STRING_JUMBO -> CONST_STRING_JUMBO
    org.jf.dexlib2.Opcode CONST_CLASS -> CONST_CLASS
    org.jf.dexlib2.Opcode MONITOR_ENTER -> MONITOR_ENTER
    org.jf.dexlib2.Opcode MONITOR_EXIT -> MONITOR_EXIT
    org.jf.dexlib2.Opcode CHECK_CAST -> CHECK_CAST
    org.jf.dexlib2.Opcode INSTANCE_OF -> INSTANCE_OF
    org.jf.dexlib2.Opcode ARRAY_LENGTH -> ARRAY_LENGTH
    org.jf.dexlib2.Opcode NEW_INSTANCE -> NEW_INSTANCE
    org.jf.dexlib2.Opcode NEW_ARRAY -> NEW_ARRAY
    org.jf.dexlib2.Opcode FILLED_NEW_ARRAY -> FILLED_NEW_ARRAY
    org.jf.dexlib2.Opcode FILLED_NEW_ARRAY_RANGE -> FILLED_NEW_ARRAY_RANGE
    org.jf.dexlib2.Opcode FILL_ARRAY_DATA -> FILL_ARRAY_DATA
    org.jf.dexlib2.Opcode THROW -> THROW
    org.jf.dexlib2.Opcode GOTO -> GOTO
    org.jf.dexlib2.Opcode GOTO_16 -> GOTO_16
    org.jf.dexlib2.Opcode GOTO_32 -> GOTO_32
    org.jf.dexlib2.Opcode PACKED_SWITCH -> PACKED_SWITCH
    org.jf.dexlib2.Opcode SPARSE_SWITCH -> SPARSE_SWITCH
    org.jf.dexlib2.Opcode CMPL_FLOAT -> CMPL_FLOAT
    org.jf.dexlib2.Opcode CMPG_FLOAT -> CMPG_FLOAT
    org.jf.dexlib2.Opcode CMPL_DOUBLE -> CMPL_DOUBLE
    org.jf.dexlib2.Opcode CMPG_DOUBLE -> CMPG_DOUBLE
    org.jf.dexlib2.Opcode CMP_LONG -> CMP_LONG
    org.jf.dexlib2.Opcode IF_EQ -> IF_EQ
    org.jf.dexlib2.Opcode IF_NE -> IF_NE
    org.jf.dexlib2.Opcode IF_LT -> IF_LT
    org.jf.dexlib2.Opcode IF_GE -> IF_GE
    org.jf.dexlib2.Opcode IF_GT -> IF_GT
    org.jf.dexlib2.Opcode IF_LE -> IF_LE
    org.jf.dexlib2.Opcode IF_EQZ -> IF_EQZ
    org.jf.dexlib2.Opcode IF_NEZ -> IF_NEZ
    org.jf.dexlib2.Opcode IF_LTZ -> IF_LTZ
    org.jf.dexlib2.Opcode IF_GEZ -> IF_GEZ
    org.jf.dexlib2.Opcode IF_GTZ -> IF_GTZ
    org.jf.dexlib2.Opcode IF_LEZ -> IF_LEZ
    org.jf.dexlib2.Opcode AGET -> AGET
    org.jf.dexlib2.Opcode AGET_WIDE -> AGET_WIDE
    org.jf.dexlib2.Opcode AGET_OBJECT -> AGET_OBJECT
    org.jf.dexlib2.Opcode AGET_BOOLEAN -> AGET_BOOLEAN
    org.jf.dexlib2.Opcode AGET_BYTE -> AGET_BYTE
    org.jf.dexlib2.Opcode AGET_CHAR -> AGET_CHAR
    org.jf.dexlib2.Opcode AGET_SHORT -> AGET_SHORT
    org.jf.dexlib2.Opcode APUT -> APUT
    org.jf.dexlib2.Opcode APUT_WIDE -> APUT_WIDE
    org.jf.dexlib2.Opcode APUT_OBJECT -> APUT_OBJECT
    org.jf.dexlib2.Opcode APUT_BOOLEAN -> APUT_BOOLEAN
    org.jf.dexlib2.Opcode APUT_BYTE -> APUT_BYTE
    org.jf.dexlib2.Opcode APUT_CHAR -> APUT_CHAR
    org.jf.dexlib2.Opcode APUT_SHORT -> APUT_SHORT
    org.jf.dexlib2.Opcode IGET -> IGET
    org.jf.dexlib2.Opcode IGET_WIDE -> IGET_WIDE
    org.jf.dexlib2.Opcode IGET_OBJECT -> IGET_OBJECT
    org.jf.dexlib2.Opcode IGET_BOOLEAN -> IGET_BOOLEAN
    org.jf.dexlib2.Opcode IGET_BYTE -> IGET_BYTE
    org.jf.dexlib2.Opcode IGET_CHAR -> IGET_CHAR
    org.jf.dexlib2.Opcode IGET_SHORT -> IGET_SHORT
    org.jf.dexlib2.Opcode IPUT -> IPUT
    org.jf.dexlib2.Opcode IPUT_WIDE -> IPUT_WIDE
    org.jf.dexlib2.Opcode IPUT_OBJECT -> IPUT_OBJECT
    org.jf.dexlib2.Opcode IPUT_BOOLEAN -> IPUT_BOOLEAN
    org.jf.dexlib2.Opcode IPUT_BYTE -> IPUT_BYTE
    org.jf.dexlib2.Opcode IPUT_CHAR -> IPUT_CHAR
    org.jf.dexlib2.Opcode IPUT_SHORT -> IPUT_SHORT
    org.jf.dexlib2.Opcode SGET -> SGET
    org.jf.dexlib2.Opcode SGET_WIDE -> SGET_WIDE
    org.jf.dexlib2.Opcode SGET_OBJECT -> SGET_OBJECT
    org.jf.dexlib2.Opcode SGET_BOOLEAN -> SGET_BOOLEAN
    org.jf.dexlib2.Opcode SGET_BYTE -> SGET_BYTE
    org.jf.dexlib2.Opcode SGET_CHAR -> SGET_CHAR
    org.jf.dexlib2.Opcode SGET_SHORT -> SGET_SHORT
    org.jf.dexlib2.Opcode SPUT -> SPUT
    org.jf.dexlib2.Opcode SPUT_WIDE -> SPUT_WIDE
    org.jf.dexlib2.Opcode SPUT_OBJECT -> SPUT_OBJECT
    org.jf.dexlib2.Opcode SPUT_BOOLEAN -> SPUT_BOOLEAN
    org.jf.dexlib2.Opcode SPUT_BYTE -> SPUT_BYTE
    org.jf.dexlib2.Opcode SPUT_CHAR -> SPUT_CHAR
    org.jf.dexlib2.Opcode SPUT_SHORT -> SPUT_SHORT
    org.jf.dexlib2.Opcode INVOKE_VIRTUAL -> INVOKE_VIRTUAL
    org.jf.dexlib2.Opcode INVOKE_SUPER -> INVOKE_SUPER
    org.jf.dexlib2.Opcode INVOKE_DIRECT -> INVOKE_DIRECT
    org.jf.dexlib2.Opcode INVOKE_STATIC -> INVOKE_STATIC
    org.jf.dexlib2.Opcode INVOKE_INTERFACE -> INVOKE_INTERFACE
    org.jf.dexlib2.Opcode INVOKE_VIRTUAL_RANGE -> INVOKE_VIRTUAL_RANGE
    org.jf.dexlib2.Opcode INVOKE_SUPER_RANGE -> INVOKE_SUPER_RANGE
    org.jf.dexlib2.Opcode INVOKE_DIRECT_RANGE -> INVOKE_DIRECT_RANGE
    org.jf.dexlib2.Opcode INVOKE_STATIC_RANGE -> INVOKE_STATIC_RANGE
    org.jf.dexlib2.Opcode INVOKE_INTERFACE_RANGE -> INVOKE_INTERFACE_RANGE
    org.jf.dexlib2.Opcode NEG_INT -> NEG_INT
    org.jf.dexlib2.Opcode NOT_INT -> NOT_INT
    org.jf.dexlib2.Opcode NEG_LONG -> NEG_LONG
    org.jf.dexlib2.Opcode NOT_LONG -> NOT_LONG
    org.jf.dexlib2.Opcode NEG_FLOAT -> NEG_FLOAT
    org.jf.dexlib2.Opcode NEG_DOUBLE -> NEG_DOUBLE
    org.jf.dexlib2.Opcode INT_TO_LONG -> INT_TO_LONG
    org.jf.dexlib2.Opcode INT_TO_FLOAT -> INT_TO_FLOAT
    org.jf.dexlib2.Opcode INT_TO_DOUBLE -> INT_TO_DOUBLE
    org.jf.dexlib2.Opcode LONG_TO_INT -> LONG_TO_INT
    org.jf.dexlib2.Opcode LONG_TO_FLOAT -> LONG_TO_FLOAT
    org.jf.dexlib2.Opcode LONG_TO_DOUBLE -> LONG_TO_DOUBLE
    org.jf.dexlib2.Opcode FLOAT_TO_INT -> FLOAT_TO_INT
    org.jf.dexlib2.Opcode FLOAT_TO_LONG -> FLOAT_TO_LONG
    org.jf.dexlib2.Opcode FLOAT_TO_DOUBLE -> FLOAT_TO_DOUBLE
    org.jf.dexlib2.Opcode DOUBLE_TO_INT -> DOUBLE_TO_INT
    org.jf.dexlib2.Opcode DOUBLE_TO_LONG -> DOUBLE_TO_LONG
    org.jf.dexlib2.Opcode DOUBLE_TO_FLOAT -> DOUBLE_TO_FLOAT
    org.jf.dexlib2.Opcode INT_TO_BYTE -> INT_TO_BYTE
    org.jf.dexlib2.Opcode INT_TO_CHAR -> INT_TO_CHAR
    org.jf.dexlib2.Opcode INT_TO_SHORT -> INT_TO_SHORT
    org.jf.dexlib2.Opcode ADD_INT -> ADD_INT
    org.jf.dexlib2.Opcode SUB_INT -> SUB_INT
    org.jf.dexlib2.Opcode MUL_INT -> MUL_INT
    org.jf.dexlib2.Opcode DIV_INT -> DIV_INT
    org.jf.dexlib2.Opcode REM_INT -> REM_INT
    org.jf.dexlib2.Opcode AND_INT -> AND_INT
    org.jf.dexlib2.Opcode OR_INT -> OR_INT
    org.jf.dexlib2.Opcode XOR_INT -> XOR_INT
    org.jf.dexlib2.Opcode SHL_INT -> SHL_INT
    org.jf.dexlib2.Opcode SHR_INT -> SHR_INT
    org.jf.dexlib2.Opcode USHR_INT -> USHR_INT
    org.jf.dexlib2.Opcode ADD_LONG -> ADD_LONG
    org.jf.dexlib2.Opcode SUB_LONG -> SUB_LONG
    org.jf.dexlib2.Opcode MUL_LONG -> MUL_LONG
    org.jf.dexlib2.Opcode DIV_LONG -> DIV_LONG
    org.jf.dexlib2.Opcode REM_LONG -> REM_LONG
    org.jf.dexlib2.Opcode AND_LONG -> AND_LONG
    org.jf.dexlib2.Opcode OR_LONG -> OR_LONG
    org.jf.dexlib2.Opcode XOR_LONG -> XOR_LONG
    org.jf.dexlib2.Opcode SHL_LONG -> SHL_LONG
    org.jf.dexlib2.Opcode SHR_LONG -> SHR_LONG
    org.jf.dexlib2.Opcode USHR_LONG -> USHR_LONG
    org.jf.dexlib2.Opcode ADD_FLOAT -> ADD_FLOAT
    org.jf.dexlib2.Opcode SUB_FLOAT -> SUB_FLOAT
    org.jf.dexlib2.Opcode MUL_FLOAT -> MUL_FLOAT
    org.jf.dexlib2.Opcode DIV_FLOAT -> DIV_FLOAT
    org.jf.dexlib2.Opcode REM_FLOAT -> REM_FLOAT
    org.jf.dexlib2.Opcode ADD_DOUBLE -> ADD_DOUBLE
    org.jf.dexlib2.Opcode SUB_DOUBLE -> SUB_DOUBLE
    org.jf.dexlib2.Opcode MUL_DOUBLE -> MUL_DOUBLE
    org.jf.dexlib2.Opcode DIV_DOUBLE -> DIV_DOUBLE
    org.jf.dexlib2.Opcode REM_DOUBLE -> REM_DOUBLE
    org.jf.dexlib2.Opcode ADD_INT_2ADDR -> ADD_INT_2ADDR
    org.jf.dexlib2.Opcode SUB_INT_2ADDR -> SUB_INT_2ADDR
    org.jf.dexlib2.Opcode MUL_INT_2ADDR -> MUL_INT_2ADDR
    org.jf.dexlib2.Opcode DIV_INT_2ADDR -> DIV_INT_2ADDR
    org.jf.dexlib2.Opcode REM_INT_2ADDR -> REM_INT_2ADDR
    org.jf.dexlib2.Opcode AND_INT_2ADDR -> AND_INT_2ADDR
    org.jf.dexlib2.Opcode OR_INT_2ADDR -> OR_INT_2ADDR
    org.jf.dexlib2.Opcode XOR_INT_2ADDR -> XOR_INT_2ADDR
    org.jf.dexlib2.Opcode SHL_INT_2ADDR -> SHL_INT_2ADDR
    org.jf.dexlib2.Opcode SHR_INT_2ADDR -> SHR_INT_2ADDR
    org.jf.dexlib2.Opcode USHR_INT_2ADDR -> USHR_INT_2ADDR
    org.jf.dexlib2.Opcode ADD_LONG_2ADDR -> ADD_LONG_2ADDR
    org.jf.dexlib2.Opcode SUB_LONG_2ADDR -> SUB_LONG_2ADDR
    org.jf.dexlib2.Opcode MUL_LONG_2ADDR -> MUL_LONG_2ADDR
    org.jf.dexlib2.Opcode DIV_LONG_2ADDR -> DIV_LONG_2ADDR
    org.jf.dexlib2.Opcode REM_LONG_2ADDR -> REM_LONG_2ADDR
    org.jf.dexlib2.Opcode AND_LONG_2ADDR -> AND_LONG_2ADDR
    org.jf.dexlib2.Opcode OR_LONG_2ADDR -> OR_LONG_2ADDR
    org.jf.dexlib2.Opcode XOR_LONG_2ADDR -> XOR_LONG_2ADDR
    org.jf.dexlib2.Opcode SHL_LONG_2ADDR -> SHL_LONG_2ADDR
    org.jf.dexlib2.Opcode SHR_LONG_2ADDR -> SHR_LONG_2ADDR
    org.jf.dexlib2.Opcode USHR_LONG_2ADDR -> USHR_LONG_2ADDR
    org.jf.dexlib2.Opcode ADD_FLOAT_2ADDR -> ADD_FLOAT_2ADDR
    org.jf.dexlib2.Opcode SUB_FLOAT_2ADDR -> SUB_FLOAT_2ADDR
    org.jf.dexlib2.Opcode MUL_FLOAT_2ADDR -> MUL_FLOAT_2ADDR
    org.jf.dexlib2.Opcode DIV_FLOAT_2ADDR -> DIV_FLOAT_2ADDR
    org.jf.dexlib2.Opcode REM_FLOAT_2ADDR -> REM_FLOAT_2ADDR
    org.jf.dexlib2.Opcode ADD_DOUBLE_2ADDR -> ADD_DOUBLE_2ADDR
    org.jf.dexlib2.Opcode SUB_DOUBLE_2ADDR -> SUB_DOUBLE_2ADDR
    org.jf.dexlib2.Opcode MUL_DOUBLE_2ADDR -> MUL_DOUBLE_2ADDR
    org.jf.dexlib2.Opcode DIV_DOUBLE_2ADDR -> DIV_DOUBLE_2ADDR
    org.jf.dexlib2.Opcode REM_DOUBLE_2ADDR -> REM_DOUBLE_2ADDR
    org.jf.dexlib2.Opcode ADD_INT_LIT16 -> ADD_INT_LIT16
    org.jf.dexlib2.Opcode RSUB_INT -> RSUB_INT
    org.jf.dexlib2.Opcode MUL_INT_LIT16 -> MUL_INT_LIT16
    org.jf.dexlib2.Opcode DIV_INT_LIT16 -> DIV_INT_LIT16
    org.jf.dexlib2.Opcode REM_INT_LIT16 -> REM_INT_LIT16
    org.jf.dexlib2.Opcode AND_INT_LIT16 -> AND_INT_LIT16
    org.jf.dexlib2.Opcode OR_INT_LIT16 -> OR_INT_LIT16
    org.jf.dexlib2.Opcode XOR_INT_LIT16 -> XOR_INT_LIT16
    org.jf.dexlib2.Opcode ADD_INT_LIT8 -> ADD_INT_LIT8
    org.jf.dexlib2.Opcode RSUB_INT_LIT8 -> RSUB_INT_LIT8
    org.jf.dexlib2.Opcode MUL_INT_LIT8 -> MUL_INT_LIT8
    org.jf.dexlib2.Opcode DIV_INT_LIT8 -> DIV_INT_LIT8
    org.jf.dexlib2.Opcode REM_INT_LIT8 -> REM_INT_LIT8
    org.jf.dexlib2.Opcode AND_INT_LIT8 -> AND_INT_LIT8
    org.jf.dexlib2.Opcode OR_INT_LIT8 -> OR_INT_LIT8
    org.jf.dexlib2.Opcode XOR_INT_LIT8 -> XOR_INT_LIT8
    org.jf.dexlib2.Opcode SHL_INT_LIT8 -> SHL_INT_LIT8
    org.jf.dexlib2.Opcode SHR_INT_LIT8 -> SHR_INT_LIT8
    org.jf.dexlib2.Opcode USHR_INT_LIT8 -> USHR_INT_LIT8
    org.jf.dexlib2.Opcode IGET_VOLATILE -> IGET_VOLATILE
    org.jf.dexlib2.Opcode IPUT_VOLATILE -> IPUT_VOLATILE
    org.jf.dexlib2.Opcode SGET_VOLATILE -> SGET_VOLATILE
    org.jf.dexlib2.Opcode SPUT_VOLATILE -> SPUT_VOLATILE
    org.jf.dexlib2.Opcode IGET_OBJECT_VOLATILE -> IGET_OBJECT_VOLATILE
    org.jf.dexlib2.Opcode IGET_WIDE_VOLATILE -> IGET_WIDE_VOLATILE
    org.jf.dexlib2.Opcode IPUT_WIDE_VOLATILE -> IPUT_WIDE_VOLATILE
    org.jf.dexlib2.Opcode SGET_WIDE_VOLATILE -> SGET_WIDE_VOLATILE
    org.jf.dexlib2.Opcode SPUT_WIDE_VOLATILE -> SPUT_WIDE_VOLATILE
    org.jf.dexlib2.Opcode THROW_VERIFICATION_ERROR -> THROW_VERIFICATION_ERROR
    org.jf.dexlib2.Opcode EXECUTE_INLINE -> EXECUTE_INLINE
    org.jf.dexlib2.Opcode EXECUTE_INLINE_RANGE -> EXECUTE_INLINE_RANGE
    org.jf.dexlib2.Opcode INVOKE_DIRECT_EMPTY -> INVOKE_DIRECT_EMPTY
    org.jf.dexlib2.Opcode INVOKE_OBJECT_INIT_RANGE -> INVOKE_OBJECT_INIT_RANGE
    org.jf.dexlib2.Opcode RETURN_VOID_BARRIER -> RETURN_VOID_BARRIER
    org.jf.dexlib2.Opcode RETURN_VOID_NO_BARRIER -> RETURN_VOID_NO_BARRIER
    org.jf.dexlib2.Opcode IGET_QUICK -> IGET_QUICK
    org.jf.dexlib2.Opcode IGET_WIDE_QUICK -> IGET_WIDE_QUICK
    org.jf.dexlib2.Opcode IGET_OBJECT_QUICK -> IGET_OBJECT_QUICK
    org.jf.dexlib2.Opcode IPUT_QUICK -> IPUT_QUICK
    org.jf.dexlib2.Opcode IPUT_WIDE_QUICK -> IPUT_WIDE_QUICK
    org.jf.dexlib2.Opcode IPUT_OBJECT_QUICK -> IPUT_OBJECT_QUICK
    org.jf.dexlib2.Opcode IPUT_BOOLEAN_QUICK -> IPUT_BOOLEAN_QUICK
    org.jf.dexlib2.Opcode IPUT_BYTE_QUICK -> IPUT_BYTE_QUICK
    org.jf.dexlib2.Opcode IPUT_CHAR_QUICK -> IPUT_CHAR_QUICK
    org.jf.dexlib2.Opcode IPUT_SHORT_QUICK -> IPUT_SHORT_QUICK
    org.jf.dexlib2.Opcode IGET_BOOLEAN_QUICK -> IGET_BOOLEAN_QUICK
    org.jf.dexlib2.Opcode IGET_BYTE_QUICK -> IGET_BYTE_QUICK
    org.jf.dexlib2.Opcode IGET_CHAR_QUICK -> IGET_CHAR_QUICK
    org.jf.dexlib2.Opcode IGET_SHORT_QUICK -> IGET_SHORT_QUICK
    org.jf.dexlib2.Opcode INVOKE_VIRTUAL_QUICK -> INVOKE_VIRTUAL_QUICK
    org.jf.dexlib2.Opcode INVOKE_VIRTUAL_QUICK_RANGE -> INVOKE_VIRTUAL_QUICK_RANGE
    org.jf.dexlib2.Opcode INVOKE_SUPER_QUICK -> INVOKE_SUPER_QUICK
    org.jf.dexlib2.Opcode INVOKE_SUPER_QUICK_RANGE -> INVOKE_SUPER_QUICK_RANGE
    org.jf.dexlib2.Opcode IPUT_OBJECT_VOLATILE -> IPUT_OBJECT_VOLATILE
    org.jf.dexlib2.Opcode SGET_OBJECT_VOLATILE -> SGET_OBJECT_VOLATILE
    org.jf.dexlib2.Opcode SPUT_OBJECT_VOLATILE -> SPUT_OBJECT_VOLATILE
    org.jf.dexlib2.Opcode PACKED_SWITCH_PAYLOAD -> PACKED_SWITCH_PAYLOAD
    org.jf.dexlib2.Opcode SPARSE_SWITCH_PAYLOAD -> SPARSE_SWITCH_PAYLOAD
    org.jf.dexlib2.Opcode ARRAY_PAYLOAD -> ARRAY_PAYLOAD
    org.jf.dexlib2.Opcode INVOKE_POLYMORPHIC -> INVOKE_POLYMORPHIC
    org.jf.dexlib2.Opcode INVOKE_POLYMORPHIC_RANGE -> INVOKE_POLYMORPHIC_RANGE
    org.jf.dexlib2.Opcode INVOKE_CUSTOM -> INVOKE_CUSTOM
    org.jf.dexlib2.Opcode INVOKE_CUSTOM_RANGE -> INVOKE_CUSTOM_RANGE
    org.jf.dexlib2.Opcode CONST_METHOD_HANDLE -> CONST_METHOD_HANDLE
    org.jf.dexlib2.Opcode CONST_METHOD_TYPE -> CONST_METHOD_TYPE
    int CAN_THROW -> CAN_THROW
    int ODEX_ONLY -> ODEX_ONLY
    int CAN_CONTINUE -> CAN_CONTINUE
    int SETS_RESULT -> SETS_RESULT
    int SETS_REGISTER -> SETS_REGISTER
    int SETS_WIDE_REGISTER -> SETS_WIDE_REGISTER
    int QUICK_FIELD_ACCESSOR -> QUICK_FIELD_ACCESSOR
    int VOLATILE_FIELD_ACCESSOR -> VOLATILE_FIELD_ACCESSOR
    int STATIC_FIELD_ACCESSOR -> STATIC_FIELD_ACCESSOR
    int JUMBO_OPCODE -> JUMBO_OPCODE
    int CAN_INITIALIZE_REFERENCE -> CAN_INITIALIZE_REFERENCE
    int ALL_APIS -> ALL_APIS
    com.google.common.collect.RangeMap apiToValueMap -> apiToValueMap
    com.google.common.collect.RangeMap artVersionToValueMap -> artVersionToValueMap
    java.lang.String name -> name
    int referenceType -> referenceType
    org.jf.dexlib2.Format format -> format
    int flags -> flags
    int referenceType2 -> referenceType2
    org.jf.dexlib2.Opcode[] $VALUES -> $VALUES
    org.jf.dexlib2.Opcode[] values() -> values
    org.jf.dexlib2.Opcode valueOf(java.lang.String) -> valueOf
    int minApi(int) -> minApi
    int maxApi(int) -> maxApi
    void <init>(java.lang.String,int,int,java.lang.String,int,org.jf.dexlib2.Format) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String,int,org.jf.dexlib2.Format,int) -> <init>
    void <init>(java.lang.String,int,java.util.List,java.lang.String,int,org.jf.dexlib2.Format,int) -> <init>
    void <init>(java.lang.String,int,java.util.List,java.lang.String,int,int,org.jf.dexlib2.Format,int) -> <init>
    java.util.List firstApi(int,int) -> firstApi
    java.util.List lastApi(int,int) -> lastApi
    java.util.List betweenApi(int,int,int) -> betweenApi
    java.util.List firstArtVersion(int,int) -> firstArtVersion
    java.util.List lastArtVersion(int,int) -> lastArtVersion
    java.util.List allVersions(int) -> allVersions
    java.util.List allApis(int) -> allApis
    java.util.List allArtVersions(int) -> allArtVersions
    java.util.List combine(java.util.List[]) -> combine
    boolean canThrow() -> canThrow
    boolean odexOnly() -> odexOnly
    boolean canContinue() -> canContinue
    boolean setsResult() -> setsResult
    boolean setsRegister() -> setsRegister
    boolean setsWideRegister() -> setsWideRegister
    boolean isQuickFieldaccessor() -> isQuickFieldaccessor
    boolean isVolatileFieldAccessor() -> isVolatileFieldAccessor
    boolean isStaticFieldAccessor() -> isStaticFieldAccessor
    boolean isJumboOpcode() -> isJumboOpcode
    boolean canInitializeReference() -> canInitializeReference
    void <clinit>() -> <clinit>
org.jf.dexlib2.Opcode$VersionConstraint -> org.jf.dexlib2.o:
    com.google.common.collect.Range apiRange -> a
    com.google.common.collect.Range artVersionRange -> b
    int opcodeValue -> c
    void <init>(com.google.common.collect.Range,com.google.common.collect.Range,int) -> <init>
org.jf.dexlib2.Opcodes -> org.jf.dexlib2.Opcodes:
    int api -> api
    int artVersion -> artVersion
    org.jf.dexlib2.Opcode[] opcodesByValue -> opcodesByValue
    java.util.EnumMap opcodeValues -> opcodeValues
    java.util.HashMap opcodesByName -> opcodesByName
    org.jf.dexlib2.Opcodes forApi(int) -> forApi
    org.jf.dexlib2.Opcodes forArtVersion(int) -> forArtVersion
    org.jf.dexlib2.Opcodes forDexVersion(int) -> forDexVersion
    org.jf.dexlib2.Opcodes getDefault() -> getDefault
    void <init>(int,int) -> <init>
    org.jf.dexlib2.Opcode getOpcodeByName(java.lang.String) -> getOpcodeByName
    org.jf.dexlib2.Opcode getOpcodeByValue(int) -> getOpcodeByValue
    java.lang.Short getOpcodeValue(org.jf.dexlib2.Opcode) -> getOpcodeValue
    boolean isArt() -> isArt
org.jf.dexlib2.ReferenceType -> org.jf.dexlib2.p:
    int key -> a
    org.jf.dexlib2.builder.Label target -> b
    int getReferenceType(org.jf.dexlib2.iface.reference.Reference) -> a
    void validateReferenceType(int) -> a
    void <init>(int,org.jf.dexlib2.builder.Label) -> <init>
org.jf.dexlib2.ReferenceType$InvalidReferenceTypeException -> org.jf.dexlib2.q:
    int referenceType -> a
    void <init>(int) -> <init>
    int getReferenceType() -> a
org.jf.dexlib2.VerificationError -> org.jf.dexlib2.r:
    java.util.HashMap verificationErrorNames -> a
    java.lang.String getVerificationErrorName(int) -> a
    boolean isValidVerificationError(int) -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.analysis.InlineMethodResolver -> org.jf.dexlib2.a.a:
    org.jf.dexlib2.analysis.InlineMethodResolver createInlineMethodResolver(int) -> a
    void <init>() -> <init>
    org.jf.dexlib2.iface.Method access$000(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void writeTo(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.value.AnnotationEncodedValue,java.lang.String) -> a
    void writeElementsTo(org.jf.util.IndentingWriter,java.util.Collection,java.lang.String) -> a
    void writeTo(org.jf.util.IndentingWriter,org.jf.dexlib2.iface.value.EncodedValue,java.lang.String) -> a
    org.jf.dexlib2.iface.reference.Reference makeReference(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,int) -> a
    org.jf.dexlib2.iface.value.EncodedValue readFrom(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> a
    void skipFrom(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.analysis.InlineMethodResolver$InlineMethodResolver_version35 -> org.jf.dexlib2.a.b:
    org.jf.dexlib2.iface.Method[] inlineMethods -> a
    void <init>() -> <init>
org.jf.dexlib2.analysis.InlineMethodResolver$InlineMethodResolver_version36 -> org.jf.dexlib2.a.c:
    org.jf.dexlib2.iface.Method[] inlineMethods -> a
    org.jf.dexlib2.iface.Method indexOfIMethod -> b
    org.jf.dexlib2.iface.Method indexOfIIMethod -> c
    org.jf.dexlib2.iface.Method fastIndexOfMethod -> d
    org.jf.dexlib2.iface.Method isEmptyMethod -> e
    void <init>() -> <init>
org.jf.dexlib2.analysis.UnresolvedOdexInstruction -> org.jf.dexlib2.a.d:
    org.jf.dexlib2.iface.instruction.Instruction originalInstruction -> b
    int objectRegisterNum -> a
    org.jf.dexlib2.Opcode getOpcode() -> h_
    int getCodeUnits() -> b
org.jf.dexlib2.analysis.util.TypeProtoUtils -> org.jf.dexlib2.a.a.a:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int offset -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getType() -> a
    int getItemCount() -> b
    int getOffset() -> c
org.jf.dexlib2.base.BaseAnnotation -> org.jf.dexlib2.b.a:
    java.util.Comparator BY_TYPE -> a
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.Annotation) -> a
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.jf.dexlib2.base.BaseAnnotation$1 -> org.jf.dexlib2.b.b:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.base.BaseAnnotationElement -> org.jf.dexlib2.b.c:
    java.util.Comparator BY_NAME -> a
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.AnnotationElement) -> a
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.jf.dexlib2.base.BaseAnnotationElement$1 -> org.jf.dexlib2.b.d:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.base.BaseExceptionHandler -> org.jf.dexlib2.b.e:
    void <init>() -> <init>
    org.jf.dexlib2.iface.reference.TypeReference getExceptionTypeReference() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.ExceptionHandler) -> a
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
org.jf.dexlib2.base.BaseExceptionHandler$1 -> org.jf.dexlib2.b.f:
    java.lang.String val$exceptionType -> a
    void <init>(org.jf.dexlib2.base.BaseExceptionHandler,java.lang.String) -> <init>
    java.lang.String getType() -> a
org.jf.dexlib2.base.BaseExceptionHandler$2 -> org.jf.dexlib2.b.g:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.base.BaseMethodParameter -> org.jf.dexlib2.b.h:
    void <init>() -> <init>
    java.lang.String getSignature() -> b
org.jf.dexlib2.base.BaseTryBlock -> org.jf.dexlib2.b.i:
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
org.jf.dexlib2.base.reference.BaseCallSiteReference -> org.jf.dexlib2.b.a.a:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.jf.dexlib2.base.reference.BaseFieldReference -> org.jf.dexlib2.b.a.b:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.FieldReference) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.reference.BaseMethodHandleReference -> org.jf.dexlib2.b.a.c:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.reference.BaseMethodProtoReference -> org.jf.dexlib2.b.a.d:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodProtoReference) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.reference.BaseMethodReference -> org.jf.dexlib2.b.a.e:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodReference) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.reference.BaseReference -> org.jf.dexlib2.b.a.f:
    void <init>() -> <init>
    void validateReference() -> a_
org.jf.dexlib2.base.reference.BaseStringReference -> org.jf.dexlib2.b.a.g:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.CharSequence) -> a
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.reference.BaseTypeReference -> org.jf.dexlib2.b.a.h:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.CharSequence) -> a
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseAnnotationEncodedValue -> org.jf.dexlib2.b.b.a:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseArrayEncodedValue -> org.jf.dexlib2.b.b.b:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseBooleanEncodedValue -> org.jf.dexlib2.b.b.c:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseByteEncodedValue -> org.jf.dexlib2.b.b.d:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseCharEncodedValue -> org.jf.dexlib2.b.b.e:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseDoubleEncodedValue -> org.jf.dexlib2.b.b.f:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseEnumEncodedValue -> org.jf.dexlib2.b.b.g:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseFieldEncodedValue -> org.jf.dexlib2.b.b.h:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseFloatEncodedValue -> org.jf.dexlib2.b.b.i:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseIntEncodedValue -> org.jf.dexlib2.b.b.j:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseLongEncodedValue -> org.jf.dexlib2.b.b.k:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseMethodEncodedValue -> org.jf.dexlib2.b.b.l:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseMethodHandleEncodedValue -> org.jf.dexlib2.b.b.m:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseMethodTypeEncodedValue -> org.jf.dexlib2.b.b.n:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseNullEncodedValue -> org.jf.dexlib2.b.b.o:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseShortEncodedValue -> org.jf.dexlib2.b.b.p:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseStringEncodedValue -> org.jf.dexlib2.b.b.q:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.base.value.BaseTypeEncodedValue -> org.jf.dexlib2.b.b.r:
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int getValueType() -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.builder.BuilderDebugItem -> org.jf.dexlib2.c.a:
    void <init>() -> <init>
    int getCodeAddress() -> c
org.jf.dexlib2.builder.BuilderExceptionHandler -> org.jf.dexlib2.c.b:
    org.jf.dexlib2.builder.Label handler -> a
    void <init>(org.jf.dexlib2.builder.Label) -> <init>
    org.jf.dexlib2.builder.BuilderExceptionHandler newExceptionHandler(org.jf.dexlib2.iface.reference.TypeReference,org.jf.dexlib2.builder.Label) -> a
    void <init>(org.jf.dexlib2.builder.Label,byte) -> <init>
org.jf.dexlib2.builder.BuilderExceptionHandler$1 -> org.jf.dexlib2.c.c:
    org.jf.dexlib2.iface.reference.TypeReference val$exceptionType -> b
    void <init>(org.jf.dexlib2.builder.Label,org.jf.dexlib2.iface.reference.TypeReference) -> <init>
    java.lang.String getExceptionType() -> b
    int getHandlerCodeAddress() -> c
    org.jf.dexlib2.iface.reference.TypeReference getExceptionTypeReference() -> a
org.jf.dexlib2.builder.BuilderExceptionHandler$2 -> org.jf.dexlib2.c.d:
    void <init>(org.jf.dexlib2.builder.Label) -> <init>
    java.lang.String getExceptionType() -> b
    int getHandlerCodeAddress() -> c
org.jf.dexlib2.builder.BuilderInstruction -> org.jf.dexlib2.c.e:
    org.jf.dexlib2.Opcode opcode -> a
    org.jf.dexlib2.builder.MethodLocation location -> b
    void <init>(org.jf.dexlib2.Opcode) -> <init>
    org.jf.dexlib2.Opcode getOpcode() -> h_
    org.jf.dexlib2.Format getFormat() -> c_
    int getCodeUnits() -> b
    org.jf.dexlib2.builder.MethodLocation getLocation() -> d
org.jf.dexlib2.builder.BuilderOffsetInstruction -> org.jf.dexlib2.c.f:
    org.jf.dexlib2.builder.Label target -> c
    void <init>(org.jf.dexlib2.Opcode,org.jf.dexlib2.builder.Label) -> <init>
    int getCodeOffset() -> e
    int internalGetCodeOffset() -> f
    org.jf.dexlib2.builder.Label getTarget() -> g
org.jf.dexlib2.builder.BuilderSwitchPayload -> org.jf.dexlib2.c.g:
    org.jf.dexlib2.builder.MethodLocation referrer -> c
    void <init>(org.jf.dexlib2.Opcode) -> <init>
    org.jf.dexlib2.builder.MethodLocation getReferrer() -> e
org.jf.dexlib2.builder.BuilderTryBlock -> org.jf.dexlib2.c.h:
    org.jf.dexlib2.builder.BuilderExceptionHandler exceptionHandler -> a
    org.jf.dexlib2.builder.Label start -> b
    org.jf.dexlib2.builder.Label end -> c
    void <init>(org.jf.dexlib2.builder.Label,org.jf.dexlib2.builder.Label,org.jf.dexlib2.iface.reference.TypeReference,org.jf.dexlib2.builder.Label) -> <init>
    int getStartCodeAddress() -> a
    int getCodeUnitCount() -> b
    java.util.List getExceptionHandlers() -> c
org.jf.dexlib2.builder.ItemWithLocation -> org.jf.dexlib2.c.i:
    org.jf.dexlib2.builder.MethodLocation location -> a
    void <init>() -> <init>
org.jf.dexlib2.builder.Label -> org.jf.dexlib2.c.j:
    void <init>() -> <init>
    int getCodeAddress() -> a
    org.jf.dexlib2.builder.MethodLocation getLocation() -> b
org.jf.dexlib2.builder.LocatedDebugItems -> org.jf.dexlib2.c.k:
    void <init>() -> <init>
    java.lang.String getAddLocatedItemError() -> a
org.jf.dexlib2.builder.LocatedItems -> org.jf.dexlib2.c.l:
    java.util.List items -> a
    void <init>() -> <init>
    java.util.List getItems() -> b
    java.util.Set getModifiableItems(org.jf.dexlib2.builder.MethodLocation) -> a
    java.lang.String getAddLocatedItemError() -> a
    void mergeItemsIntoNext(org.jf.dexlib2.builder.MethodLocation,org.jf.dexlib2.builder.LocatedItems) -> a
    java.util.List access$000(org.jf.dexlib2.builder.LocatedItems) -> a
    void access$100(org.jf.dexlib2.builder.LocatedItems,org.jf.dexlib2.builder.ItemWithLocation) -> a
org.jf.dexlib2.builder.LocatedItems$1 -> org.jf.dexlib2.c.m:
    org.jf.dexlib2.builder.MethodLocation val$newItemsLocation -> a
    org.jf.dexlib2.builder.LocatedItems this$0 -> b
    void <init>(org.jf.dexlib2.builder.LocatedItems,org.jf.dexlib2.builder.MethodLocation) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean add(java.lang.Object) -> add
org.jf.dexlib2.builder.LocatedItems$1$1 -> org.jf.dexlib2.c.n:
    org.jf.dexlib2.builder.ItemWithLocation currentItem -> a
    java.util.Iterator val$it -> b
    void <init>(org.jf.dexlib2.builder.LocatedItems$1,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.builder.LocatedLabels -> org.jf.dexlib2.c.o:
    void <init>() -> <init>
    java.lang.String getAddLocatedItemError() -> a
org.jf.dexlib2.builder.MethodLocation -> org.jf.dexlib2.c.p:
    org.jf.dexlib2.builder.BuilderInstruction instruction -> a
    int codeAddress -> b
    int index -> c
    org.jf.dexlib2.builder.LocatedItems labels -> d
    org.jf.dexlib2.builder.LocatedItems debugItems -> e
    void <init>(org.jf.dexlib2.builder.BuilderInstruction,int,int) -> <init>
    int getCodeAddress() -> a
    void mergeInto(org.jf.dexlib2.builder.MethodLocation) -> a
    java.util.Set getLabels() -> b
    org.jf.dexlib2.builder.Label addNewLabel() -> c
    java.util.Set getDebugItems() -> d
org.jf.dexlib2.builder.MutableMethodImplementation -> org.jf.dexlib2.c.q:
    int registerCount -> b
    java.util.ArrayList instructionList -> a
    java.util.ArrayList tryBlocks -> c
    boolean fixInstructions -> d
    boolean $assertionsDisabled -> e
    void <init>(org.jf.dexlib2.iface.MethodImplementation) -> <init>
    int getRegisterCount() -> a
    java.util.List getInstructions() -> b
    java.util.List getTryBlocks() -> c
    java.lang.Iterable getDebugItems() -> d
    void addInstruction(int,org.jf.dexlib2.builder.BuilderInstruction) -> b
    void replaceInstruction(int,org.jf.dexlib2.builder.BuilderInstruction) -> a
    void removeInstruction(int) -> a
    org.jf.dexlib2.builder.BuilderInstruction getFirstNonNop(int) -> b
    void fixInstructions() -> f
    int mapCodeAddressToIndex(int[],int) -> a
    org.jf.dexlib2.builder.Label newLabel(int[],int) -> b
    org.jf.dexlib2.builder.Label newSwitchPayloadReferenceLabel(org.jf.dexlib2.builder.MethodLocation,int[],int) -> a
    void setInstruction(org.jf.dexlib2.builder.MethodLocation,org.jf.dexlib2.builder.BuilderInstruction) -> a
    void convertAndSetInstruction(org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.Instruction) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction10t newBuilderInstruction10t(int,int[],org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction10x newBuilderInstruction10x(org.jf.dexlib2.iface.instruction.formats.Instruction10x) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction11n newBuilderInstruction11n(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction11x newBuilderInstruction11x$5228d4ea(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction12x newBuilderInstruction12x(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction20bc newBuilderInstruction20bc(org.jf.dexlib2.iface.instruction.formats.Instruction20bc) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction20t newBuilderInstruction20t$4fa9c5d(int,int[],org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction21c newBuilderInstruction21c(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction21ih newBuilderInstruction21ih$1b7dc280(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> c
    org.jf.dexlib2.builder.instruction.BuilderInstruction21lh newBuilderInstruction21lh$40cf2a7a(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> d
    org.jf.dexlib2.builder.instruction.BuilderInstruction21s newBuilderInstruction21s$2e4ff6a(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> e
    org.jf.dexlib2.builder.instruction.BuilderInstruction21t newBuilderInstruction21t(int,int[],org.jf.dexlib2.iface.instruction.formats.Instruction21t) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction22b newBuilderInstruction22b$2f89c956(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction22c newBuilderInstruction22c(org.jf.dexlib2.iface.instruction.formats.Instruction22c) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction22cs newBuilderInstruction22cs$c3552dc(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> c
    org.jf.dexlib2.builder.instruction.BuilderInstruction22s newBuilderInstruction22s$6ea68c0a(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> d
    org.jf.dexlib2.builder.instruction.BuilderInstruction22t newBuilderInstruction22t(int,int[],org.jf.dexlib2.iface.instruction.formats.Instruction22t) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction22x newBuilderInstruction22x$35a59716(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> e
    org.jf.dexlib2.builder.instruction.BuilderInstruction23x newBuilderInstruction23x$361bf58a(org.jf.dexlib2.iface.instruction.ThreeRegisterInstruction) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction30t newBuilderInstruction30t$7756b03(int,int[],org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> c
    org.jf.dexlib2.builder.instruction.BuilderInstruction31c newBuilderInstruction31c$4950ef36(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction31i newBuilderInstruction31i$57ed4d0a(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> f
    org.jf.dexlib2.builder.instruction.BuilderInstruction31t newBuilderInstruction31t(org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.formats.Instruction31t) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction32x newBuilderInstruction32x$29358fb6(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> f
    org.jf.dexlib2.builder.instruction.BuilderInstruction35c newBuilderInstruction35c(org.jf.dexlib2.iface.instruction.formats.Instruction35c) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction35mi newBuilderInstruction35mi(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction35ms newBuilderInstruction35ms$58c29b2c(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction3rc newBuilderInstruction3rc(org.jf.dexlib2.iface.instruction.formats.Instruction3rc) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction3rmi newBuilderInstruction3rmi(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> a
    org.jf.dexlib2.builder.instruction.BuilderInstruction3rms newBuilderInstruction3rms$75fc41f2(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> b
    org.jf.dexlib2.builder.instruction.BuilderInstruction51l newBuilderInstruction51l$416c79ea(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> g
    org.jf.dexlib2.builder.MethodLocation findSwitchForPayload(org.jf.dexlib2.builder.MethodLocation) -> a
    org.jf.dexlib2.builder.instruction.BuilderPackedSwitchPayload newBuilderPackedSwitchPayload(org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> a
    org.jf.dexlib2.builder.instruction.BuilderSparseSwitchPayload newBuilderSparseSwitchPayload$77cc2694(org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> b
    org.jf.dexlib2.builder.instruction.BuilderArrayPayload newBuilderArrayPayload(org.jf.dexlib2.iface.instruction.formats.ArrayPayload) -> a
    java.lang.Iterable getInstructions() -> e
    void access$000(org.jf.dexlib2.builder.MutableMethodImplementation,org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.Instruction) -> a
    boolean access$100(org.jf.dexlib2.builder.MutableMethodImplementation) -> a
    void access$200(org.jf.dexlib2.builder.MutableMethodImplementation) -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.MutableMethodImplementation$1 -> org.jf.dexlib2.c.r:
    org.jf.dexlib2.builder.MethodLocation val$location -> a
    int[] val$codeAddressToIndex -> b
    org.jf.dexlib2.iface.instruction.Instruction val$instruction -> c
    org.jf.dexlib2.builder.MutableMethodImplementation this$0 -> d
    void <init>(org.jf.dexlib2.builder.MutableMethodImplementation,org.jf.dexlib2.builder.MethodLocation,int[],org.jf.dexlib2.iface.instruction.Instruction) -> <init>
    void perform() -> a
org.jf.dexlib2.builder.MutableMethodImplementation$2 -> org.jf.dexlib2.c.s:
    org.jf.dexlib2.builder.MutableMethodImplementation this$0 -> a
    void <init>(org.jf.dexlib2.builder.MutableMethodImplementation) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.builder.MutableMethodImplementation$3 -> org.jf.dexlib2.c.t:
    boolean $assertionsDisabled -> a
    org.jf.dexlib2.builder.MutableMethodImplementation this$0 -> b
    void <init>(org.jf.dexlib2.builder.MutableMethodImplementation) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.MutableMethodImplementation$4 -> org.jf.dexlib2.c.u:
    int[] $SwitchMap$org$jf$dexlib2$Opcode -> a
    int[] $SwitchMap$org$jf$dexlib2$Format -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.MutableMethodImplementation$SwitchPayloadReferenceLabel -> org.jf.dexlib2.c.v:
    org.jf.dexlib2.builder.MethodLocation switchLocation -> b
    void <init>() -> <init>
    void <init>(byte) -> <init>
org.jf.dexlib2.builder.MutableMethodImplementation$Task -> org.jf.dexlib2.c.w:
    void perform() -> a
org.jf.dexlib2.builder.debug.BuilderEndLocal -> org.jf.dexlib2.c.a.a:
    int register -> b
    void <init>(int) -> <init>
    int getRegister() -> d
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.builder.debug.BuilderEpilogueBegin -> org.jf.dexlib2.c.a.b:
    void <init>() -> <init>
    int getDebugItemType() -> f
org.jf.dexlib2.builder.debug.BuilderLineNumber -> org.jf.dexlib2.c.a.c:
    int lineNumber -> b
    void <init>(int) -> <init>
    int getLineNumber() -> a
    int getDebugItemType() -> f
org.jf.dexlib2.builder.debug.BuilderPrologueEnd -> org.jf.dexlib2.c.a.d:
    void <init>() -> <init>
    int getDebugItemType() -> f
org.jf.dexlib2.builder.debug.BuilderRestartLocal -> org.jf.dexlib2.c.a.e:
    int register -> b
    void <init>(int) -> <init>
    int getRegister() -> d
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.builder.debug.BuilderSetSourceFile -> org.jf.dexlib2.c.a.f:
    org.jf.dexlib2.iface.reference.StringReference sourceFile -> b
    void <init>(org.jf.dexlib2.iface.reference.StringReference) -> <init>
    int getDebugItemType() -> f
    java.lang.String getSourceFile() -> a
    org.jf.dexlib2.iface.reference.StringReference getSourceFileReference() -> b
org.jf.dexlib2.builder.debug.BuilderStartLocal -> org.jf.dexlib2.c.a.g:
    int register -> b
    org.jf.dexlib2.iface.reference.StringReference name -> c
    org.jf.dexlib2.iface.reference.TypeReference type -> d
    org.jf.dexlib2.iface.reference.StringReference signature -> e
    void <init>(int,org.jf.dexlib2.iface.reference.StringReference,org.jf.dexlib2.iface.reference.TypeReference,org.jf.dexlib2.iface.reference.StringReference) -> <init>
    int getRegister() -> d
    org.jf.dexlib2.iface.reference.StringReference getNameReference() -> g
    org.jf.dexlib2.iface.reference.TypeReference getTypeReference() -> h
    org.jf.dexlib2.iface.reference.StringReference getSignatureReference() -> i
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.builder.instruction.BuilderArrayPayload -> org.jf.dexlib2.c.b.a:
    org.jf.dexlib2.Opcode OPCODE -> c
    int elementWidth -> d
    java.util.List arrayElements -> e
    void <init>(int,java.util.List) -> <init>
    int getElementWidth() -> e
    java.util.List getArrayElements() -> f
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction10t -> org.jf.dexlib2.c.b.b:
    org.jf.dexlib2.Format FORMAT -> c
    void <init>(org.jf.dexlib2.Opcode,org.jf.dexlib2.builder.Label) -> <init>
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction10x -> org.jf.dexlib2.c.b.c:
    org.jf.dexlib2.Format FORMAT -> c
    void <init>(org.jf.dexlib2.Opcode) -> <init>
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction11n -> org.jf.dexlib2.c.b.d:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction11x -> org.jf.dexlib2.c.b.e:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    void <init>(org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction12x -> org.jf.dexlib2.c.b.f:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction20bc -> org.jf.dexlib2.c.b.g:
    org.jf.dexlib2.Format FORMAT -> c
    int verificationError -> d
    org.jf.dexlib2.iface.reference.Reference reference -> e
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getVerificationError() -> e
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction20t -> org.jf.dexlib2.c.b.h:
    org.jf.dexlib2.Format FORMAT -> c
    void <init>(org.jf.dexlib2.Opcode,org.jf.dexlib2.builder.Label) -> <init>
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction21c -> org.jf.dexlib2.c.b.i:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    org.jf.dexlib2.iface.reference.Reference reference -> e
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction21ih -> org.jf.dexlib2.c.b.j:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    short getHatLiteral() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction21lh -> org.jf.dexlib2.c.b.k:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    long literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,long) -> <init>
    int getRegisterA() -> b_
    long getWideLiteral() -> g
    short getHatLiteral() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction21s -> org.jf.dexlib2.c.b.l:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction21t -> org.jf.dexlib2.c.b.m:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.builder.Label) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22b -> org.jf.dexlib2.c.b.n:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    int literal -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22c -> org.jf.dexlib2.c.b.o:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    org.jf.dexlib2.iface.reference.Reference reference -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22cs -> org.jf.dexlib2.c.b.p:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    int fieldOffset -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getFieldOffset() -> i
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22s -> org.jf.dexlib2.c.b.q:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    int literal -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22t -> org.jf.dexlib2.c.b.r:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.builder.Label) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction22x -> org.jf.dexlib2.c.b.s:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction23x -> org.jf.dexlib2.c.b.t:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    int registerC -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getRegisterC() -> f
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction30t -> org.jf.dexlib2.c.b.u:
    org.jf.dexlib2.Format FORMAT -> c
    void <init>(org.jf.dexlib2.Opcode,org.jf.dexlib2.builder.Label) -> <init>
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction31c -> org.jf.dexlib2.c.b.v:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    org.jf.dexlib2.iface.reference.Reference reference -> e
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction31i -> org.jf.dexlib2.c.b.w:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction31t -> org.jf.dexlib2.c.b.x:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.builder.Label) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction32x -> org.jf.dexlib2.c.b.y:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    int registerB -> e
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction35c -> org.jf.dexlib2.c.b.z:
    org.jf.dexlib2.Format FORMAT -> c
    int registerCount -> d
    int registerC -> e
    int registerD -> f
    int registerE -> g
    int registerF -> h
    int registerG -> i
    org.jf.dexlib2.iface.reference.Reference reference -> j
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction35mi -> org.jf.dexlib2.c.b.A:
    org.jf.dexlib2.Format FORMAT -> c
    int registerCount -> d
    int registerC -> e
    int registerD -> f
    int registerE -> g
    int registerF -> h
    int registerG -> i
    int inlineIndex -> j
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getInlineIndex() -> f
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction35ms -> org.jf.dexlib2.c.b.B:
    org.jf.dexlib2.Format FORMAT -> c
    int registerCount -> d
    int registerC -> e
    int registerD -> f
    int registerE -> g
    int registerF -> h
    int registerG -> i
    int vtableIndex -> j
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getVtableIndex() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction3rc -> org.jf.dexlib2.c.b.C:
    org.jf.dexlib2.Format FORMAT -> c
    int startRegister -> d
    int registerCount -> e
    org.jf.dexlib2.iface.reference.Reference reference -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    int getStartRegister() -> h
    int getRegisterCount() -> e
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction3rmi -> org.jf.dexlib2.c.b.D:
    org.jf.dexlib2.Format FORMAT -> c
    int startRegister -> d
    int registerCount -> e
    int inlineIndex -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getStartRegister() -> h
    int getRegisterCount() -> e
    int getInlineIndex() -> f
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction3rms -> org.jf.dexlib2.c.b.E:
    org.jf.dexlib2.Format FORMAT -> c
    int startRegister -> d
    int registerCount -> e
    int vtableIndex -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    int getStartRegister() -> h
    int getRegisterCount() -> e
    int getVtableIndex() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderInstruction51l -> org.jf.dexlib2.c.b.F:
    org.jf.dexlib2.Format FORMAT -> c
    int registerA -> d
    long literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,long) -> <init>
    int getRegisterA() -> b_
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderPackedSwitchPayload -> org.jf.dexlib2.c.b.G:
    org.jf.dexlib2.Opcode OPCODE -> d
    java.util.List switchElements -> e
    void <init>(int,java.util.List) -> <init>
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderSparseSwitchPayload -> org.jf.dexlib2.c.b.H:
    org.jf.dexlib2.Opcode OPCODE -> d
    java.util.List switchElements -> e
    void <init>(java.util.List) -> <init>
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> c_
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderSparseSwitchPayload$1 -> org.jf.dexlib2.c.b.I:
    boolean $assertionsDisabled -> a
    org.jf.dexlib2.builder.instruction.BuilderSparseSwitchPayload this$0 -> b
    void <init>(org.jf.dexlib2.builder.instruction.BuilderSparseSwitchPayload) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.builder.instruction.BuilderSwitchElement -> org.jf.dexlib2.c.b.J:
    org.jf.dexlib2.builder.BuilderSwitchPayload parent -> a
    int key -> b
    org.jf.dexlib2.builder.Label target -> c
    void <init>(org.jf.dexlib2.builder.BuilderSwitchPayload,int,org.jf.dexlib2.builder.Label) -> <init>
    int getKey() -> a
    int getOffset() -> b
org.jf.dexlib2.dexbacked.CDexBackedDexFile -> org.jf.dexlib2.dexbacked.a:
    void <init>(org.jf.dexlib2.Opcodes,byte[],int) -> <init>
    boolean isCdex(byte[],int) -> a
    int getVersion(byte[],int,boolean) -> getVersion
    org.jf.dexlib2.Opcodes getDefaultOpcodes(int) -> getDefaultOpcodes
    int getBaseDataOffset() -> getBaseDataOffset
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation createMethodImplementation(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexBackedMethod,int) -> createMethodImplementation
org.jf.dexlib2.dexbacked.CDexBackedMethodImplementation -> org.jf.dexlib2.dexbacked.b:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexBackedMethod,int) -> <init>
    int getRegisterCount() -> a
    int getInstructionsSize() -> b
    int getInstructionsStartOffset() -> f
    int getPreheaderFlags() -> i
    int getTriesSize() -> g
    int getDebugOffset() -> h
org.jf.dexlib2.dexbacked.DexBackedAnnotation -> org.jf.dexlib2.dexbacked.c:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    int visibility -> c
    int typeIndex -> d
    int elementsOffset -> e
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getVisibility() -> a
    java.lang.String getType() -> b
    java.util.Set getElements() -> c
org.jf.dexlib2.dexbacked.DexBackedAnnotation$1 -> org.jf.dexlib2.dexbacked.d:
    org.jf.dexlib2.dexbacked.DexBackedAnnotation this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedAnnotation,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedAnnotationElement -> org.jf.dexlib2.dexbacked.e:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    int nameIndex -> c
    org.jf.dexlib2.iface.value.EncodedValue value -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> <init>
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.value.EncodedValue getValue() -> b
org.jf.dexlib2.dexbacked.DexBackedCatchAllExceptionHandler -> org.jf.dexlib2.dexbacked.f:
    int handlerCodeAddress -> a
    void <init>(org.jf.dexlib2.dexbacked.DexReader) -> <init>
    java.lang.String getExceptionType() -> b
    int getHandlerCodeAddress() -> c
org.jf.dexlib2.dexbacked.DexBackedClassDef -> org.jf.dexlib2.dexbacked.g:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int classDefOffset -> b
    org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader hiddenApiRestrictionsReader -> c
    int staticFieldsOffset -> d
    int instanceFieldsOffset -> e
    int directMethodsOffset -> f
    int virtualMethodsOffset -> g
    int staticFieldCount -> h
    int instanceFieldCount -> i
    int directMethodCount -> j
    int virtualMethodCount -> k
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory annotationsDirectory -> l
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,int) -> <init>
    java.lang.String getType() -> a
    java.lang.String getSuperclass() -> b
    int getAccessFlags() -> d
    java.lang.String getSourceFile() -> e
    java.util.List getInterfaces() -> f
    java.util.Set getAnnotations() -> g
    java.lang.Iterable getStaticFields() -> h
    java.lang.Iterable getStaticFields(boolean) -> a
    java.lang.Iterable getInstanceFields() -> i
    java.lang.Iterable getInstanceFields(boolean) -> b
    java.lang.Iterable getDirectMethods() -> j
    java.lang.Iterable getDirectMethods(boolean) -> c
    java.lang.Iterable getVirtualMethods(boolean) -> d
    java.lang.Iterable getVirtualMethods() -> k
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory getAnnotationsDirectory() -> l
    int getInstanceFieldsOffset() -> m
    int getDirectMethodsOffset() -> n
    int access$100(org.jf.dexlib2.dexbacked.DexBackedClassDef) -> a
    int access$202(org.jf.dexlib2.dexbacked.DexBackedClassDef,int) -> a
    int access$400(org.jf.dexlib2.dexbacked.DexBackedClassDef) -> b
    int access$502(org.jf.dexlib2.dexbacked.DexBackedClassDef,int) -> b
    int access$700(org.jf.dexlib2.dexbacked.DexBackedClassDef) -> c
    int access$802(org.jf.dexlib2.dexbacked.DexBackedClassDef,int) -> c
    int access$1000(org.jf.dexlib2.dexbacked.DexBackedClassDef) -> d
org.jf.dexlib2.dexbacked.DexBackedClassDef$1 -> org.jf.dexlib2.dexbacked.h:
    int val$interfacesOffset -> a
    int val$size -> b
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,int,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedClassDef$2 -> org.jf.dexlib2.dexbacked.i:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory val$annotationsDirectory -> d
    int val$staticInitialValuesOffset -> e
    int val$fieldsStartOffset -> f
    java.util.Iterator val$hiddenApiRestrictionIterator -> a
    boolean val$skipDuplicates -> b
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory,int,int,java.util.Iterator,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.DexBackedClassDef$2$1 -> org.jf.dexlib2.dexbacked.j:
    int count -> a
    org.jf.dexlib2.iface.reference.FieldReference previousField -> b
    int previousIndex -> c
    org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator val$staticInitialValueIterator -> d
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator val$annotationIterator -> e
    org.jf.dexlib2.dexbacked.DexBackedClassDef$2 this$1 -> f
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$2,org.jf.dexlib2.dexbacked.DexBuffer,int,org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$3 -> org.jf.dexlib2.dexbacked.k:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory val$annotationsDirectory -> d
    int val$fieldsStartOffset -> e
    java.util.Iterator val$hiddenApiRestrictionIterator -> a
    boolean val$skipDuplicates -> b
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory,int,java.util.Iterator,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.DexBackedClassDef$3$1 -> org.jf.dexlib2.dexbacked.l:
    int count -> a
    org.jf.dexlib2.iface.reference.FieldReference previousField -> b
    int previousIndex -> c
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator val$annotationIterator -> d
    org.jf.dexlib2.dexbacked.DexBackedClassDef$3 this$1 -> e
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$3,org.jf.dexlib2.dexbacked.DexBuffer,int,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$4 -> org.jf.dexlib2.dexbacked.m:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory val$annotationsDirectory -> d
    int val$methodsStartOffset -> e
    java.util.Iterator val$hiddenApiRestrictionIterator -> a
    boolean val$skipDuplicates -> b
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory,int,java.util.Iterator,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.DexBackedClassDef$4$1 -> org.jf.dexlib2.dexbacked.n:
    int count -> a
    org.jf.dexlib2.iface.reference.MethodReference previousMethod -> b
    int previousIndex -> c
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator val$methodAnnotationIterator -> d
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator val$parameterAnnotationIterator -> e
    org.jf.dexlib2.dexbacked.DexBackedClassDef$4 this$1 -> f
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$4,org.jf.dexlib2.dexbacked.DexBuffer,int,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$5 -> org.jf.dexlib2.dexbacked.o:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator methodAnnotationIterator -> a
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator parameterAnnotationIterator -> b
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory val$annotationsDirectory -> f
    int val$methodsStartOffset -> g
    java.util.Iterator val$hiddenApiRestrictionIterator -> c
    boolean val$skipDuplicates -> d
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> e
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory,int,java.util.Iterator,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.DexBackedClassDef$5$1 -> org.jf.dexlib2.dexbacked.p:
    int count -> a
    org.jf.dexlib2.iface.reference.MethodReference previousMethod -> b
    int previousIndex -> c
    org.jf.dexlib2.dexbacked.DexBackedClassDef$5 this$1 -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$5,org.jf.dexlib2.dexbacked.DexBuffer,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader -> org.jf.dexlib2.dexbacked.q:
    int startOffset -> b
    int instanceFieldsStartOffset -> c
    int directMethodsStartOffset -> d
    int virtualMethodsStartOffset -> e
    org.jf.dexlib2.dexbacked.DexBackedClassDef this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef,int) -> <init>
    int getInstanceFieldsStartOffset() -> a
    int getDirectMethodsStartOffset() -> b
    int getVirtualMethodsStartOffset() -> c
    org.jf.dexlib2.dexbacked.util.VariableSizeListIterator access$000(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader) -> a
    java.util.Iterator access$300(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader) -> b
    java.util.Iterator access$600(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader) -> c
    java.util.Iterator access$900(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader) -> d
    int access$1102(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,int) -> a
    int access$1202(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,int) -> b
    int access$1302(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,int) -> c
org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader$1 -> org.jf.dexlib2.dexbacked.r:
    org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader this$1 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object next() -> next
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader$2 -> org.jf.dexlib2.dexbacked.s:
    org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader this$1 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object next() -> next
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader$3 -> org.jf.dexlib2.dexbacked.t:
    org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader this$1 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object next() -> next
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader$4 -> org.jf.dexlib2.dexbacked.u:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedClassDef$HiddenApiRestrictionsReader,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedDexFile -> org.jf.dexlib2.dexbacked.DexBackedDexFile:
    org.jf.dexlib2.dexbacked.DexBuffer dexBuffer -> dexBuffer
    org.jf.dexlib2.dexbacked.DexBuffer dataBuffer -> dataBuffer
    org.jf.dexlib2.Opcodes opcodes -> opcodes
    int stringCount -> stringCount
    int stringStartOffset -> stringStartOffset
    int typeCount -> typeCount
    int typeStartOffset -> typeStartOffset
    int protoCount -> protoCount
    int protoStartOffset -> protoStartOffset
    int fieldCount -> fieldCount
    int fieldStartOffset -> fieldStartOffset
    int methodCount -> methodCount
    int methodStartOffset -> methodStartOffset
    int classCount -> classCount
    int classStartOffset -> classStartOffset
    int mapOffset -> mapOffset
    int hiddenApiRestrictionsOffset -> hiddenApiRestrictionsOffset
    org.jf.dexlib2.dexbacked.DexBackedDexFile$OptionalIndexedSection stringSection -> stringSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$OptionalIndexedSection typeSection -> typeSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection fieldSection -> fieldSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection methodSection -> methodSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection protoSection -> protoSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection classSection -> classSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection callSiteSection -> callSiteSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection methodHandleSection -> methodHandleSection
    void <init>(org.jf.dexlib2.Opcodes,byte[],int,boolean) -> <init>
    void <init>(org.jf.dexlib2.Opcodes,org.jf.dexlib2.dexbacked.DexBuffer,org.jf.dexlib2.dexbacked.DexBuffer,int,boolean) -> <init>
    int getBaseDataOffset() -> getBaseDataOffset
    int getVersion(byte[],int,boolean) -> getVersion
    org.jf.dexlib2.Opcodes getDefaultOpcodes(int) -> getDefaultOpcodes
    org.jf.dexlib2.dexbacked.DexBuffer getBuffer() -> getBuffer
    org.jf.dexlib2.dexbacked.DexBuffer getDataBuffer() -> getDataBuffer
    void <init>(org.jf.dexlib2.Opcodes,org.jf.dexlib2.dexbacked.DexBuffer) -> <init>
    void <init>(org.jf.dexlib2.Opcodes,byte[],int) -> <init>
    void <init>(org.jf.dexlib2.Opcodes,byte[]) -> <init>
    org.jf.dexlib2.dexbacked.DexBackedDexFile fromInputStream(org.jf.dexlib2.Opcodes,java.io.InputStream) -> fromInputStream
    org.jf.dexlib2.Opcodes getOpcodes() -> getOpcodes
    boolean supportsOptimizedOpcodes() -> supportsOptimizedOpcodes
    java.util.Set getClasses() -> getClasses
    java.util.List getStringReferences() -> getStringReferences
    java.util.List getTypeReferences() -> getTypeReferences
    java.util.List getReferences(int) -> getReferences
    java.util.List getMapItems() -> getMapItems
    org.jf.dexlib2.analysis.util.TypeProtoUtils getMapItemForSection$3fac516c(int) -> getMapItemForSection$3fac516c
    org.jf.dexlib2.dexbacked.DexBackedDexFile$OptionalIndexedSection getStringSection() -> getStringSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$OptionalIndexedSection getTypeSection() -> getTypeSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getFieldSection() -> getFieldSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getMethodSection() -> getMethodSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getProtoSection() -> getProtoSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getClassSection() -> getClassSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getCallSiteSection() -> getCallSiteSection
    org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection getMethodHandleSection() -> getMethodHandleSection
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation createMethodImplementation(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexBackedMethod,int) -> createMethodImplementation
    int readHiddenApiRestrictionsOffset(int) -> readHiddenApiRestrictionsOffset
    int access$000(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$000
    int access$100(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$100
    org.jf.dexlib2.dexbacked.DexBuffer access$200(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$200
    org.jf.dexlib2.dexbacked.DexBuffer access$300(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$300
    int access$400(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$400
    int access$500(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$500
    int access$600(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$600
    int access$700(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$700
    int access$800(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$800
    int access$900(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$900
    int access$1000(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$1000
    int access$1100(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$1100
    int access$1200(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$1200
    int access$1300(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$1300
    int access$1400(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> access$1400
    int access$1500(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> access$1500
org.jf.dexlib2.dexbacked.DexBackedDexFile$1 -> org.jf.dexlib2.dexbacked.v:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.DexBackedDexFile$10 -> org.jf.dexlib2.dexbacked.w:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$11 -> org.jf.dexlib2.dexbacked.x:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$12 -> org.jf.dexlib2.dexbacked.y:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$2 -> org.jf.dexlib2.dexbacked.z:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$3 -> org.jf.dexlib2.dexbacked.A:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$4 -> org.jf.dexlib2.dexbacked.B:
    int val$mapSize -> a
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.DexBackedDexFile$5 -> org.jf.dexlib2.dexbacked.C:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    java.lang.String get(int) -> c
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object getOptional(int) -> b
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$6 -> org.jf.dexlib2.dexbacked.D:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    java.lang.String get(int) -> c
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object getOptional(int) -> b
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$7 -> org.jf.dexlib2.dexbacked.E:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$8 -> org.jf.dexlib2.dexbacked.F:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$9 -> org.jf.dexlib2.dexbacked.G:
    org.jf.dexlib2.dexbacked.DexBackedDexFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> <init>
    int size() -> size
    int getOffset(int) -> a
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.DexBackedDexFile$IndexedSection -> org.jf.dexlib2.dexbacked.H:
    void <init>() -> <init>
    int getOffset(int) -> a
org.jf.dexlib2.dexbacked.DexBackedDexFile$NotADexFile -> org.jf.dexlib2.dexbacked.I:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.jf.dexlib2.dexbacked.DexBackedDexFile$OptionalIndexedSection -> org.jf.dexlib2.dexbacked.J:
    void <init>() -> <init>
    java.lang.Object getOptional(int) -> b
org.jf.dexlib2.dexbacked.DexBackedExceptionHandler -> org.jf.dexlib2.dexbacked.K:
    void <init>() -> <init>
org.jf.dexlib2.dexbacked.DexBackedField -> org.jf.dexlib2.dexbacked.L:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    org.jf.dexlib2.iface.ClassDef classDef -> c
    int accessFlags -> d
    org.jf.dexlib2.iface.value.EncodedValue initialValue -> e
    int annotationSetOffset -> f
    int fieldIndex -> a
    int hiddenApiRestrictions -> g
    int fieldIdItemOffset -> h
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,org.jf.dexlib2.dexbacked.DexBackedClassDef,int,org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator,int) -> <init>
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,org.jf.dexlib2.dexbacked.DexBackedClassDef,int,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator,int) -> <init>
    java.lang.String getName() -> a
    java.lang.String getType() -> i_
    java.lang.String getDefiningClass() -> d
    int getAccessFlags() -> e
    org.jf.dexlib2.iface.value.EncodedValue getInitialValue() -> f
    java.util.Set getAnnotations() -> g
    java.util.Set getHiddenApiRestrictions() -> h
    void skipFields(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    int getFieldIdItemOffset() -> i
org.jf.dexlib2.dexbacked.DexBackedMethod -> org.jf.dexlib2.dexbacked.M:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    org.jf.dexlib2.dexbacked.DexBackedClassDef classDef -> c
    int accessFlags -> d
    int codeOffset -> e
    int parameterAnnotationSetListOffset -> f
    int methodAnnotationSetOffset -> g
    int hiddenApiRestrictions -> h
    int methodIndex -> b
    int methodIdItemOffset -> i
    int protoIdItemOffset -> j
    int parametersOffset -> k
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,org.jf.dexlib2.dexbacked.DexBackedClassDef,int,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator,org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator,int) -> <init>
    java.lang.String getDefiningClass() -> a
    int getAccessFlags() -> b
    java.lang.String getName() -> d
    java.lang.String getReturnType() -> e
    java.util.List getParameters() -> f
    java.util.List getParameterAnnotations() -> g
    java.util.Iterator getParameterNames() -> h
    java.util.List getParameterTypes() -> i
    java.util.Set getAnnotations() -> j
    java.util.Set getHiddenApiRestrictions() -> k
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation getImplementation() -> m
    int getMethodIdItemOffset() -> n
    int getProtoIdItemOffset() -> o
    int getParametersOffset() -> p
    org.jf.dexlib2.iface.MethodImplementation getImplementation() -> l
org.jf.dexlib2.dexbacked.DexBackedMethod$1 -> org.jf.dexlib2.dexbacked.N:
    java.util.List val$parameterTypes -> a
    org.jf.dexlib2.dexbacked.DexBackedMethod this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedMethod,java.util.List) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.dexbacked.DexBackedMethod$2 -> org.jf.dexlib2.dexbacked.O:
    int val$paramListStart -> a
    int val$parameterCount -> b
    org.jf.dexlib2.dexbacked.DexBackedMethod this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedMethod,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.DexBackedMethodImplementation -> org.jf.dexlib2.dexbacked.P:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    org.jf.dexlib2.dexbacked.DexBackedMethod method -> b
    int codeOffset -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexBackedMethod,int) -> <init>
    int getRegisterCount() -> a
    int getInstructionsSize() -> b
    int getInstructionsStartOffset() -> f
    java.lang.Iterable getInstructions() -> e
    int getTriesSize() -> g
    java.util.List getTryBlocks() -> c
    int getDebugOffset() -> h
    org.jf.dexlib2.dexbacked.util.DebugInfo getDebugInfo() -> i
    java.lang.Iterable getDebugItems() -> d
    java.util.Iterator getParameterNames(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedMethodImplementation$1 -> org.jf.dexlib2.dexbacked.Q:
    int val$instructionsStartOffset -> c
    int val$endOffset -> a
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedMethodImplementation,int,int) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.DexBackedMethodImplementation$1$1 -> org.jf.dexlib2.dexbacked.R:
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation$1 this$1 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedMethodImplementation$1,org.jf.dexlib2.dexbacked.DexBuffer,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.DexBackedMethodImplementation$2 -> org.jf.dexlib2.dexbacked.S:
    int val$triesStartOffset -> a
    int val$handlersStartOffset -> b
    int val$triesSize -> c
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation this$0 -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedMethodImplementation,int,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.DexBackedOdexFile -> org.jf.dexlib2.dexbacked.T:
    byte[] odexBuf -> a
    void <init>(org.jf.dexlib2.Opcodes,byte[],byte[]) -> <init>
    boolean supportsOptimizedOpcodes() -> supportsOptimizedOpcodes
    org.jf.dexlib2.dexbacked.DexBackedOdexFile fromInputStream(org.jf.dexlib2.Opcodes,java.io.InputStream) -> a
    int getOdexVersion() -> a
org.jf.dexlib2.dexbacked.DexBackedOdexFile$NotAnOdexFile -> org.jf.dexlib2.dexbacked.U:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.jf.dexlib2.dexbacked.DexBackedTryBlock -> org.jf.dexlib2.dexbacked.V:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int tryItemOffset -> b
    int handlersStartOffset -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,int) -> <init>
    int getStartCodeAddress() -> a
    int getCodeUnitCount() -> b
    java.util.List getExceptionHandlers() -> c
org.jf.dexlib2.dexbacked.DexBackedTryBlock$1 -> org.jf.dexlib2.dexbacked.W:
    org.jf.dexlib2.dexbacked.DexBackedTryBlock this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedTryBlock,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedTryBlock$2 -> org.jf.dexlib2.dexbacked.X:
    int val$sizeWithCatchAll -> a
    org.jf.dexlib2.dexbacked.DexBackedTryBlock this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedTryBlock,org.jf.dexlib2.dexbacked.DexBuffer,int,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.DexBackedTypedExceptionHandler -> org.jf.dexlib2.dexbacked.Y:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int typeId -> b
    int handlerCodeAddress -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> <init>
    java.lang.String getExceptionType() -> b
    int getHandlerCodeAddress() -> c
org.jf.dexlib2.dexbacked.DexBuffer -> org.jf.dexlib2.dexbacked.Z:
    byte[] buf -> a
    int baseOffset -> b
    void <init>(byte[]) -> <init>
    void <init>(byte[],int) -> <init>
    int readSmallUint(int) -> a
    int readOptionalUint(int) -> b
    int readUshort(int) -> c
    int readUbyte(int) -> d
    long readLong(int) -> e
    int readLongAsSmallUint(int) -> f
    int readInt(int) -> g
    int readShort(int) -> h
    int readByte(int) -> i
    org.jf.dexlib2.dexbacked.DexReader readerAt(int) -> j
    int getBaseOffset() -> b
org.jf.dexlib2.dexbacked.DexReader -> org.jf.dexlib2.dexbacked.aa:
    org.jf.dexlib2.dexbacked.DexBuffer dexBuf -> a
    int offset -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int) -> <init>
    int getOffset() -> a
    void setOffset(int) -> a
    int readSleb128() -> b
    int readSmallUleb128() -> c
    int readUleb128(boolean) -> a
    int readLargeUleb128() -> d
    int readBigUleb128() -> e
    void skipUleb128() -> f
    int peekUshort() -> g
    int peekUbyte() -> h
    int readUbyte() -> i
    int readByte() -> j
    void skipByte() -> k
    void moveRelative(int) -> b
    int readSizedInt(int) -> c
    int readSizedSmallUint(int) -> d
    int readSizedRightExtendedInt(int) -> e
    long readSizedRightExtendedLong(int) -> f
    long readSizedLong(int) -> g
    java.lang.String readString(int) -> h
org.jf.dexlib2.dexbacked.OatFile -> org.jf.dexlib2.dexbacked.ab:
    byte[] ELF_MAGIC -> c
    byte[] OAT_MAGIC -> d
    boolean is64bit -> e
    org.jf.dexlib2.dexbacked.OatFile$OatHeader oatHeader -> f
    org.jf.dexlib2.Opcodes opcodes -> g
    org.jf.dexlib2.dexbacked.OatFile$VdexProvider vdexProvider -> h
    void <init>(byte[],org.jf.dexlib2.dexbacked.OatFile$VdexProvider) -> <init>
    void verifyMagic(byte[]) -> a
    org.jf.dexlib2.dexbacked.OatFile fromInputStream(java.io.InputStream,org.jf.dexlib2.dexbacked.OatFile$VdexProvider) -> a
    int getOatVersion() -> c
    int isSupportedVersion() -> d
    java.util.List getDexFiles() -> e
    java.util.List getDexEntryNames() -> a
    java.util.List getSections() -> g
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry getEntry(java.lang.String) -> a
    org.jf.dexlib2.Opcodes access$100(org.jf.dexlib2.dexbacked.OatFile) -> a
    byte[] access$200() -> f
    boolean access$300(org.jf.dexlib2.dexbacked.OatFile) -> b
    java.util.List access$500(org.jf.dexlib2.dexbacked.OatFile) -> c
    org.jf.dexlib2.dexbacked.OatFile$OatHeader access$1000(org.jf.dexlib2.dexbacked.OatFile) -> d
    org.jf.dexlib2.dexbacked.OatFile$VdexProvider access$1100(org.jf.dexlib2.dexbacked.OatFile) -> e
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.OatFile$1 -> org.jf.dexlib2.dexbacked.ac:
    org.jf.dexlib2.dexbacked.OatFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.OatFile) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.OatFile$1$1 -> org.jf.dexlib2.dexbacked.ad:
    void <init>(org.jf.dexlib2.dexbacked.OatFile$1) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.dexbacked.OatFile$2 -> org.jf.dexlib2.dexbacked.ae:
    org.jf.dexlib2.dexbacked.OatFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.OatFile) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.OatFile$2$1 -> org.jf.dexlib2.dexbacked.af:
    void <init>(org.jf.dexlib2.dexbacked.OatFile$2) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.dexbacked.OatFile$3 -> org.jf.dexlib2.dexbacked.ag:
    int val$entryCount -> a
    int val$offset -> b
    int val$entrySize -> c
    org.jf.dexlib2.dexbacked.OatFile this$0 -> d
    void <init>(org.jf.dexlib2.dexbacked.OatFile,int,int,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.OatFile$DexEntryIterator -> org.jf.dexlib2.dexbacked.ah:
    int index -> a
    int offset -> b
    org.jf.dexlib2.dexbacked.OatFile this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.OatFile) -> <init>
    boolean hasNext() -> hasNext
    org.jf.dexlib2.dexbacked.OatFile$OatDexEntry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(org.jf.dexlib2.dexbacked.OatFile,byte) -> <init>
org.jf.dexlib2.dexbacked.OatFile$InvalidOatFileException -> org.jf.dexlib2.dexbacked.ai:
    void <init>(java.lang.String) -> <init>
org.jf.dexlib2.dexbacked.OatFile$NotAnOatFileException -> org.jf.dexlib2.dexbacked.aj:
    void <init>() -> <init>
org.jf.dexlib2.dexbacked.OatFile$OatCDexFile -> org.jf.dexlib2.dexbacked.ak:
    void <init>(org.jf.dexlib2.dexbacked.OatFile,byte[],int) -> <init>
    boolean supportsOptimizedOpcodes() -> supportsOptimizedOpcodes
org.jf.dexlib2.dexbacked.OatFile$OatDexEntry -> org.jf.dexlib2.dexbacked.al:
    java.lang.String entryName -> a
    byte[] buf -> b
    int dexOffset -> c
    org.jf.dexlib2.dexbacked.OatFile this$0 -> d
    void <init>(org.jf.dexlib2.dexbacked.OatFile,java.lang.String,byte[],int) -> <init>
    org.jf.dexlib2.dexbacked.DexBackedDexFile getDexFile() -> b
    org.jf.dexlib2.iface.DexFile getDexFile() -> a
org.jf.dexlib2.dexbacked.OatFile$OatDexFile -> org.jf.dexlib2.dexbacked.am:
    void <init>(org.jf.dexlib2.dexbacked.OatFile,byte[],int) -> <init>
    boolean supportsOptimizedOpcodes() -> supportsOptimizedOpcodes
org.jf.dexlib2.dexbacked.OatFile$OatHeader -> org.jf.dexlib2.dexbacked.an:
    int headerOffset -> a
    int keyValueStoreOffset -> b
    org.jf.dexlib2.dexbacked.OatFile this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.OatFile,int) -> <init>
    boolean isValid() -> a
    int getVersion() -> b
    int getDexFileCount() -> c
    int getDexListStart() -> d
    int access$1200(org.jf.dexlib2.dexbacked.OatFile$OatHeader) -> a
org.jf.dexlib2.dexbacked.OatFile$SectionHeader -> org.jf.dexlib2.dexbacked.ao:
    int offset -> a
    org.jf.dexlib2.dexbacked.OatFile this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.OatFile,int) -> <init>
    int getType() -> a
    long getAddress() -> b
    int getOffset() -> c
    int getSize() -> d
    int getLink() -> e
    int getEntrySize() -> f
org.jf.dexlib2.dexbacked.OatFile$SectionHeader32Bit -> org.jf.dexlib2.dexbacked.ap:
    org.jf.dexlib2.dexbacked.OatFile this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.OatFile,int) -> <init>
    long getAddress() -> b
    int getOffset() -> c
    int getSize() -> d
    int getLink() -> e
    int getEntrySize() -> f
org.jf.dexlib2.dexbacked.OatFile$SectionHeader64Bit -> org.jf.dexlib2.dexbacked.aq:
    org.jf.dexlib2.dexbacked.OatFile this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.OatFile,int) -> <init>
    long getAddress() -> b
    int getOffset() -> c
    int getSize() -> d
    int getLink() -> e
    int getEntrySize() -> f
org.jf.dexlib2.dexbacked.OatFile$StringTable -> org.jf.dexlib2.dexbacked.ar:
    int offset -> a
    int size -> b
    org.jf.dexlib2.dexbacked.OatFile this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.OatFile,org.jf.dexlib2.dexbacked.OatFile$SectionHeader) -> <init>
    java.lang.String getString(int) -> a
org.jf.dexlib2.dexbacked.OatFile$SymbolTable -> org.jf.dexlib2.dexbacked.as:
    org.jf.dexlib2.dexbacked.OatFile$StringTable stringTable -> b
    int offset -> c
    int entryCount -> d
    int entrySize -> e
    org.jf.dexlib2.dexbacked.OatFile this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.OatFile,org.jf.dexlib2.dexbacked.OatFile$SectionHeader) -> <init>
    int access$600(org.jf.dexlib2.dexbacked.OatFile$SymbolTable) -> a
    int access$700(org.jf.dexlib2.dexbacked.OatFile$SymbolTable) -> b
    int access$800(org.jf.dexlib2.dexbacked.OatFile$SymbolTable) -> c
    org.jf.dexlib2.dexbacked.OatFile$StringTable access$900(org.jf.dexlib2.dexbacked.OatFile$SymbolTable) -> d
org.jf.dexlib2.dexbacked.OatFile$SymbolTable$1 -> org.jf.dexlib2.dexbacked.at:
    org.jf.dexlib2.dexbacked.OatFile$SymbolTable this$1 -> a
    void <init>(org.jf.dexlib2.dexbacked.OatFile$SymbolTable) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
org.jf.dexlib2.dexbacked.OatFile$SymbolTable$Symbol -> org.jf.dexlib2.dexbacked.au:
    int offset -> a
    boolean $assertionsDisabled -> b
    org.jf.dexlib2.dexbacked.OatFile$SymbolTable this$1 -> c
    void <init>(org.jf.dexlib2.dexbacked.OatFile$SymbolTable,int) -> <init>
    java.lang.String getName() -> a
    long getValue() -> b
    int getSectionIndex() -> c
    int getFileOffset() -> d
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.OatFile$SymbolTable$Symbol32 -> org.jf.dexlib2.dexbacked.av:
    org.jf.dexlib2.dexbacked.OatFile$SymbolTable this$1 -> b
    void <init>(org.jf.dexlib2.dexbacked.OatFile$SymbolTable,int) -> <init>
    java.lang.String getName() -> a
    long getValue() -> b
    int getSectionIndex() -> c
org.jf.dexlib2.dexbacked.OatFile$SymbolTable$Symbol64 -> org.jf.dexlib2.dexbacked.aw:
    org.jf.dexlib2.dexbacked.OatFile$SymbolTable this$1 -> b
    void <init>(org.jf.dexlib2.dexbacked.OatFile$SymbolTable,int) -> <init>
    java.lang.String getName() -> a
    long getValue() -> b
    int getSectionIndex() -> c
org.jf.dexlib2.dexbacked.OatFile$VdexProvider -> org.jf.dexlib2.dexbacked.ax:
    byte[] getVdex() -> a
org.jf.dexlib2.dexbacked.ZipDexContainer -> org.jf.dexlib2.dexbacked.ay:
    java.io.File zipFilePath -> a
    org.jf.dexlib2.Opcodes opcodes -> b
    void <init>(java.io.File,org.jf.dexlib2.Opcodes) -> <init>
    java.util.List getDexEntryNames() -> a
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry getEntry(java.lang.String) -> a
    boolean isZipFile() -> b
    boolean isDex(java.util.zip.ZipFile,java.util.zip.ZipEntry) -> a
    java.util.zip.ZipFile getZipFile() -> c
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry loadEntry(java.util.zip.ZipFile,java.util.zip.ZipEntry) -> b
    org.jf.dexlib2.Opcodes access$000(org.jf.dexlib2.dexbacked.ZipDexContainer) -> a
org.jf.dexlib2.dexbacked.ZipDexContainer$1 -> org.jf.dexlib2.dexbacked.az:
    byte[] val$buf -> a
    org.jf.dexlib2.dexbacked.ZipDexContainer this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.ZipDexContainer,java.util.zip.ZipEntry,byte[]) -> <init>
    org.jf.dexlib2.iface.DexFile getDexFile() -> a
org.jf.dexlib2.dexbacked.ZipDexContainer$NotAZipFileException -> org.jf.dexlib2.dexbacked.aA:
    void <init>() -> <init>
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload -> org.jf.dexlib2.dexbacked.a.a:
    org.jf.dexlib2.Opcode OPCODE -> e
    int elementWidth -> f
    int elementCount -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getElementWidth() -> e
    java.util.List getArrayElements() -> f
    int getCodeUnits() -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload$1 -> org.jf.dexlib2.dexbacked.a.b:
    int val$elementsStart -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload,int) -> <init>
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload$1ReturnedList -> org.jf.dexlib2.dexbacked.a.c:
    org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload) -> <init>
    int size() -> size
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload$2 -> org.jf.dexlib2.dexbacked.a.d:
    int val$elementsStart -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload,int) -> <init>
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload$3 -> org.jf.dexlib2.dexbacked.a.e:
    int val$elementsStart -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload,int) -> <init>
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload$4 -> org.jf.dexlib2.dexbacked.a.f:
    int val$elementsStart -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedArrayPayload,int) -> <init>
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction -> org.jf.dexlib2.dexbacked.a.g:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    org.jf.dexlib2.Opcode opcode -> c
    int instructionStart -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    org.jf.dexlib2.Opcode getOpcode() -> h_
    int getCodeUnits() -> b
    org.jf.dexlib2.iface.instruction.Instruction readFrom(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction$1 -> org.jf.dexlib2.dexbacked.a.h:
    int[] $SwitchMap$org$jf$dexlib2$Format -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction10t -> org.jf.dexlib2.dexbacked.a.i:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction10x -> org.jf.dexlib2.dexbacked.a.j:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction11n -> org.jf.dexlib2.dexbacked.a.k:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction11x -> org.jf.dexlib2.dexbacked.a.l:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction12x -> org.jf.dexlib2.dexbacked.a.m:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction20bc -> org.jf.dexlib2.dexbacked.a.n:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getVerificationError() -> e
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction20bc$1 -> org.jf.dexlib2.dexbacked.a.o:
    org.jf.dexlib2.ReferenceType$InvalidReferenceTypeException val$ex -> a
    int val$referenceIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction20bc,org.jf.dexlib2.ReferenceType$InvalidReferenceTypeException,int) -> <init>
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction20t -> org.jf.dexlib2.dexbacked.a.p:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction21c -> org.jf.dexlib2.dexbacked.a.q:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction21ih -> org.jf.dexlib2.dexbacked.a.r:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    short getHatLiteral() -> h
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction21lh -> org.jf.dexlib2.dexbacked.a.s:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    long getWideLiteral() -> g
    short getHatLiteral() -> h
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction21s -> org.jf.dexlib2.dexbacked.a.t:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction21t -> org.jf.dexlib2.dexbacked.a.u:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22b -> org.jf.dexlib2.dexbacked.a.v:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22c -> org.jf.dexlib2.dexbacked.a.w:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22cs -> org.jf.dexlib2.dexbacked.a.x:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getFieldOffset() -> i
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22s -> org.jf.dexlib2.dexbacked.a.y:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22t -> org.jf.dexlib2.dexbacked.a.z:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction22x -> org.jf.dexlib2.dexbacked.a.A:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction23x -> org.jf.dexlib2.dexbacked.a.B:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getRegisterC() -> f
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction30t -> org.jf.dexlib2.dexbacked.a.C:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction31c -> org.jf.dexlib2.dexbacked.a.D:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction31i -> org.jf.dexlib2.dexbacked.a.E:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction31t -> org.jf.dexlib2.dexbacked.a.F:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getCodeOffset() -> e
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction32x -> org.jf.dexlib2.dexbacked.a.G:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    int getRegisterB() -> h
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction35c -> org.jf.dexlib2.dexbacked.a.H:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction35mi -> org.jf.dexlib2.dexbacked.a.I:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getInlineIndex() -> f
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction35ms -> org.jf.dexlib2.dexbacked.a.J:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getVtableIndex() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction3rc -> org.jf.dexlib2.dexbacked.a.K:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getStartRegister() -> h
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction3rmi -> org.jf.dexlib2.dexbacked.a.L:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getStartRegister() -> h
    int getInlineIndex() -> f
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction3rms -> org.jf.dexlib2.dexbacked.a.M:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getStartRegister() -> h
    int getVtableIndex() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction45cc -> org.jf.dexlib2.dexbacked.a.N:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.iface.reference.Reference getReference2() -> d_
    int getReferenceType2() -> d
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction4rcc -> org.jf.dexlib2.dexbacked.a.O:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterCount() -> e
    int getStartRegister() -> h
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.iface.reference.Reference getReference2() -> d_
    int getReferenceType2() -> d
org.jf.dexlib2.dexbacked.instruction.DexBackedInstruction51l -> org.jf.dexlib2.dexbacked.a.P:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.Opcode,int) -> <init>
    int getRegisterA() -> b_
    long getWideLiteral() -> g
org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload -> org.jf.dexlib2.dexbacked.a.Q:
    int elementCount -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload$1 -> org.jf.dexlib2.dexbacked.a.R:
    int val$firstKey -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload$1$1 -> org.jf.dexlib2.dexbacked.a.S:
    int val$index -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload$1 this$1 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedPackedSwitchPayload$1,int) -> <init>
    int getKey() -> a
    int getOffset() -> b
org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload -> org.jf.dexlib2.dexbacked.a.T:
    int elementCount -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload$1 -> org.jf.dexlib2.dexbacked.a.U:
    org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload$1$1 -> org.jf.dexlib2.dexbacked.a.V:
    int val$index -> a
    org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload$1 this$1 -> b
    void <init>(org.jf.dexlib2.dexbacked.instruction.DexBackedSparseSwitchPayload$1,int) -> <init>
    int getKey() -> a
    int getOffset() -> b
org.jf.dexlib2.dexbacked.instruction.DexBackedUnknownInstruction -> org.jf.dexlib2.dexbacked.a.W:
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getOriginalOpcode() -> c
org.jf.dexlib2.dexbacked.raw.CdexHeaderItem -> org.jf.dexlib2.dexbacked.b.a:
    byte[] MAGIC_VALUE -> a
    int[] SUPPORTED_CDEX_VERSIONS -> b
    int getVersion(byte[],int) -> a
    boolean isSupportedCdexVersion(int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.raw.CodeItem -> org.jf.dexlib2.dexbacked.b.b:
    int CDEX_TRIES_SIZE_SHIFT -> a
    int CDEX_INS_COUNT_SHIFT -> b
    int CDEX_REGISTER_COUNT_SHIFT -> c
    int CDEX_INSTRUCTIONS_SIZE_AND_PREHEADER_FLAGS_OFFSET -> d
    int CDEX_INSTRUCTIONS_SIZE_SHIFT -> e
    int CDEX_PREHEADER_FLAGS_MASK -> f
    int CDEX_PREHEADER_FLAG_REGISTER_COUNT -> g
    int CDEX_PREHEADER_FLAG_INS_COUNT -> h
    int CDEX_PREHEADER_FLAG_TRIES_COUNT -> i
    int CDEX_PREHEADER_FLAG_INSTRUCTIONS_SIZE -> j
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.raw.HeaderItem -> org.jf.dexlib2.dexbacked.b.c:
    byte[] MAGIC_VALUE -> a
    byte[] getMagicForApi(int) -> a
    int getVersion(byte[],int) -> a
    boolean isSupportedDexVersion(int) -> b
    int getEndian(byte[],int) -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.raw.OdexHeaderItem -> org.jf.dexlib2.dexbacked.b.d:
    byte[] MAGIC_VALUE -> a
    int[] SUPPORTED_ODEX_VERSIONS -> b
    int getVersion(byte[],int) -> a
    boolean isSupportedOdexVersion(int) -> a
    int getDexOffset(byte[]) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.reference.DexBackedCallSiteReference -> org.jf.dexlib2.dexbacked.c.a:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int callSiteIndex -> b
    int callSiteIdOffset -> c
    int callSiteOffset -> d
    boolean $assertionsDisabled -> e
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.reference.MethodHandleReference getMethodHandle() -> f_
    java.lang.String getMethodName() -> d
    org.jf.dexlib2.iface.reference.MethodProtoReference getMethodProto() -> e
    java.util.List getExtraArguments() -> g_
    org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator getCallSiteIterator() -> g
    int getCallSiteOffset() -> h
    void validateReference() -> a_
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.reference.DexBackedFieldReference -> org.jf.dexlib2.dexbacked.c.b:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int fieldIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.lang.String getDefiningClass() -> d
    java.lang.String getName() -> a
    java.lang.String getType() -> i_
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.reference.DexBackedMethodHandleReference -> org.jf.dexlib2.dexbacked.c.c:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int methodHandleIndex -> b
    int methodHandleOffset -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getMethodHandleType() -> a
    org.jf.dexlib2.iface.reference.Reference getMemberReference() -> j_
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.reference.DexBackedMethodProtoReference -> org.jf.dexlib2.dexbacked.c.d:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int protoIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.util.List getParameterTypes() -> a
    java.lang.String getReturnType() -> k_
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.reference.DexBackedMethodProtoReference$1 -> org.jf.dexlib2.dexbacked.c.e:
    int val$paramListStart -> a
    int val$parameterCount -> b
    org.jf.dexlib2.dexbacked.reference.DexBackedMethodProtoReference this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.reference.DexBackedMethodProtoReference,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.reference.DexBackedMethodReference -> org.jf.dexlib2.dexbacked.c.f:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int methodIndex -> b
    int protoIdItemOffset -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.util.List getParameterTypes() -> i
    java.lang.String getReturnType() -> e
    int getProtoIdItemOffset() -> b
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.reference.DexBackedMethodReference$1 -> org.jf.dexlib2.dexbacked.c.g:
    int val$paramListStart -> a
    int val$parameterCount -> b
    org.jf.dexlib2.dexbacked.reference.DexBackedMethodReference this$0 -> c
    void <init>(org.jf.dexlib2.dexbacked.reference.DexBackedMethodReference,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.reference.DexBackedStringReference -> org.jf.dexlib2.dexbacked.c.h:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int stringIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.lang.String getString() -> a
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.reference.DexBackedTypeReference -> org.jf.dexlib2.dexbacked.c.i:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int typeIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    java.lang.String getType() -> a
    void validateReference() -> a_
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory -> org.jf.dexlib2.dexbacked.d.a:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory EMPTY -> a
    void <init>() -> <init>
    java.util.Set getClassAnnotations() -> a
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getFieldAnnotationIterator() -> b
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getMethodAnnotationIterator() -> c
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getParameterAnnotationIterator() -> d
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory newOrEmpty(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> a
    java.util.Set getAnnotations(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> b
    java.util.List getParameterAnnotations(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> c
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$1 -> org.jf.dexlib2.dexbacked.d.b:
    void <init>() -> <init>
    java.util.Set getClassAnnotations() -> a
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getFieldAnnotationIterator() -> b
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getMethodAnnotationIterator() -> c
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getParameterAnnotationIterator() -> d
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$2 -> org.jf.dexlib2.dexbacked.d.c:
    org.jf.dexlib2.dexbacked.DexBackedDexFile val$dexFile -> a
    int val$annotationSetOffset -> b
    int val$size -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$3 -> org.jf.dexlib2.dexbacked.d.d:
    org.jf.dexlib2.dexbacked.DexBackedDexFile val$dexFile -> a
    int val$annotationSetListOffset -> b
    int val$size -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,int) -> <init>
    int size() -> size
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator -> org.jf.dexlib2.dexbacked.d.e:
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator EMPTY -> a
    int seekTo(int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator$1 -> org.jf.dexlib2.dexbacked.d.f:
    void <init>() -> <init>
    int seekTo(int) -> a
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationsDirectoryImpl -> org.jf.dexlib2.dexbacked.d.g:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int directoryOffset -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    int getFieldAnnotationCount() -> e
    int getMethodAnnotationCount() -> f
    java.util.Set getClassAnnotations() -> a
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getFieldAnnotationIterator() -> b
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getMethodAnnotationIterator() -> c
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationIterator getParameterAnnotationIterator() -> d
org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationsDirectoryImpl$AnnotationIteratorImpl -> org.jf.dexlib2.dexbacked.d.h:
    int startOffset -> b
    int size -> c
    int currentIndex -> d
    int currentItemIndex -> e
    org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationsDirectoryImpl this$0 -> f
    void <init>(org.jf.dexlib2.dexbacked.util.AnnotationsDirectory$AnnotationsDirectoryImpl,int,int) -> <init>
    int seekTo(int) -> a
org.jf.dexlib2.dexbacked.util.DebugInfo -> org.jf.dexlib2.dexbacked.d.i:
    void <init>() -> <init>
    java.util.Iterator getParameterNames(org.jf.dexlib2.dexbacked.DexReader) -> a
    org.jf.dexlib2.dexbacked.util.DebugInfo newOrEmpty(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,org.jf.dexlib2.dexbacked.DexBackedMethodImplementation) -> a
org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl -> org.jf.dexlib2.dexbacked.d.j:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int debugInfoOffset -> b
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation methodImpl -> c
    org.jf.dexlib2.iface.debug.LocalInfo EMPTY_LOCAL_INFO -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int,org.jf.dexlib2.dexbacked.DexBackedMethodImplementation) -> <init>
    java.util.Iterator iterator() -> iterator
    org.jf.dexlib2.dexbacked.util.VariableSizeIterator getParameterNames(org.jf.dexlib2.dexbacked.DexReader) -> b
    java.util.Iterator getParameterNames(org.jf.dexlib2.dexbacked.DexReader) -> a
    org.jf.dexlib2.dexbacked.DexBackedMethodImplementation access$000(org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl) -> a
    org.jf.dexlib2.iface.debug.LocalInfo access$100() -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl$1 -> org.jf.dexlib2.dexbacked.d.k:
    void <init>() -> <init>
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl$2 -> org.jf.dexlib2.dexbacked.d.l:
    org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl) -> <init>
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl$3 -> org.jf.dexlib2.dexbacked.d.m:
    int codeAddress -> a
    int lineNumber -> b
    int val$lineNumberStart -> c
    org.jf.dexlib2.iface.debug.LocalInfo[] val$locals -> d
    org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl this$0 -> e
    void <init>(org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl,org.jf.dexlib2.dexbacked.DexBuffer,int,int,org.jf.dexlib2.iface.debug.LocalInfo[]) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl$4 -> org.jf.dexlib2.dexbacked.d.n:
    org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.util.DebugInfo$DebugInfoImpl,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.util.DebugInfo$EmptyDebugInfo -> org.jf.dexlib2.dexbacked.d.o:
    org.jf.dexlib2.dexbacked.util.DebugInfo$EmptyDebugInfo INSTANCE -> a
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Iterator getParameterNames(org.jf.dexlib2.dexbacked.DexReader) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator -> org.jf.dexlib2.dexbacked.d.p:
    org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator EMPTY -> a
    void <init>() -> <init>
    org.jf.dexlib2.iface.value.EncodedValue getNextOrNull() -> a
    void skipNext() -> b
    int getReaderOffset() -> c
    int getItemCount() -> d
    org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator newOrEmpty(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator$1 -> org.jf.dexlib2.dexbacked.d.q:
    void <init>() -> <init>
    org.jf.dexlib2.iface.value.EncodedValue getNextOrNull() -> a
    void skipNext() -> b
    int getReaderOffset() -> c
    int getItemCount() -> d
org.jf.dexlib2.dexbacked.util.EncodedArrayItemIterator$EncodedArrayItemIteratorImpl -> org.jf.dexlib2.dexbacked.d.r:
    org.jf.dexlib2.dexbacked.DexReader reader -> a
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> b
    int size -> c
    int index -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,int) -> <init>
    org.jf.dexlib2.iface.value.EncodedValue getNextOrNull() -> a
    void skipNext() -> b
    int getReaderOffset() -> c
    int getItemCount() -> d
org.jf.dexlib2.dexbacked.util.FixedSizeList -> org.jf.dexlib2.dexbacked.d.s:
    void <init>() -> <init>
    java.lang.Object get(int) -> get
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.util.FixedSizeSet -> org.jf.dexlib2.dexbacked.d.t:
    void <init>() -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object readItem(int) -> a
org.jf.dexlib2.dexbacked.util.FixedSizeSet$1 -> org.jf.dexlib2.dexbacked.d.u:
    int index -> a
    org.jf.dexlib2.dexbacked.util.FixedSizeSet this$0 -> b
    void <init>(org.jf.dexlib2.dexbacked.util.FixedSizeSet) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.dexbacked.util.ParameterIterator -> org.jf.dexlib2.dexbacked.d.v:
    java.util.Iterator parameterTypes -> a
    java.util.Iterator parameterAnnotations -> b
    java.util.Iterator parameterNames -> c
    void <init>(java.util.List,java.util.List,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.dexbacked.util.ParameterIterator$1 -> org.jf.dexlib2.dexbacked.d.w:
    java.util.Set val$annotations -> a
    java.lang.String val$name -> b
    java.lang.String val$type -> c
    void <init>(org.jf.dexlib2.dexbacked.util.ParameterIterator,java.util.Set,java.lang.String,java.lang.String) -> <init>
    java.util.Set getAnnotations() -> d
    java.lang.String getName() -> e
    java.lang.String getType() -> a
org.jf.dexlib2.dexbacked.util.VariableSizeIterator -> org.jf.dexlib2.dexbacked.d.x:
    org.jf.dexlib2.dexbacked.DexReader reader -> a
    int size -> b
    int index -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    void <init>(org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jf.dexlib2.dexbacked.util.VariableSizeList -> org.jf.dexlib2.dexbacked.d.y:
    org.jf.dexlib2.dexbacked.DexBuffer buffer -> a
    int offset -> b
    int size -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    int size() -> size
    org.jf.dexlib2.dexbacked.util.VariableSizeListIterator listIterator(int) -> a
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
org.jf.dexlib2.dexbacked.util.VariableSizeList$1 -> org.jf.dexlib2.dexbacked.d.z:
    org.jf.dexlib2.dexbacked.util.VariableSizeList this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.util.VariableSizeList,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.util.VariableSizeListIterator -> org.jf.dexlib2.dexbacked.d.A:
    org.jf.dexlib2.dexbacked.DexReader reader -> a
    int size -> b
    int startOffset -> c
    int index -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    int getReaderOffset() -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
org.jf.dexlib2.dexbacked.util.VariableSizeLookaheadIterator -> org.jf.dexlib2.dexbacked.d.B:
    org.jf.dexlib2.dexbacked.DexReader reader -> a
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader) -> a
    java.lang.Object computeNext() -> a
org.jf.dexlib2.dexbacked.util.VariableSizeSet -> org.jf.dexlib2.dexbacked.d.C:
    org.jf.dexlib2.dexbacked.DexBuffer buffer -> a
    int offset -> b
    int size -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    int size() -> size
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.dexbacked.util.VariableSizeSet$1 -> org.jf.dexlib2.dexbacked.d.D:
    org.jf.dexlib2.dexbacked.util.VariableSizeSet this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.util.VariableSizeSet,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.value.DexBackedAnnotationEncodedValue -> org.jf.dexlib2.dexbacked.e.a:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    java.lang.String type -> b
    int elementCount -> c
    int elementsOffset -> d
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> <init>
    void skipFrom(org.jf.dexlib2.dexbacked.DexReader) -> a
    void skipElements(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    java.lang.String getType() -> b
    java.util.Set getElements() -> c
org.jf.dexlib2.dexbacked.value.DexBackedAnnotationEncodedValue$1 -> org.jf.dexlib2.dexbacked.e.b:
    org.jf.dexlib2.dexbacked.value.DexBackedAnnotationEncodedValue this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.value.DexBackedAnnotationEncodedValue,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.value.DexBackedArrayEncodedValue -> org.jf.dexlib2.dexbacked.e.c:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int elementCount -> b
    int encodedArrayOffset -> c
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader) -> <init>
    void skipFrom(org.jf.dexlib2.dexbacked.DexReader) -> a
    void skipElementsFrom(org.jf.dexlib2.dexbacked.DexReader,int) -> a
    java.util.List getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedArrayEncodedValue$1 -> org.jf.dexlib2.dexbacked.e.d:
    org.jf.dexlib2.dexbacked.value.DexBackedArrayEncodedValue this$0 -> a
    void <init>(org.jf.dexlib2.dexbacked.value.DexBackedArrayEncodedValue,org.jf.dexlib2.dexbacked.DexBuffer,int,int) -> <init>
    java.lang.Object readNextItem(org.jf.dexlib2.dexbacked.DexReader,int) -> a
org.jf.dexlib2.dexbacked.value.DexBackedEnumEncodedValue -> org.jf.dexlib2.dexbacked.e.e:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int fieldIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedFieldEncodedValue -> org.jf.dexlib2.dexbacked.e.f:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int fieldIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedMethodEncodedValue -> org.jf.dexlib2.dexbacked.e.g:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int methodIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    org.jf.dexlib2.iface.reference.MethodReference getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedMethodHandleEncodedValue -> org.jf.dexlib2.dexbacked.e.h:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int methodHandleIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    org.jf.dexlib2.iface.reference.MethodHandleReference getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedMethodTypeEncodedValue -> org.jf.dexlib2.dexbacked.e.i:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int methodProtoIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    org.jf.dexlib2.iface.reference.MethodProtoReference getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedStringEncodedValue -> org.jf.dexlib2.dexbacked.e.j:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int stringIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    java.lang.String getValue() -> b
org.jf.dexlib2.dexbacked.value.DexBackedTypeEncodedValue -> org.jf.dexlib2.dexbacked.e.k:
    org.jf.dexlib2.dexbacked.DexBackedDexFile dexFile -> a
    int typeIndex -> b
    void <init>(org.jf.dexlib2.dexbacked.DexBackedDexFile,org.jf.dexlib2.dexbacked.DexReader,int) -> <init>
    java.lang.String getValue() -> b
org.jf.dexlib2.iface.Annotation -> org.jf.dexlib2.iface.a:
    int getVisibility() -> a
    java.lang.String getType() -> b
    java.util.Set getElements() -> c
    int compareTo(org.jf.dexlib2.iface.Annotation) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.AnnotationElement -> org.jf.dexlib2.iface.b:
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.value.EncodedValue getValue() -> b
    int compareTo(org.jf.dexlib2.iface.AnnotationElement) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.ClassDef -> org.jf.dexlib2.iface.c:
    java.lang.String getType() -> a
    int getAccessFlags() -> d
    java.lang.String getSuperclass() -> b
    java.util.List getInterfaces() -> f
    java.lang.String getSourceFile() -> e
    java.util.Set getAnnotations() -> g
    java.lang.Iterable getStaticFields() -> h
    java.lang.Iterable getInstanceFields() -> i
    java.lang.Iterable getDirectMethods() -> j
    java.lang.Iterable getVirtualMethods() -> k
org.jf.dexlib2.iface.DexFile -> org.jf.dexlib2.iface.DexFile:
    java.util.Set getClasses() -> getClasses
    org.jf.dexlib2.Opcodes getOpcodes() -> getOpcodes
org.jf.dexlib2.iface.ExceptionHandler -> org.jf.dexlib2.iface.d:
    java.lang.String getExceptionType() -> b
    org.jf.dexlib2.iface.reference.TypeReference getExceptionTypeReference() -> a
    int getHandlerCodeAddress() -> c
    int compareTo(org.jf.dexlib2.iface.ExceptionHandler) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.Field -> org.jf.dexlib2.iface.e:
    java.lang.String getName() -> a
    java.lang.String getType() -> i_
    int getAccessFlags() -> e
    org.jf.dexlib2.iface.value.EncodedValue getInitialValue() -> f
    java.util.Set getAnnotations() -> g
    java.util.Set getHiddenApiRestrictions() -> h
org.jf.dexlib2.iface.Method -> org.jf.dexlib2.iface.f:
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.util.List getParameters() -> f
    java.lang.String getReturnType() -> e
    int getAccessFlags() -> b
    java.util.Set getAnnotations() -> j
    java.util.Set getHiddenApiRestrictions() -> k
    org.jf.dexlib2.iface.MethodImplementation getImplementation() -> l
org.jf.dexlib2.iface.MethodImplementation -> org.jf.dexlib2.iface.g:
    int getRegisterCount() -> a
    java.lang.Iterable getInstructions() -> e
    java.util.List getTryBlocks() -> c
    java.lang.Iterable getDebugItems() -> d
org.jf.dexlib2.iface.MethodParameter -> org.jf.dexlib2.iface.h:
    java.lang.String getType() -> a
    java.util.Set getAnnotations() -> d
    java.lang.String getName() -> e
org.jf.dexlib2.iface.MultiDexContainer -> org.jf.dexlib2.iface.i:
    java.util.List getDexEntryNames() -> a
    org.jf.dexlib2.iface.MultiDexContainer$DexEntry getEntry(java.lang.String) -> a
org.jf.dexlib2.iface.MultiDexContainer$DexEntry -> org.jf.dexlib2.iface.j:
    org.jf.dexlib2.iface.DexFile getDexFile() -> a
org.jf.dexlib2.iface.TryBlock -> org.jf.dexlib2.iface.k:
    int getStartCodeAddress() -> a
    int getCodeUnitCount() -> b
    java.util.List getExceptionHandlers() -> c
org.jf.dexlib2.iface.debug.DebugItem -> org.jf.dexlib2.iface.a.a:
    int getDebugItemType() -> f
    int getCodeAddress() -> c
org.jf.dexlib2.iface.debug.EndLocal -> org.jf.dexlib2.iface.a.b:
    int getRegister() -> d
org.jf.dexlib2.iface.debug.LineNumber -> org.jf.dexlib2.iface.a.c:
    int getLineNumber() -> a
org.jf.dexlib2.iface.debug.LocalInfo -> org.jf.dexlib2.iface.a.d:
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
org.jf.dexlib2.iface.debug.RestartLocal -> org.jf.dexlib2.iface.a.e:
    int getRegister() -> d
org.jf.dexlib2.iface.debug.SetSourceFile -> org.jf.dexlib2.iface.a.f:
    java.lang.String getSourceFile() -> a
    org.jf.dexlib2.iface.reference.StringReference getSourceFileReference() -> b
org.jf.dexlib2.iface.debug.StartLocal -> org.jf.dexlib2.iface.a.g:
    int getRegister() -> d
    org.jf.dexlib2.iface.reference.StringReference getNameReference() -> g
    org.jf.dexlib2.iface.reference.TypeReference getTypeReference() -> h
    org.jf.dexlib2.iface.reference.StringReference getSignatureReference() -> i
org.jf.dexlib2.iface.instruction.DualReferenceInstruction -> org.jf.dexlib2.iface.b.a:
    org.jf.dexlib2.iface.reference.Reference getReference2() -> d_
    int getReferenceType2() -> d
org.jf.dexlib2.iface.instruction.FieldOffsetInstruction -> org.jf.dexlib2.iface.b.b:
    int getFieldOffset() -> i
org.jf.dexlib2.iface.instruction.FiveRegisterInstruction -> org.jf.dexlib2.iface.b.c:
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
org.jf.dexlib2.iface.instruction.HatLiteralInstruction -> org.jf.dexlib2.iface.b.d:
    short getHatLiteral() -> h
org.jf.dexlib2.iface.instruction.InlineIndexInstruction -> org.jf.dexlib2.iface.b.e:
    int getInlineIndex() -> f
org.jf.dexlib2.iface.instruction.Instruction -> org.jf.dexlib2.iface.b.f:
    org.jf.dexlib2.Opcode getOpcode() -> h_
    int getCodeUnits() -> b
org.jf.dexlib2.iface.instruction.LongHatLiteralInstruction -> org.jf.dexlib2.iface.b.g:
org.jf.dexlib2.iface.instruction.NarrowHatLiteralInstruction -> org.jf.dexlib2.iface.b.h:
org.jf.dexlib2.iface.instruction.NarrowLiteralInstruction -> org.jf.dexlib2.iface.b.i:
    int getNarrowLiteral() -> f
org.jf.dexlib2.iface.instruction.OffsetInstruction -> org.jf.dexlib2.iface.b.j:
    int getCodeOffset() -> e
org.jf.dexlib2.iface.instruction.OneRegisterInstruction -> org.jf.dexlib2.iface.b.k:
    int getRegisterA() -> b_
org.jf.dexlib2.iface.instruction.PayloadInstruction -> org.jf.dexlib2.iface.b.l:
org.jf.dexlib2.iface.instruction.ReferenceInstruction -> org.jf.dexlib2.iface.b.m:
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
org.jf.dexlib2.iface.instruction.RegisterRangeInstruction -> org.jf.dexlib2.iface.b.n:
    int getStartRegister() -> h
org.jf.dexlib2.iface.instruction.SwitchElement -> org.jf.dexlib2.iface.b.o:
    int getKey() -> a
    int getOffset() -> b
org.jf.dexlib2.iface.instruction.SwitchPayload -> org.jf.dexlib2.iface.b.p:
    java.util.List getSwitchElements() -> g
org.jf.dexlib2.iface.instruction.ThreeRegisterInstruction -> org.jf.dexlib2.iface.b.q:
    int getRegisterC() -> f
org.jf.dexlib2.iface.instruction.TwoRegisterInstruction -> org.jf.dexlib2.iface.b.r:
    int getRegisterB() -> h
org.jf.dexlib2.iface.instruction.VariableRegisterInstruction -> org.jf.dexlib2.iface.b.s:
    int getRegisterCount() -> e
org.jf.dexlib2.iface.instruction.VerificationErrorInstruction -> org.jf.dexlib2.iface.b.t:
    int getVerificationError() -> e
org.jf.dexlib2.iface.instruction.VtableIndexInstruction -> org.jf.dexlib2.iface.b.u:
    int getVtableIndex() -> g
org.jf.dexlib2.iface.instruction.WideLiteralInstruction -> org.jf.dexlib2.iface.b.v:
    long getWideLiteral() -> g
org.jf.dexlib2.iface.instruction.formats.ArrayPayload -> org.jf.dexlib2.iface.b.a.a:
    int getElementWidth() -> e
    java.util.List getArrayElements() -> f
org.jf.dexlib2.iface.instruction.formats.Instruction10t -> org.jf.dexlib2.iface.b.a.b:
org.jf.dexlib2.iface.instruction.formats.Instruction10x -> org.jf.dexlib2.iface.b.a.c:
org.jf.dexlib2.iface.instruction.formats.Instruction11n -> org.jf.dexlib2.iface.b.a.d:
org.jf.dexlib2.iface.instruction.formats.Instruction12x -> org.jf.dexlib2.iface.b.a.e:
org.jf.dexlib2.iface.instruction.formats.Instruction20bc -> org.jf.dexlib2.iface.b.a.f:
org.jf.dexlib2.iface.instruction.formats.Instruction21c -> org.jf.dexlib2.iface.b.a.g:
org.jf.dexlib2.iface.instruction.formats.Instruction21t -> org.jf.dexlib2.iface.b.a.h:
org.jf.dexlib2.iface.instruction.formats.Instruction22c -> org.jf.dexlib2.iface.b.a.i:
org.jf.dexlib2.iface.instruction.formats.Instruction22t -> org.jf.dexlib2.iface.b.a.j:
org.jf.dexlib2.iface.instruction.formats.Instruction31t -> org.jf.dexlib2.iface.b.a.k:
org.jf.dexlib2.iface.instruction.formats.Instruction35c -> org.jf.dexlib2.iface.b.a.l:
org.jf.dexlib2.iface.instruction.formats.Instruction35mi -> org.jf.dexlib2.iface.b.a.m:
org.jf.dexlib2.iface.instruction.formats.Instruction3rc -> org.jf.dexlib2.iface.b.a.n:
org.jf.dexlib2.iface.instruction.formats.Instruction3rmi -> org.jf.dexlib2.iface.b.a.o:
org.jf.dexlib2.iface.instruction.formats.Instruction45cc -> org.jf.dexlib2.iface.b.a.p:
org.jf.dexlib2.iface.instruction.formats.Instruction4rcc -> org.jf.dexlib2.iface.b.a.q:
org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload -> org.jf.dexlib2.iface.b.a.r:
    java.util.List getSwitchElements() -> g
org.jf.dexlib2.iface.instruction.formats.UnknownInstruction -> org.jf.dexlib2.iface.b.a.s:
    int getOriginalOpcode() -> c
org.jf.dexlib2.iface.reference.CallSiteReference -> org.jf.dexlib2.iface.c.a:
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.reference.MethodHandleReference getMethodHandle() -> f_
    java.lang.String getMethodName() -> d
    org.jf.dexlib2.iface.reference.MethodProtoReference getMethodProto() -> e
    java.util.List getExtraArguments() -> g_
org.jf.dexlib2.iface.reference.FieldReference -> org.jf.dexlib2.iface.c.b:
    java.lang.String getDefiningClass() -> d
    java.lang.String getName() -> a
    java.lang.String getType() -> i_
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.FieldReference) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.reference.MethodHandleReference -> org.jf.dexlib2.iface.c.c:
    int getMethodHandleType() -> a
    org.jf.dexlib2.iface.reference.Reference getMemberReference() -> j_
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.reference.MethodProtoReference -> org.jf.dexlib2.iface.c.d:
    java.util.List getParameterTypes() -> a
    java.lang.String getReturnType() -> k_
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodProtoReference) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.reference.MethodReference -> org.jf.dexlib2.iface.c.e:
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.util.List getParameterTypes() -> i
    java.lang.String getReturnType() -> e
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.jf.dexlib2.iface.reference.MethodReference) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.reference.Reference -> org.jf.dexlib2.iface.c.f:
    void validateReference() -> a_
org.jf.dexlib2.iface.reference.Reference$InvalidReferenceException -> org.jf.dexlib2.iface.c.g:
    java.lang.String invalidReferenceRepresentation -> a
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    java.lang.String getInvalidReferenceRepresentation() -> a
org.jf.dexlib2.iface.reference.StringReference -> org.jf.dexlib2.iface.c.h:
    java.lang.String getString() -> a
    int compareTo(java.lang.CharSequence) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.reference.TypeReference -> org.jf.dexlib2.iface.c.i:
    java.lang.String getType() -> a
    int compareTo(java.lang.CharSequence) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.AnnotationEncodedValue -> org.jf.dexlib2.iface.d.a:
    java.lang.String getType() -> b
    java.util.Set getElements() -> c
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.ArrayEncodedValue -> org.jf.dexlib2.iface.d.b:
    java.util.List getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.BooleanEncodedValue -> org.jf.dexlib2.iface.d.c:
    boolean getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.ByteEncodedValue -> org.jf.dexlib2.iface.d.d:
    byte getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.CharEncodedValue -> org.jf.dexlib2.iface.d.e:
    char getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.DoubleEncodedValue -> org.jf.dexlib2.iface.d.f:
    double getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.EncodedValue -> org.jf.dexlib2.iface.d.g:
    int getValueType() -> a
org.jf.dexlib2.iface.value.EnumEncodedValue -> org.jf.dexlib2.iface.d.h:
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.FieldEncodedValue -> org.jf.dexlib2.iface.d.i:
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.FloatEncodedValue -> org.jf.dexlib2.iface.d.j:
    float getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.IntEncodedValue -> org.jf.dexlib2.iface.d.k:
    int getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.LongEncodedValue -> org.jf.dexlib2.iface.d.l:
    long getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.MethodEncodedValue -> org.jf.dexlib2.iface.d.m:
    org.jf.dexlib2.iface.reference.MethodReference getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.MethodHandleEncodedValue -> org.jf.dexlib2.iface.d.n:
    org.jf.dexlib2.iface.reference.MethodHandleReference getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.MethodTypeEncodedValue -> org.jf.dexlib2.iface.d.o:
    org.jf.dexlib2.iface.reference.MethodProtoReference getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.NullEncodedValue -> org.jf.dexlib2.iface.d.p:
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.ShortEncodedValue -> org.jf.dexlib2.iface.d.q:
    short getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.StringEncodedValue -> org.jf.dexlib2.iface.d.r:
    java.lang.String getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.iface.value.TypeEncodedValue -> org.jf.dexlib2.iface.d.s:
    java.lang.String getValue() -> b
    int compareTo(org.jf.dexlib2.iface.value.EncodedValue) -> a
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.immutable.ImmutableAnnotation -> org.jf.dexlib2.d.a:
    int visibility -> b
    java.lang.String type -> c
    com.google.common.collect.ImmutableSet elements -> d
    org.jf.util.ImmutableConverter CONVERTER -> e
    void <init>(int,java.lang.String,java.util.Collection) -> <init>
    org.jf.dexlib2.immutable.ImmutableAnnotation of(org.jf.dexlib2.iface.Annotation) -> b
    int getVisibility() -> a
    java.lang.String getType() -> b
    com.google.common.collect.ImmutableSet immutableSetOf(java.lang.Iterable) -> a
    java.util.Set getElements() -> c
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableAnnotation$1 -> org.jf.dexlib2.d.b:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.ImmutableAnnotationElement -> org.jf.dexlib2.d.c:
    java.lang.String name -> b
    org.jf.dexlib2.immutable.value.ImmutableEncodedValue value -> c
    org.jf.util.ImmutableConverter CONVERTER -> d
    void <init>(java.lang.String,org.jf.dexlib2.iface.value.EncodedValue) -> <init>
    org.jf.dexlib2.immutable.ImmutableAnnotationElement of(org.jf.dexlib2.iface.AnnotationElement) -> b
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.value.EncodedValue getValue() -> b
    com.google.common.collect.ImmutableSet immutableSetOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableAnnotationElement$1 -> org.jf.dexlib2.d.d:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.ImmutableExceptionHandler -> org.jf.dexlib2.d.e:
    java.lang.String exceptionType -> a
    int handlerCodeAddress -> b
    org.jf.util.ImmutableConverter CONVERTER -> c
    void <init>(java.lang.String,int) -> <init>
    org.jf.dexlib2.immutable.ImmutableExceptionHandler of(org.jf.dexlib2.iface.ExceptionHandler) -> b
    java.lang.String getExceptionType() -> b
    int getHandlerCodeAddress() -> c
    com.google.common.collect.ImmutableList immutableListOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableExceptionHandler$1 -> org.jf.dexlib2.d.f:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.ImmutableMethod -> org.jf.dexlib2.d.g:
    java.lang.String definingClass -> a
    java.lang.String name -> b
    com.google.common.collect.ImmutableList parameters -> c
    java.lang.String returnType -> d
    int accessFlags -> e
    com.google.common.collect.ImmutableSet annotations -> f
    com.google.common.collect.ImmutableSet hiddenApiRestrictions -> g
    org.jf.dexlib2.immutable.ImmutableMethodImplementation methodImplementation -> h
    void <init>(java.lang.String,java.lang.String,java.lang.Iterable,java.lang.String,int,java.util.Set,java.util.Set,org.jf.dexlib2.iface.MethodImplementation) -> <init>
    void <init>(java.lang.String,java.lang.String,com.google.common.collect.ImmutableList,java.lang.String,int,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,org.jf.dexlib2.immutable.ImmutableMethodImplementation) -> <init>
    org.jf.dexlib2.immutable.ImmutableMethod of(org.jf.dexlib2.iface.Method) -> a
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.lang.String getReturnType() -> e
    int getAccessFlags() -> b
    java.util.Set getHiddenApiRestrictions() -> k
    java.util.List getParameterTypes() -> i
    org.jf.dexlib2.iface.MethodImplementation getImplementation() -> l
    java.util.Set getAnnotations() -> j
    java.util.List getParameters() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableMethod$1 -> org.jf.dexlib2.d.h:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.ImmutableMethodImplementation -> org.jf.dexlib2.d.i:
    int registerCount -> a
    com.google.common.collect.ImmutableList instructions -> b
    com.google.common.collect.ImmutableList tryBlocks -> c
    com.google.common.collect.ImmutableList debugItems -> d
    void <init>(int,java.lang.Iterable,java.util.List,java.lang.Iterable) -> <init>
    int getRegisterCount() -> a
    java.lang.Iterable getDebugItems() -> d
    java.util.List getTryBlocks() -> c
    java.lang.Iterable getInstructions() -> e
org.jf.dexlib2.immutable.ImmutableMethodParameter -> org.jf.dexlib2.d.j:
    java.lang.String type -> a
    com.google.common.collect.ImmutableSet annotations -> b
    java.lang.String name -> c
    org.jf.util.ImmutableConverter CONVERTER -> d
    void <init>(java.lang.String,java.util.Set,java.lang.String) -> <init>
    void <init>(java.lang.String,com.google.common.collect.ImmutableSet,java.lang.String) -> <init>
    org.jf.dexlib2.immutable.ImmutableMethodParameter of(org.jf.dexlib2.iface.MethodParameter) -> a
    java.lang.String getType() -> a
    java.util.Set getAnnotations() -> d
    java.lang.String getName() -> e
    java.lang.String getSignature() -> b
    com.google.common.collect.ImmutableList immutableListOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableMethodParameter$1 -> org.jf.dexlib2.d.k:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.ImmutableTryBlock -> org.jf.dexlib2.d.l:
    int startCodeAddress -> a
    int codeUnitCount -> b
    com.google.common.collect.ImmutableList exceptionHandlers -> c
    org.jf.util.ImmutableConverter CONVERTER -> d
    void <init>(int,int,java.util.List) -> <init>
    org.jf.dexlib2.immutable.ImmutableTryBlock of(org.jf.dexlib2.iface.TryBlock) -> a
    int getStartCodeAddress() -> a
    int getCodeUnitCount() -> b
    com.google.common.collect.ImmutableList immutableListOf(java.util.List) -> a
    java.util.List getExceptionHandlers() -> c
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.ImmutableTryBlock$1 -> org.jf.dexlib2.d.m:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.debug.ImmutableDebugItem -> org.jf.dexlib2.d.a.a:
    int codeAddress -> a
    org.jf.util.ImmutableConverter CONVERTER -> b
    void <init>(int) -> <init>
    org.jf.dexlib2.immutable.debug.ImmutableDebugItem of(org.jf.dexlib2.iface.debug.DebugItem) -> a
    int getCodeAddress() -> c
    com.google.common.collect.ImmutableList immutableListOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.debug.ImmutableDebugItem$1 -> org.jf.dexlib2.d.a.b:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.debug.ImmutableEndLocal -> org.jf.dexlib2.d.a.c:
    int register -> a
    java.lang.String name -> b
    java.lang.String type -> c
    java.lang.String signature -> d
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    int getRegister() -> d
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableEpilogueBegin -> org.jf.dexlib2.d.a.d:
    void <init>(int) -> <init>
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableLineNumber -> org.jf.dexlib2.d.a.e:
    int lineNumber -> a
    void <init>(int,int) -> <init>
    int getLineNumber() -> a
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutablePrologueEnd -> org.jf.dexlib2.d.a.f:
    void <init>(int) -> <init>
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableRestartLocal -> org.jf.dexlib2.d.a.g:
    int register -> a
    java.lang.String name -> b
    java.lang.String type -> c
    java.lang.String signature -> d
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    int getRegister() -> d
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableSetSourceFile -> org.jf.dexlib2.d.a.h:
    java.lang.String sourceFile -> a
    void <init>(int,java.lang.String) -> <init>
    java.lang.String getSourceFile() -> a
    org.jf.dexlib2.iface.reference.StringReference getSourceFileReference() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableSetSourceFile$1 -> org.jf.dexlib2.d.a.i:
    org.jf.dexlib2.immutable.debug.ImmutableSetSourceFile this$0 -> a
    void <init>(org.jf.dexlib2.immutable.debug.ImmutableSetSourceFile) -> <init>
    java.lang.String getString() -> a
org.jf.dexlib2.immutable.debug.ImmutableStartLocal -> org.jf.dexlib2.d.a.j:
    int register -> d
    java.lang.String name -> a
    java.lang.String type -> b
    java.lang.String signature -> c
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    int getRegister() -> d
    org.jf.dexlib2.iface.reference.StringReference getNameReference() -> g
    org.jf.dexlib2.iface.reference.TypeReference getTypeReference() -> h
    org.jf.dexlib2.iface.reference.StringReference getSignatureReference() -> i
    java.lang.String getName() -> e
    java.lang.String getType() -> a
    java.lang.String getSignature() -> b
    int getDebugItemType() -> f
org.jf.dexlib2.immutable.debug.ImmutableStartLocal$1 -> org.jf.dexlib2.d.a.k:
    org.jf.dexlib2.immutable.debug.ImmutableStartLocal this$0 -> a
    void <init>(org.jf.dexlib2.immutable.debug.ImmutableStartLocal) -> <init>
    java.lang.String getString() -> a
org.jf.dexlib2.immutable.debug.ImmutableStartLocal$2 -> org.jf.dexlib2.d.a.l:
    org.jf.dexlib2.immutable.debug.ImmutableStartLocal this$0 -> a
    void <init>(org.jf.dexlib2.immutable.debug.ImmutableStartLocal) -> <init>
    java.lang.String getType() -> a
org.jf.dexlib2.immutable.debug.ImmutableStartLocal$3 -> org.jf.dexlib2.d.a.m:
    org.jf.dexlib2.immutable.debug.ImmutableStartLocal this$0 -> a
    void <init>(org.jf.dexlib2.immutable.debug.ImmutableStartLocal) -> <init>
    java.lang.String getString() -> a
org.jf.dexlib2.immutable.instruction.ImmutableArrayPayload -> org.jf.dexlib2.d.b.a:
    org.jf.dexlib2.Opcode OPCODE -> b
    int elementWidth -> c
    com.google.common.collect.ImmutableList arrayElements -> d
    void <init>(int,java.util.List) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableArrayPayload of(org.jf.dexlib2.iface.instruction.formats.ArrayPayload) -> a
    int getElementWidth() -> e
    java.util.List getArrayElements() -> f
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction -> org.jf.dexlib2.d.b.b:
    org.jf.dexlib2.Opcode opcode -> a
    org.jf.util.ImmutableConverter CONVERTER -> b
    void <init>(org.jf.dexlib2.Opcode) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction of(org.jf.dexlib2.iface.instruction.Instruction) -> a
    org.jf.dexlib2.Opcode getOpcode() -> h_
    org.jf.dexlib2.Format getFormat() -> e_
    int getCodeUnits() -> b
    com.google.common.collect.ImmutableList immutableListOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction$1 -> org.jf.dexlib2.d.b.c:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.instruction.ImmutableInstruction$2 -> org.jf.dexlib2.d.b.d:
    int[] $SwitchMap$org$jf$dexlib2$Format -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction10t -> org.jf.dexlib2.d.b.e:
    org.jf.dexlib2.Format FORMAT -> b
    int codeOffset -> c
    void <init>(org.jf.dexlib2.Opcode,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction10t of(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> a
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction10x -> org.jf.dexlib2.d.b.f:
    org.jf.dexlib2.Format FORMAT -> b
    void <init>(org.jf.dexlib2.Opcode) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction10x of(org.jf.dexlib2.iface.instruction.formats.Instruction10x) -> a
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction11n -> org.jf.dexlib2.d.b.g:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction11n of(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction11x -> org.jf.dexlib2.d.b.h:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    void <init>(org.jf.dexlib2.Opcode,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction11x of$2a40b5f8(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction12x -> org.jf.dexlib2.d.b.i:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction12x of(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction20bc -> org.jf.dexlib2.d.b.j:
    org.jf.dexlib2.Format FORMAT -> b
    int verificationError -> c
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> d
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction20bc of(org.jf.dexlib2.iface.instruction.formats.Instruction20bc) -> a
    int getVerificationError() -> e
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction20t -> org.jf.dexlib2.d.b.k:
    org.jf.dexlib2.Format FORMAT -> b
    int codeOffset -> c
    void <init>(org.jf.dexlib2.Opcode,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction20t of$1053cdc8(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> a
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction21c -> org.jf.dexlib2.d.b.l:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> d
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction21c of(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> a
    int getRegisterA() -> b_
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction21ih -> org.jf.dexlib2.d.b.m:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction21ih of$671891ce(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    short getHatLiteral() -> h
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction21lh -> org.jf.dexlib2.d.b.n:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    long literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,long) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction21lh of$5a2efac(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    long getWideLiteral() -> g
    short getHatLiteral() -> h
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction21s -> org.jf.dexlib2.d.b.o:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction21s of$2cc3e188(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction21t -> org.jf.dexlib2.d.b.p:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int codeOffset -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction21t of(org.jf.dexlib2.iface.instruction.formats.Instruction21t) -> a
    int getRegisterA() -> b_
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22b -> org.jf.dexlib2.d.b.q:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22b of$6d3c7348(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22c -> org.jf.dexlib2.d.b.r:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22c of(org.jf.dexlib2.iface.instruction.formats.Instruction22c) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22cs -> org.jf.dexlib2.d.b.s:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    int fieldOffset -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22cs of$6d08e02a(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getFieldOffset() -> i
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22s -> org.jf.dexlib2.d.b.t:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    int literal -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22s of$690c9298(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22t -> org.jf.dexlib2.d.b.u:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    int codeOffset -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22t of(org.jf.dexlib2.iface.instruction.formats.Instruction22t) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction22x -> org.jf.dexlib2.d.b.v:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction22x of$1bb0c608(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction23x -> org.jf.dexlib2.d.b.w:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    int registerC -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction23x of$7a1fae18(org.jf.dexlib2.iface.instruction.ThreeRegisterInstruction) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    int getRegisterC() -> f
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction30t -> org.jf.dexlib2.d.b.x:
    org.jf.dexlib2.Format FORMAT -> b
    int codeOffset -> c
    void <init>(org.jf.dexlib2.Opcode,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction30t of$13ea4218(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> a
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction31c -> org.jf.dexlib2.d.b.y:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> d
    void <init>(org.jf.dexlib2.Opcode,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction31c of$2c8e4fa8(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> a
    int getRegisterA() -> b_
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction31i -> org.jf.dexlib2.d.b.z:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction31i of$f4df98(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    int getNarrowLiteral() -> f
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction31t -> org.jf.dexlib2.d.b.A:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int codeOffset -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction31t of(org.jf.dexlib2.iface.instruction.formats.Instruction31t) -> a
    int getRegisterA() -> b_
    int getCodeOffset() -> e
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction32x -> org.jf.dexlib2.d.b.B:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    int registerB -> d
    void <init>(org.jf.dexlib2.Opcode,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction32x of$88d49d8(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    int getRegisterA() -> b_
    int getRegisterB() -> h
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction35c -> org.jf.dexlib2.d.b.C:
    org.jf.dexlib2.Format FORMAT -> b
    int registerCount -> c
    int registerC -> d
    int registerD -> e
    int registerE -> f
    int registerF -> g
    int registerG -> h
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> i
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction35c of(org.jf.dexlib2.iface.instruction.formats.Instruction35c) -> a
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction35mi -> org.jf.dexlib2.d.b.D:
    org.jf.dexlib2.Format FORMAT -> b
    int registerCount -> c
    int registerC -> d
    int registerD -> e
    int registerE -> f
    int registerF -> g
    int registerG -> h
    int inlineIndex -> i
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction35mi of(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> a
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getInlineIndex() -> f
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction35ms -> org.jf.dexlib2.d.b.E:
    org.jf.dexlib2.Format FORMAT -> b
    int registerCount -> c
    int registerC -> d
    int registerD -> e
    int registerE -> f
    int registerF -> g
    int registerG -> h
    int vtableIndex -> i
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction35ms of$36bd2b86(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> a
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getVtableIndex() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rc -> org.jf.dexlib2.d.b.F:
    org.jf.dexlib2.Format FORMAT -> b
    int startRegister -> c
    int registerCount -> d
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rc of(org.jf.dexlib2.iface.instruction.formats.Instruction3rc) -> a
    int getStartRegister() -> h
    int getRegisterCount() -> e
    int getReferenceType() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rmi -> org.jf.dexlib2.d.b.G:
    org.jf.dexlib2.Format FORMAT -> b
    int startRegister -> c
    int registerCount -> d
    int inlineIndex -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rmi of(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> a
    int getStartRegister() -> h
    int getRegisterCount() -> e
    int getInlineIndex() -> f
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rms -> org.jf.dexlib2.d.b.H:
    org.jf.dexlib2.Format FORMAT -> b
    int startRegister -> c
    int registerCount -> d
    int vtableIndex -> e
    void <init>(org.jf.dexlib2.Opcode,int,int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction3rms of$f93b1c0(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> a
    int getStartRegister() -> h
    int getRegisterCount() -> e
    int getVtableIndex() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction45cc -> org.jf.dexlib2.d.b.I:
    org.jf.dexlib2.Format FORMAT -> b
    int registerCount -> c
    int registerC -> d
    int registerD -> e
    int registerE -> f
    int registerF -> g
    int registerG -> h
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> i
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference2$1ecdf9e6 -> j
    void <init>(org.jf.dexlib2.Opcode,int,int,int,int,int,int,org.jf.dexlib2.iface.reference.Reference,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction45cc of(org.jf.dexlib2.iface.instruction.formats.Instruction45cc) -> a
    int getRegisterCount() -> e
    int getRegisterC() -> h
    int getRegisterD() -> i
    int getRegisterE() -> j
    int getRegisterF() -> k
    int getRegisterG() -> l
    int getReferenceType() -> g
    int getReferenceType2() -> d
    org.jf.dexlib2.Format getFormat() -> e_
    org.jf.dexlib2.iface.reference.Reference getReference2() -> d_
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction4rcc -> org.jf.dexlib2.d.b.J:
    org.jf.dexlib2.Format FORMAT -> b
    int startRegister -> c
    int registerCount -> d
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference$1ecdf9e6 -> e
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload reference2$1ecdf9e6 -> f
    void <init>(org.jf.dexlib2.Opcode,int,int,org.jf.dexlib2.iface.reference.Reference,org.jf.dexlib2.iface.reference.Reference) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction4rcc of(org.jf.dexlib2.iface.instruction.formats.Instruction4rcc) -> a
    int getStartRegister() -> h
    int getRegisterCount() -> e
    org.jf.dexlib2.iface.reference.Reference getReference() -> f
    int getReferenceType() -> g
    org.jf.dexlib2.iface.reference.Reference getReference2() -> d_
    int getReferenceType2() -> d
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableInstruction51l -> org.jf.dexlib2.d.b.K:
    org.jf.dexlib2.Format FORMAT -> b
    int registerA -> c
    long literal -> d
    void <init>(org.jf.dexlib2.Opcode,int,long) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableInstruction51l of$603296f8(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    int getRegisterA() -> b_
    long getWideLiteral() -> g
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutablePackedSwitchPayload -> org.jf.dexlib2.d.b.L:
    org.jf.dexlib2.Opcode OPCODE -> b
    com.google.common.collect.ImmutableList switchElements -> c
    void <init>(java.util.List) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutablePackedSwitchPayload of(org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> a
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableSparseSwitchPayload -> org.jf.dexlib2.d.b.M:
    org.jf.dexlib2.Opcode OPCODE -> b
    com.google.common.collect.ImmutableList switchElements -> c
    void <init>(java.util.List) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableSparseSwitchPayload of$78335632(org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> a
    java.util.List getSwitchElements() -> g
    int getCodeUnits() -> b
    org.jf.dexlib2.Format getFormat() -> e_
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableSwitchElement -> org.jf.dexlib2.d.b.N:
    int key -> a
    int offset -> b
    org.jf.util.ImmutableConverter CONVERTER -> c
    void <init>(int,int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableSwitchElement of(org.jf.dexlib2.iface.instruction.SwitchElement) -> a
    int getKey() -> a
    int getOffset() -> b
    com.google.common.collect.ImmutableList immutableListOf(java.util.List) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.instruction.ImmutableSwitchElement$1 -> org.jf.dexlib2.d.b.O:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.instruction.ImmutableUnknownInstruction -> org.jf.dexlib2.d.b.P:
    org.jf.dexlib2.Format FORMAT -> b
    int originalOpcode -> c
    void <init>(int) -> <init>
    org.jf.dexlib2.immutable.instruction.ImmutableUnknownInstruction of(org.jf.dexlib2.iface.instruction.formats.UnknownInstruction) -> a
    org.jf.dexlib2.Format getFormat() -> e_
    int getOriginalOpcode() -> c
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.reference.ImmutableCallSiteReference -> org.jf.dexlib2.d.c.a:
    java.lang.String name -> a
    org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference methodHandle -> b
    java.lang.String methodName -> c
    org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference methodProto -> d
    com.google.common.collect.ImmutableList extraArguments -> e
    void <init>(java.lang.String,org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference,java.lang.String,org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference,com.google.common.collect.ImmutableList) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableCallSiteReference of(org.jf.dexlib2.iface.reference.CallSiteReference) -> a
    java.lang.String getName() -> a
    org.jf.dexlib2.iface.reference.MethodHandleReference getMethodHandle() -> f_
    java.lang.String getMethodName() -> d
    org.jf.dexlib2.iface.reference.MethodProtoReference getMethodProto() -> e
    java.util.List getExtraArguments() -> g_
org.jf.dexlib2.immutable.reference.ImmutableFieldReference -> org.jf.dexlib2.d.c.b:
    java.lang.String definingClass -> a
    java.lang.String name -> b
    java.lang.String type -> c
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableFieldReference of(org.jf.dexlib2.iface.reference.FieldReference) -> b
    java.lang.String getDefiningClass() -> d
    java.lang.String getName() -> a
    java.lang.String getType() -> i_
org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference -> org.jf.dexlib2.d.c.c:
    int methodHandleType -> a
    org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload memberReference$1ecdf9e6 -> b
    void <init>(int,org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference of(org.jf.dexlib2.iface.reference.MethodHandleReference) -> b
    int getMethodHandleType() -> a
    org.jf.dexlib2.iface.reference.Reference getMemberReference() -> j_
org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference -> org.jf.dexlib2.d.c.d:
    com.google.common.collect.ImmutableList parameters -> a
    java.lang.String returnType -> b
    void <init>(java.lang.Iterable,java.lang.String) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference of(org.jf.dexlib2.iface.reference.MethodProtoReference) -> b
    java.util.List getParameterTypes() -> a
    java.lang.String getReturnType() -> k_
org.jf.dexlib2.immutable.reference.ImmutableMethodReference -> org.jf.dexlib2.d.c.e:
    java.lang.String definingClass -> a
    java.lang.String name -> b
    com.google.common.collect.ImmutableList parameters -> c
    java.lang.String returnType -> d
    void <init>(java.lang.String,java.lang.String,java.lang.Iterable,java.lang.String) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableMethodReference of(org.jf.dexlib2.iface.reference.MethodReference) -> b
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.lang.String getReturnType() -> e
    java.util.List getParameterTypes() -> i
org.jf.dexlib2.immutable.reference.ImmutableStringReference -> org.jf.dexlib2.d.c.f:
    java.lang.String str -> a
    void <init>(java.lang.String) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableStringReference of(org.jf.dexlib2.iface.reference.StringReference) -> a
    java.lang.String getString() -> a
org.jf.dexlib2.immutable.reference.ImmutableTypeReference -> org.jf.dexlib2.d.c.g:
    java.lang.String type -> a
    void <init>(java.lang.String) -> <init>
    org.jf.dexlib2.immutable.reference.ImmutableTypeReference of(org.jf.dexlib2.iface.reference.TypeReference) -> a
    java.lang.String getType() -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.reference.ImmutableTypeReference$1 -> org.jf.dexlib2.d.c.h:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.util.CharSequenceConverter -> org.jf.dexlib2.d.d.a:
    org.jf.util.ImmutableConverter CONVERTER -> a
    com.google.common.collect.ImmutableList immutableStringList(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.util.CharSequenceConverter$1 -> org.jf.dexlib2.d.d.b:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.util.ParamUtil -> org.jf.dexlib2.d.d.c:
    java.io.RandomAccessFile raf -> a
    int findTypeEnd(java.lang.String,int) -> b
    java.lang.Iterable parseParamString(java.lang.String) -> a
    int access$000(java.lang.String,int) -> a
    void <init>(java.io.File) -> <init>
    java.io.OutputStream outputAt(int) -> a
    java.io.InputStream readAt(int) -> b
    void close() -> a
org.jf.dexlib2.immutable.util.ParamUtil$1 -> org.jf.dexlib2.d.d.d:
    java.lang.String val$params -> a
    void <init>(java.lang.String) -> <init>
    java.util.Iterator iterator() -> iterator
org.jf.dexlib2.immutable.util.ParamUtil$1$1 -> org.jf.dexlib2.d.d.e:
    int index -> a
    org.jf.dexlib2.immutable.util.ParamUtil$1 this$0 -> b
    void <init>(org.jf.dexlib2.immutable.util.ParamUtil$1) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.immutable.value.ImmutableAnnotationEncodedValue -> org.jf.dexlib2.d.e.a:
    java.lang.String type -> a
    com.google.common.collect.ImmutableSet elements -> b
    void <init>(java.lang.String,java.util.Collection) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableAnnotationEncodedValue of(org.jf.dexlib2.iface.value.AnnotationEncodedValue) -> a
    java.lang.String getType() -> b
    java.util.Set getElements() -> c
org.jf.dexlib2.immutable.value.ImmutableArrayEncodedValue -> org.jf.dexlib2.d.e.b:
    com.google.common.collect.ImmutableList value -> a
    void <init>(java.util.Collection) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableArrayEncodedValue of(org.jf.dexlib2.iface.value.ArrayEncodedValue) -> a
    java.util.List getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableBooleanEncodedValue -> org.jf.dexlib2.d.e.c:
    org.jf.dexlib2.immutable.value.ImmutableBooleanEncodedValue TRUE_VALUE -> b
    org.jf.dexlib2.immutable.value.ImmutableBooleanEncodedValue FALSE_VALUE -> a
    boolean value -> c
    void <init>(boolean) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableBooleanEncodedValue forBoolean(boolean) -> a
    org.jf.dexlib2.immutable.value.ImmutableBooleanEncodedValue of(org.jf.dexlib2.iface.value.BooleanEncodedValue) -> a
    boolean getValue() -> b
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.value.ImmutableByteEncodedValue -> org.jf.dexlib2.d.e.d:
    byte value -> a
    void <init>(byte) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableByteEncodedValue of(org.jf.dexlib2.iface.value.ByteEncodedValue) -> a
    byte getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableCharEncodedValue -> org.jf.dexlib2.d.e.e:
    char value -> a
    void <init>(char) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableCharEncodedValue of(org.jf.dexlib2.iface.value.CharEncodedValue) -> a
    char getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableDoubleEncodedValue -> org.jf.dexlib2.d.e.f:
    double value -> a
    void <init>(double) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableDoubleEncodedValue of(org.jf.dexlib2.iface.value.DoubleEncodedValue) -> a
    double getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableEncodedValue -> org.jf.dexlib2.d.e.g:
org.jf.dexlib2.immutable.value.ImmutableEncodedValueFactory -> org.jf.dexlib2.d.e.h:
    org.jf.util.ImmutableConverter CONVERTER -> a
    org.jf.dexlib2.immutable.value.ImmutableEncodedValue of(org.jf.dexlib2.iface.value.EncodedValue) -> a
    org.jf.dexlib2.iface.value.EncodedValue defaultValueForType(java.lang.String) -> a
    com.google.common.collect.ImmutableList immutableListOf(java.lang.Iterable) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.value.ImmutableEncodedValueFactory$1 -> org.jf.dexlib2.d.e.i:
    void <init>() -> <init>
    java.lang.Object makeImmutable(java.lang.Object) -> a
    boolean isImmutable(java.lang.Object) -> b
org.jf.dexlib2.immutable.value.ImmutableEnumEncodedValue -> org.jf.dexlib2.d.e.j:
    org.jf.dexlib2.immutable.reference.ImmutableFieldReference value -> a
    void <init>(org.jf.dexlib2.immutable.reference.ImmutableFieldReference) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableEnumEncodedValue of(org.jf.dexlib2.iface.value.EnumEncodedValue) -> a
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableFieldEncodedValue -> org.jf.dexlib2.d.e.k:
    org.jf.dexlib2.immutable.reference.ImmutableFieldReference value -> a
    void <init>(org.jf.dexlib2.immutable.reference.ImmutableFieldReference) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableFieldEncodedValue of(org.jf.dexlib2.iface.value.FieldEncodedValue) -> a
    org.jf.dexlib2.iface.reference.FieldReference getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableFloatEncodedValue -> org.jf.dexlib2.d.e.l:
    float value -> a
    void <init>(float) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableFloatEncodedValue of(org.jf.dexlib2.iface.value.FloatEncodedValue) -> a
    float getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableIntEncodedValue -> org.jf.dexlib2.d.e.m:
    int value -> a
    void <init>(int) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableIntEncodedValue of(org.jf.dexlib2.iface.value.IntEncodedValue) -> a
    int getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableLongEncodedValue -> org.jf.dexlib2.d.e.n:
    long value -> a
    void <init>(long) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableLongEncodedValue of(org.jf.dexlib2.iface.value.LongEncodedValue) -> a
    long getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableMethodEncodedValue -> org.jf.dexlib2.d.e.o:
    org.jf.dexlib2.immutable.reference.ImmutableMethodReference value -> a
    void <init>(org.jf.dexlib2.immutable.reference.ImmutableMethodReference) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableMethodEncodedValue of(org.jf.dexlib2.iface.value.MethodEncodedValue) -> a
    org.jf.dexlib2.iface.reference.MethodReference getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableMethodHandleEncodedValue -> org.jf.dexlib2.d.e.p:
    org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference methodHandleReference -> a
    void <init>(org.jf.dexlib2.immutable.reference.ImmutableMethodHandleReference) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableMethodHandleEncodedValue of(org.jf.dexlib2.iface.value.MethodHandleEncodedValue) -> a
    org.jf.dexlib2.iface.reference.MethodHandleReference getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableMethodTypeEncodedValue -> org.jf.dexlib2.d.e.q:
    org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference methodProtoReference -> a
    void <init>(org.jf.dexlib2.immutable.reference.ImmutableMethodProtoReference) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableMethodTypeEncodedValue of(org.jf.dexlib2.iface.value.MethodTypeEncodedValue) -> a
    org.jf.dexlib2.iface.reference.MethodProtoReference getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableNullEncodedValue -> org.jf.dexlib2.d.e.r:
    org.jf.dexlib2.immutable.value.ImmutableNullEncodedValue INSTANCE -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.jf.dexlib2.immutable.value.ImmutableShortEncodedValue -> org.jf.dexlib2.d.e.s:
    short value -> a
    void <init>(short) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableShortEncodedValue of(org.jf.dexlib2.iface.value.ShortEncodedValue) -> a
    short getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableStringEncodedValue -> org.jf.dexlib2.d.e.t:
    java.lang.String value -> a
    void <init>(java.lang.String) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableStringEncodedValue of(org.jf.dexlib2.iface.value.StringEncodedValue) -> a
    java.lang.String getValue() -> b
org.jf.dexlib2.immutable.value.ImmutableTypeEncodedValue -> org.jf.dexlib2.d.e.u:
    java.lang.String value -> a
    void <init>(java.lang.String) -> <init>
    org.jf.dexlib2.immutable.value.ImmutableTypeEncodedValue of(org.jf.dexlib2.iface.value.TypeEncodedValue) -> a
    java.lang.String getValue() -> b
org.jf.dexlib2.util.AlignmentUtils -> org.jf.dexlib2.e.a:
    boolean $assertionsDisabled -> a
    void <init>() -> <init>
    int alignOffset(int,int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.util.DexUtil -> org.jf.dexlib2.e.b:
    int[] mKeys -> a
    int[] mValues -> b
    int mSize -> c
    int verifyDexHeader(java.io.InputStream) -> a
    int verifyDexHeader(byte[],int) -> a
    void verifyOdexHeader(byte[],int) -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    int get(int,int) -> a
    void put(int,int) -> b
    void append(int,int) -> c
    int binarySearch(int[],int,int,int) -> a
org.jf.dexlib2.util.DexUtil$InvalidFile -> org.jf.dexlib2.e.c:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.jf.dexlib2.util.DexUtil$UnsupportedFile -> org.jf.dexlib2.e.d:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.jf.dexlib2.util.InstructionOffsetMap -> org.jf.dexlib2.e.e:
    int[] instructionCodeOffsets -> a
    void <init>(java.util.List) -> <init>
    int getInstructionIndexAtCodeOffset(int) -> a
    int getInstructionIndexAtCodeOffset(int,boolean) -> a
    int getInstructionCodeOffset(int) -> b
org.jf.dexlib2.util.InstructionOffsetMap$InvalidInstructionIndex -> org.jf.dexlib2.e.f:
    void <init>(int) -> <init>
org.jf.dexlib2.util.InstructionOffsetMap$InvalidInstructionOffset -> org.jf.dexlib2.e.g:
    void <init>(int) -> <init>
org.jf.dexlib2.util.MethodUtil -> org.jf.dexlib2.e.h:
    int directMask -> a
    boolean isDirect(org.jf.dexlib2.iface.Method) -> a
    int getParameterRegisterCount(org.jf.dexlib2.iface.reference.MethodReference,boolean) -> a
    int getParameterRegisterCount(java.util.Collection,boolean) -> a
    char getShortyType(java.lang.CharSequence) -> a
    java.lang.String getShorty(java.util.Collection,java.lang.String) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.util.MethodUtil$1 -> org.jf.dexlib2.e.i:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
org.jf.dexlib2.util.MethodUtil$2 -> org.jf.dexlib2.e.j:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
org.jf.dexlib2.util.SyntheticAccessorResolver -> org.jf.dexlib2.e.k:
org.jf.dexlib2.writer.AnnotationSection -> org.jf.dexlib2.f.a:
    int getVisibility(java.lang.Object) -> a
    java.lang.Object getType(java.lang.Object) -> b
    java.util.Collection getElements(java.lang.Object) -> c
    java.lang.Object getElementName(java.lang.Object) -> d
    java.lang.Object getElementValue(java.lang.Object) -> e
org.jf.dexlib2.writer.AnnotationSetSection -> org.jf.dexlib2.f.b:
    java.util.Collection getAnnotations(java.lang.Object) -> a
org.jf.dexlib2.writer.CallSiteSection -> org.jf.dexlib2.f.c:
    java.lang.Object getEncodedCallSite(org.jf.dexlib2.iface.reference.CallSiteReference) -> a
org.jf.dexlib2.writer.ClassSection -> org.jf.dexlib2.f.d:
    java.util.Collection getSortedClasses() -> a
    java.util.Map$Entry getClassEntryByType(java.lang.CharSequence) -> a
    java.lang.CharSequence getType(java.lang.Object) -> a
    int getAccessFlags(java.lang.Object) -> b
    java.lang.CharSequence getSuperclass(java.lang.Object) -> c
    java.lang.Object getInterfaces(java.lang.Object) -> d
    java.lang.CharSequence getSourceFile(java.lang.Object) -> e
    java.lang.Object getStaticInitializers(java.lang.Object) -> f
    java.util.Collection getSortedStaticFields(java.lang.Object) -> g
    java.util.Collection getSortedInstanceFields(java.lang.Object) -> h
    java.util.Collection getSortedFields(java.lang.Object) -> i
    java.util.Collection getSortedDirectMethods(java.lang.Object) -> j
    java.util.Collection getSortedVirtualMethods(java.lang.Object) -> k
    java.util.Collection getSortedMethods(java.lang.Object) -> l
    int getFieldAccessFlags(java.lang.Object) -> m
    int getMethodAccessFlags(java.lang.Object) -> n
    java.util.Set getFieldHiddenApiRestrictions(java.lang.Object) -> o
    java.util.Set getMethodHiddenApiRestrictions(java.lang.Object) -> p
    java.lang.Object getClassAnnotations(java.lang.Object) -> q
    java.lang.Object getFieldAnnotations(java.lang.Object) -> r
    java.lang.Object getMethodAnnotations(java.lang.Object) -> s
    java.util.List getParameterAnnotations(java.lang.Object) -> t
    java.lang.Iterable getDebugItems(java.lang.Object) -> u
    java.lang.Iterable getParameterNames(java.lang.Object) -> v
    int getRegisterCount(java.lang.Object) -> w
    java.lang.Iterable getInstructions(java.lang.Object) -> x
    java.util.List getTryBlocks(java.lang.Object) -> y
    java.lang.CharSequence getExceptionType(org.jf.dexlib2.iface.ExceptionHandler) -> a
    org.jf.dexlib2.builder.MutableMethodImplementation makeMutableMethodImplementation(java.lang.Object) -> z
    void setAnnotationDirectoryOffset(java.lang.Object,int) -> a
    int getAnnotationDirectoryOffset(java.lang.Object) -> A
    void setAnnotationSetRefListOffset(java.lang.Object,int) -> b
    int getAnnotationSetRefListOffset(java.lang.Object) -> B
    void setCodeItemOffset(java.lang.Object,int) -> c
    int getCodeItemOffset(java.lang.Object) -> C
    void writeDebugItem(org.jf.dexlib2.writer.DebugWriter,org.jf.dexlib2.iface.debug.DebugItem) -> a
org.jf.dexlib2.writer.DebugWriter -> org.jf.dexlib2.f.e:
    org.jf.dexlib2.writer.StringSection stringSection -> a
    org.jf.dexlib2.writer.TypeSection typeSection -> b
    org.jf.dexlib2.writer.DexDataWriter writer -> c
    int currentAddress -> d
    int currentLine -> e
    void <init>(org.jf.dexlib2.writer.StringSection,org.jf.dexlib2.writer.TypeSection,org.jf.dexlib2.writer.DexDataWriter) -> <init>
    void reset(int) -> a
    void writeStartLocal(int,int,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence) -> a
    void writeEndLocal(int,int) -> a
    void writeRestartLocal(int,int) -> b
    void writePrologueEnd(int) -> b
    void writeEpilogueBegin(int) -> c
    void writeLineNumber(int,int) -> c
    void writeSetSourceFile(int,java.lang.CharSequence) -> a
    void writeAdvancePC(int) -> d
org.jf.dexlib2.writer.DexDataWriter -> org.jf.dexlib2.f.f:
    int filePosition -> a
    byte[] tempBuf -> b
    byte[] zeroBuf -> c
    void <init>(java.io.OutputStream,int) -> <init>
    void <init>(java.io.OutputStream,int,int) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeLong(long) -> a
    void writeInt(java.io.OutputStream,int) -> a
    void writeShort(int) -> a
    void writeUshort(int) -> b
    void writeUbyte(int) -> c
    void writeUleb128(java.io.OutputStream,int) -> b
    void writeSleb128(java.io.OutputStream,int) -> c
    void writeEncodedValueHeader(int,int) -> a
    void writeEncodedInt(int,int) -> b
    void writeEncodedLong(int,long) -> a
    void writeEncodedUint(int,int) -> c
    void writeEncodedFloat(int,float) -> a
    void writeEncodedDouble(int,double) -> a
    void writeString(java.lang.String) -> a
    void align() -> a
    int getPosition() -> b
org.jf.dexlib2.writer.DexWriter -> org.jf.dexlib2.f.g:
    org.jf.dexlib2.Opcodes opcodes -> m
    int stringIndexSectionOffset -> n
    int typeSectionOffset -> o
    int protoSectionOffset -> p
    int fieldSectionOffset -> q
    int methodSectionOffset -> r
    int classIndexSectionOffset -> s
    int callSiteSectionOffset -> t
    int methodHandleSectionOffset -> u
    int stringDataSectionOffset -> v
    int classDataSectionOffset -> w
    int typeListSectionOffset -> x
    int encodedArraySectionOffset -> y
    int annotationSectionOffset -> z
    int annotationSetSectionOffset -> A
    int annotationSetRefSectionOffset -> B
    int annotationDirectorySectionOffset -> C
    int debugSectionOffset -> D
    int codeSectionOffset -> E
    int hiddenApiRestrictionsOffset -> F
    int mapSectionOffset -> G
    boolean hasHiddenApiRestrictions -> H
    int numAnnotationSetRefItems -> I
    int numAnnotationDirectoryItems -> J
    int numDebugInfoItems -> K
    int numCodeItemItems -> L
    int numClassDataItems -> M
    org.jf.dexlib2.writer.StringSection stringSection -> a
    org.jf.dexlib2.writer.TypeSection typeSection -> b
    org.jf.dexlib2.writer.ProtoSection protoSection -> c
    org.jf.dexlib2.writer.FieldSection fieldSection -> d
    org.jf.dexlib2.writer.MethodSection methodSection -> e
    org.jf.dexlib2.writer.ClassSection classSection -> f
    org.jf.dexlib2.writer.CallSiteSection callSiteSection -> g
    org.jf.dexlib2.writer.MethodHandleSection methodHandleSection -> h
    org.jf.dexlib2.writer.TypeListSection typeListSection -> i
    org.jf.dexlib2.writer.AnnotationSection annotationSection -> j
    org.jf.dexlib2.writer.AnnotationSetSection annotationSetSection -> k
    org.jf.dexlib2.writer.EncodedArraySection encodedArraySection -> l
    java.util.Comparator callSiteComparator -> N
    java.util.Comparator toStringKeyComparator -> O
    void <init>(org.jf.dexlib2.Opcodes) -> <init>
    org.jf.dexlib2.writer.DexWriter$SectionProvider getSectionProvider() -> a
    void writeEncodedValue(org.jf.dexlib2.writer.DexWriter$InternalEncodedValueWriter,java.lang.Object) -> a
    void writeTo(org.jf.dexlib2.writer.io.DexDataStore) -> a
    void updateSignature(org.jf.dexlib2.writer.io.DexDataStore) -> b
    org.jf.dexlib2.writer.DexDataWriter outputAt(org.jf.dexlib2.writer.io.DexDataStore,int) -> b
    void writeClasses(org.jf.dexlib2.writer.io.DexDataStore,org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.DexDataWriter) -> a
    boolean shouldWriteHiddenApiRestrictions() -> b
    int writeClass(org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.DexDataWriter,int,java.util.Map$Entry) -> a
    void writeEncodedFields(org.jf.dexlib2.writer.DexDataWriter,java.util.Collection) -> a
    void writeEncodedMethods(org.jf.dexlib2.writer.DexDataWriter,java.util.Collection) -> b
    void writeDebugAndCodeItems(org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.io.DeferredOutputStream) -> a
    void fixInstructions(org.jf.dexlib2.builder.MutableMethodImplementation) -> a
    int writeDebugItem(org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.DebugWriter,java.lang.Iterable,java.lang.Iterable) -> a
    int writeCodeItem(org.jf.dexlib2.writer.DexDataWriter,java.io.ByteArrayOutputStream,java.lang.Object,java.util.List,java.lang.Iterable,int) -> a
    void writeMapItem(org.jf.dexlib2.writer.DexDataWriter,int,int,int) -> a
    void writeSectionInfo(org.jf.dexlib2.writer.DexDataWriter,int,int) -> a
    boolean shouldCreateEmptyAnnotationSet() -> c
    org.jf.dexlib2.writer.DexDataWriter access$000(org.jf.dexlib2.writer.io.DexDataStore,int) -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.writer.DexWriter$1 -> org.jf.dexlib2.f.h:
    org.jf.dexlib2.writer.DexWriter this$0 -> a
    void <init>(org.jf.dexlib2.writer.DexWriter) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.writer.DexWriter$2 -> org.jf.dexlib2.f.i:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.writer.DexWriter$3 -> org.jf.dexlib2.f.j:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.writer.DexWriter$4 -> org.jf.dexlib2.f.k:
    int[] $SwitchMap$org$jf$dexlib2$Format -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.writer.DexWriter$CodeItemOffset -> org.jf.dexlib2.f.l:
    java.lang.Object method -> a
    int codeOffset -> b
    void <init>(java.lang.Object,int) -> <init>
    void <init>(java.lang.Object,int,byte) -> <init>
org.jf.dexlib2.writer.DexWriter$InternalEncodedValueWriter -> org.jf.dexlib2.f.m:
    org.jf.dexlib2.writer.DexWriter this$0 -> a
    void <init>(org.jf.dexlib2.writer.DexWriter,org.jf.dexlib2.writer.DexDataWriter) -> <init>
    void writeEncodedValue(java.lang.Object) -> a
    void <init>(org.jf.dexlib2.writer.DexWriter,org.jf.dexlib2.writer.DexDataWriter,byte) -> <init>
org.jf.dexlib2.writer.DexWriter$RestrictionsWriter -> org.jf.dexlib2.f.n:
    int startOffset -> a
    org.jf.dexlib2.writer.io.DexDataStore dataStore -> b
    org.jf.dexlib2.writer.DexDataWriter offsetsWriter -> c
    org.jf.dexlib2.writer.DexDataWriter restrictionsWriter -> d
    boolean writeRestrictionsForClass -> e
    int pendingBlankEntries -> f
    void <init>(org.jf.dexlib2.writer.io.DexDataStore,org.jf.dexlib2.writer.DexDataWriter,int) -> <init>
    void finishClass() -> a
    void writeRestriction(java.util.Set) -> a
    void close() -> b
org.jf.dexlib2.writer.DexWriter$SectionProvider -> org.jf.dexlib2.f.o:
    void <init>(org.jf.dexlib2.writer.DexWriter) -> <init>
    org.jf.dexlib2.writer.StringSection getStringSection() -> a
    org.jf.dexlib2.writer.TypeSection getTypeSection() -> b
    org.jf.dexlib2.writer.ProtoSection getProtoSection() -> c
    org.jf.dexlib2.writer.FieldSection getFieldSection() -> d
    org.jf.dexlib2.writer.MethodSection getMethodSection() -> e
    org.jf.dexlib2.writer.ClassSection getClassSection() -> f
    org.jf.dexlib2.writer.CallSiteSection getCallSiteSection() -> g
    org.jf.dexlib2.writer.MethodHandleSection getMethodHandleSection() -> h
    org.jf.dexlib2.writer.TypeListSection getTypeListSection() -> i
    org.jf.dexlib2.writer.AnnotationSection getAnnotationSection() -> j
    org.jf.dexlib2.writer.AnnotationSetSection getAnnotationSetSection() -> k
    org.jf.dexlib2.writer.EncodedArraySection getEncodedArraySection() -> l
org.jf.dexlib2.writer.EncodedArraySection -> org.jf.dexlib2.f.p:
    java.util.List getEncodedValueList(java.lang.Object) -> a
org.jf.dexlib2.writer.EncodedValueWriter -> org.jf.dexlib2.f.q:
    org.jf.dexlib2.writer.DexDataWriter writer -> a
    org.jf.dexlib2.writer.StringSection stringSection -> b
    org.jf.dexlib2.writer.TypeSection typeSection -> c
    org.jf.dexlib2.writer.FieldSection fieldSection -> d
    org.jf.dexlib2.writer.MethodSection methodSection -> e
    org.jf.dexlib2.writer.ProtoSection protoSection -> f
    org.jf.dexlib2.writer.MethodHandleSection methodHandleSection -> g
    org.jf.dexlib2.writer.AnnotationSection annotationSection -> h
    void <init>(org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.StringSection,org.jf.dexlib2.writer.TypeSection,org.jf.dexlib2.writer.FieldSection,org.jf.dexlib2.writer.MethodSection,org.jf.dexlib2.writer.ProtoSection,org.jf.dexlib2.writer.MethodHandleSection,org.jf.dexlib2.writer.AnnotationSection) -> <init>
    void writeEncodedValue(java.lang.Object) -> a
    void writeAnnotation(java.lang.Object,java.util.Collection) -> a
    void writeArray(java.util.Collection) -> a
    void writeBoolean(boolean) -> a
    void writeByte(byte) -> a
    void writeChar(char) -> a
    void writeDouble(double) -> a
    void writeEnum(org.jf.dexlib2.iface.reference.FieldReference) -> a
    void writeField(org.jf.dexlib2.iface.reference.FieldReference) -> b
    void writeFloat(float) -> a
    void writeInt(int) -> a
    void writeLong(long) -> a
    void writeMethod(org.jf.dexlib2.iface.reference.MethodReference) -> a
    void writeNull() -> a
    void writeShort(int) -> b
    void writeString(java.lang.Object) -> b
    void writeType(java.lang.Object) -> c
    void writeMethodType(java.lang.Object) -> d
    void writeMethodHandle(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
org.jf.dexlib2.writer.FieldSection -> org.jf.dexlib2.f.r:
    java.lang.Object getDefiningClass(org.jf.dexlib2.iface.reference.FieldReference) -> a
    java.lang.Object getFieldType(org.jf.dexlib2.iface.reference.FieldReference) -> b
    java.lang.Object getName(org.jf.dexlib2.iface.reference.FieldReference) -> c
    int getFieldIndex(java.lang.Object) -> a
org.jf.dexlib2.writer.IndexSection -> org.jf.dexlib2.f.s:
    int getItemIndex(java.lang.Object) -> D
    java.util.Collection getItems() -> b
    int getItemCount() -> c
org.jf.dexlib2.writer.InstructionWriter -> org.jf.dexlib2.f.t:
    org.jf.dexlib2.Opcodes opcodes -> a
    org.jf.dexlib2.writer.DexDataWriter writer -> b
    org.jf.dexlib2.writer.StringSection stringSection -> c
    org.jf.dexlib2.writer.TypeSection typeSection -> d
    org.jf.dexlib2.writer.FieldSection fieldSection -> e
    org.jf.dexlib2.writer.MethodSection methodSection -> f
    org.jf.dexlib2.writer.ProtoSection protoSection -> g
    org.jf.dexlib2.writer.MethodHandleSection methodHandleSection -> h
    org.jf.dexlib2.writer.CallSiteSection callSiteSection -> i
    java.util.Comparator switchElementComparator -> j
    void <init>(org.jf.dexlib2.Opcodes,org.jf.dexlib2.writer.DexDataWriter,org.jf.dexlib2.writer.StringSection,org.jf.dexlib2.writer.TypeSection,org.jf.dexlib2.writer.FieldSection,org.jf.dexlib2.writer.MethodSection,org.jf.dexlib2.writer.ProtoSection,org.jf.dexlib2.writer.MethodHandleSection,org.jf.dexlib2.writer.CallSiteSection) -> <init>
    short getOpcodeValue(org.jf.dexlib2.Opcode) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction10x) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> a
    void write$6e8123d2(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> b
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction20bc) -> a
    void write$70261374(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> b
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> a
    void write$6a351bb8(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> c
    void write$6a0ad535(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> d
    void write$7033b696(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> e
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction21t) -> a
    void write$703a13c8(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> b
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction22c) -> a
    void write$68cfd00a(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> c
    void write$7041ce17(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> d
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction22t) -> a
    void write$704413f2(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> e
    void write$70522b73(org.jf.dexlib2.iface.instruction.ThreeRegisterInstruction) -> a
    void write$71daec13(org.jf.dexlib2.iface.instruction.formats.Instruction10t) -> c
    void write$71e14945(org.jf.dexlib2.iface.instruction.formats.Instruction21c) -> b
    void write$71e4037f(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> f
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction31t) -> a
    void write$71f8ec91(org.jf.dexlib2.iface.instruction.formats.Instruction12x) -> f
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction35c) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> a
    void write$2e3e1fe2(org.jf.dexlib2.iface.instruction.formats.Instruction35mi) -> b
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction3rc) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> a
    void write$39d97e01(org.jf.dexlib2.iface.instruction.formats.Instruction3rmi) -> b
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction45cc) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.Instruction4rcc) -> a
    void write$754f11da(org.jf.dexlib2.iface.instruction.formats.Instruction11n) -> g
    void write(org.jf.dexlib2.iface.instruction.formats.ArrayPayload) -> a
    void write$7d04e0c6(org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> a
    void write(org.jf.dexlib2.iface.instruction.formats.PackedSwitchPayload) -> b
    int getReferenceIndex(org.jf.dexlib2.iface.instruction.ReferenceInstruction) -> a
    int getReference2Index(org.jf.dexlib2.iface.instruction.DualReferenceInstruction) -> a
    int getReferenceIndex(int,org.jf.dexlib2.iface.reference.Reference) -> a
org.jf.dexlib2.writer.InstructionWriter$1 -> org.jf.dexlib2.f.u:
    void <init>(org.jf.dexlib2.writer.InstructionWriter) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jf.dexlib2.writer.MethodHandleSection -> org.jf.dexlib2.f.v:
    org.jf.dexlib2.iface.reference.FieldReference getFieldReference(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    org.jf.dexlib2.iface.reference.MethodReference getMethodReference(org.jf.dexlib2.iface.reference.MethodHandleReference) -> b
org.jf.dexlib2.writer.MethodSection -> org.jf.dexlib2.f.w:
    org.jf.dexlib2.iface.reference.MethodReference getMethodReference(java.lang.Object) -> a
    java.lang.Object getDefiningClass(org.jf.dexlib2.iface.reference.MethodReference) -> a
    org.jf.dexlib2.iface.reference.MethodProtoReference getPrototype(org.jf.dexlib2.iface.reference.MethodReference) -> b
    org.jf.dexlib2.iface.reference.MethodProtoReference getPrototype(java.lang.Object) -> b
    java.lang.Object getName(org.jf.dexlib2.iface.reference.MethodReference) -> c
    int getMethodIndex(java.lang.Object) -> c
org.jf.dexlib2.writer.NullableIndexSection -> org.jf.dexlib2.f.x:
    int getNullableItemIndex(java.lang.Object) -> a
org.jf.dexlib2.writer.NullableOffsetSection -> org.jf.dexlib2.f.y:
    int getNullableItemOffset(java.lang.Object) -> b
org.jf.dexlib2.writer.OffsetSection -> org.jf.dexlib2.f.z:
    int getItemOffset(java.lang.Object) -> f
    java.util.Collection getItems() -> a
org.jf.dexlib2.writer.ProtoSection -> org.jf.dexlib2.f.A:
    java.lang.Object getShorty(java.lang.Object) -> a
    java.lang.Object getReturnType(java.lang.Object) -> b
    java.lang.Object getParameters(java.lang.Object) -> c
org.jf.dexlib2.writer.StringSection -> org.jf.dexlib2.f.B:
    int getItemIndex(org.jf.dexlib2.iface.reference.StringReference) -> a
    boolean hasJumboIndexes() -> a
org.jf.dexlib2.writer.TypeListSection -> org.jf.dexlib2.f.C:
    int getNullableItemOffset(java.lang.Object) -> b
    java.util.Collection getTypes(java.lang.Object) -> a
org.jf.dexlib2.writer.TypeSection -> org.jf.dexlib2.f.D:
    java.lang.Object getString(java.lang.Object) -> b
    int getItemIndex(org.jf.dexlib2.iface.reference.TypeReference) -> a
org.jf.dexlib2.writer.io.DeferredOutputStream -> org.jf.dexlib2.f.a.a:
    void <init>() -> <init>
    void writeTo(java.io.OutputStream) -> a
org.jf.dexlib2.writer.io.DeferredOutputStreamFactory -> org.jf.dexlib2.f.a.b:
    org.jf.dexlib2.writer.io.DeferredOutputStream makeDeferredOutputStream() -> a
org.jf.dexlib2.writer.io.DexDataStore -> org.jf.dexlib2.f.a.c:
    java.io.OutputStream outputAt(int) -> a
    java.io.InputStream readAt(int) -> b
    void close() -> a
org.jf.dexlib2.writer.io.MemoryDeferredOutputStream -> org.jf.dexlib2.f.a.d:
    java.util.List buffers -> a
    byte[] currentBuffer -> b
    int currentPosition -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeTo(java.io.OutputStream) -> a
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    int remaining() -> b
    org.jf.dexlib2.writer.io.DeferredOutputStreamFactory getFactory() -> a
org.jf.dexlib2.writer.io.MemoryDeferredOutputStream$1 -> org.jf.dexlib2.f.a.e:
    int val$bufferSize -> a
    void <init>(int) -> <init>
    org.jf.dexlib2.writer.io.DeferredOutputStream makeDeferredOutputStream() -> a
org.jf.dexlib2.writer.pool.AnnotationPool -> org.jf.dexlib2.f.b.a:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.Annotation) -> a
    java.lang.Object getElementValue(java.lang.Object) -> e
    java.lang.Object getElementName(java.lang.Object) -> d
    java.util.Collection getElements(java.lang.Object) -> c
    java.lang.Object getType(java.lang.Object) -> b
    int getVisibility(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.AnnotationSetPool -> org.jf.dexlib2.f.b.b:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(java.util.Set) -> a
    java.util.Collection getAnnotations(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.BaseIndexPool -> org.jf.dexlib2.f.b.c:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    java.util.Collection getItems() -> b
    int getItemIndex(java.lang.Object) -> D
org.jf.dexlib2.writer.pool.BaseNullableOffsetPool -> org.jf.dexlib2.f.b.d:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    int getNullableItemOffset(java.lang.Object) -> b
org.jf.dexlib2.writer.pool.BaseOffsetPool -> org.jf.dexlib2.f.b.e:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    java.util.Collection getItems() -> a
    int getItemOffset(java.lang.Object) -> f
org.jf.dexlib2.writer.pool.BasePool -> org.jf.dexlib2.f.b.f:
    org.jf.dexlib2.writer.pool.DexPool dexPool -> a
    java.util.Map internedItems -> b
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    int getItemCount() -> c
org.jf.dexlib2.writer.pool.CallSitePool -> org.jf.dexlib2.f.b.g:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.reference.CallSiteReference) -> b
    java.lang.Object getEncodedCallSite(org.jf.dexlib2.iface.reference.CallSiteReference) -> a
org.jf.dexlib2.writer.pool.ClassPool -> org.jf.dexlib2.f.b.h:
    com.google.common.collect.ImmutableList sortedClasses -> c
    com.google.common.base.Predicate HAS_PARAMETER_ANNOTATIONS -> d
    com.google.common.base.Function PARAMETER_ANNOTATIONS -> e
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.ClassDef) -> a
    void internCode(org.jf.dexlib2.iface.Method) -> a
    void internDebug(org.jf.dexlib2.iface.Method) -> b
    java.util.Collection getSortedClasses() -> a
    java.util.Map$Entry getClassEntryByType(java.lang.CharSequence) -> a
    org.jf.dexlib2.iface.value.ArrayEncodedValue getStaticInitializers(org.jf.dexlib2.writer.pool.PoolClassDef) -> a
    java.lang.CharSequence getExceptionType(org.jf.dexlib2.iface.ExceptionHandler) -> a
    void writeDebugItem(org.jf.dexlib2.writer.DebugWriter,org.jf.dexlib2.iface.debug.DebugItem) -> a
    java.util.Collection getItems() -> b
    int getCodeItemOffset(java.lang.Object) -> C
    void setCodeItemOffset(java.lang.Object,int) -> c
    int getAnnotationSetRefListOffset(java.lang.Object) -> B
    void setAnnotationSetRefListOffset(java.lang.Object,int) -> b
    int getAnnotationDirectoryOffset(java.lang.Object) -> A
    void setAnnotationDirectoryOffset(java.lang.Object,int) -> a
    org.jf.dexlib2.builder.MutableMethodImplementation makeMutableMethodImplementation(java.lang.Object) -> z
    java.util.List getTryBlocks(java.lang.Object) -> y
    java.lang.Iterable getInstructions(java.lang.Object) -> x
    int getRegisterCount(java.lang.Object) -> w
    java.lang.Iterable getParameterNames(java.lang.Object) -> v
    java.lang.Iterable getDebugItems(java.lang.Object) -> u
    java.util.List getParameterAnnotations(java.lang.Object) -> t
    java.lang.Object getMethodAnnotations(java.lang.Object) -> s
    java.lang.Object getFieldAnnotations(java.lang.Object) -> r
    java.lang.Object getClassAnnotations(java.lang.Object) -> q
    java.util.Set getMethodHiddenApiRestrictions(java.lang.Object) -> p
    java.util.Set getFieldHiddenApiRestrictions(java.lang.Object) -> o
    int getMethodAccessFlags(java.lang.Object) -> n
    int getFieldAccessFlags(java.lang.Object) -> m
    java.util.Collection getSortedMethods(java.lang.Object) -> l
    java.util.Collection getSortedVirtualMethods(java.lang.Object) -> k
    java.util.Collection getSortedDirectMethods(java.lang.Object) -> j
    java.util.Collection getSortedFields(java.lang.Object) -> i
    java.util.Collection getSortedInstanceFields(java.lang.Object) -> h
    java.util.Collection getSortedStaticFields(java.lang.Object) -> g
    java.lang.Object getStaticInitializers(java.lang.Object) -> f
    java.lang.CharSequence getSourceFile(java.lang.Object) -> e
    java.lang.Object getInterfaces(java.lang.Object) -> d
    java.lang.CharSequence getSuperclass(java.lang.Object) -> c
    int getAccessFlags(java.lang.Object) -> b
    java.lang.CharSequence getType(java.lang.Object) -> a
    int getItemIndex(java.lang.Object) -> D
    com.google.common.base.Function access$000() -> d
    void <clinit>() -> <clinit>
org.jf.dexlib2.writer.pool.ClassPool$1 -> org.jf.dexlib2.f.b.i:
    org.jf.dexlib2.writer.pool.PoolClassDef val$classDef -> a
    void <init>(org.jf.dexlib2.writer.pool.ClassPool,org.jf.dexlib2.writer.pool.PoolClassDef) -> <init>
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.jf.dexlib2.writer.pool.ClassPool$1MapEntry -> org.jf.dexlib2.f.b.j:
    org.jf.dexlib2.writer.pool.PoolClassDef classDef -> a
    void <init>(org.jf.dexlib2.writer.pool.ClassPool,org.jf.dexlib2.writer.pool.PoolClassDef) -> <init>
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.jf.dexlib2.writer.pool.ClassPool$2 -> org.jf.dexlib2.f.b.k:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
org.jf.dexlib2.writer.pool.ClassPool$3 -> org.jf.dexlib2.f.b.l:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.ClassPool$4 -> org.jf.dexlib2.f.b.m:
    java.util.List val$parameters -> a
    void <init>(org.jf.dexlib2.writer.pool.ClassPool,java.util.List) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.writer.pool.ClassPool$5 -> org.jf.dexlib2.f.b.n:
    void <init>(org.jf.dexlib2.writer.pool.ClassPool) -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.ClassPool$6 -> org.jf.dexlib2.f.b.o:
    org.jf.dexlib2.writer.pool.ClassPool this$0 -> a
    void <init>(org.jf.dexlib2.writer.pool.ClassPool) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.writer.pool.ClassPool$6$1 -> org.jf.dexlib2.f.b.p:
    java.util.Iterator iter -> a
    org.jf.dexlib2.writer.pool.ClassPool$6 this$1 -> b
    void <init>(org.jf.dexlib2.writer.pool.ClassPool$6) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.writer.pool.DexPool -> org.jf.dexlib2.f.b.q:
    void <init>(org.jf.dexlib2.Opcodes) -> <init>
    org.jf.dexlib2.writer.DexWriter$SectionProvider getSectionProvider() -> a
    void writeTo(java.lang.String,org.jf.dexlib2.iface.DexFile) -> a
    void internEncodedValue(org.jf.dexlib2.iface.value.EncodedValue) -> a
    void writeEncodedValue(org.jf.dexlib2.writer.DexWriter$InternalEncodedValueWriter,java.lang.Object) -> a
org.jf.dexlib2.writer.pool.DexPool$DexPoolSectionProvider -> org.jf.dexlib2.f.b.r:
    org.jf.dexlib2.writer.pool.DexPool this$0 -> a
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    org.jf.dexlib2.writer.EncodedArraySection getEncodedArraySection() -> l
    org.jf.dexlib2.writer.AnnotationSetSection getAnnotationSetSection() -> k
    org.jf.dexlib2.writer.AnnotationSection getAnnotationSection() -> j
    org.jf.dexlib2.writer.TypeListSection getTypeListSection() -> i
    org.jf.dexlib2.writer.MethodHandleSection getMethodHandleSection() -> h
    org.jf.dexlib2.writer.CallSiteSection getCallSiteSection() -> g
    org.jf.dexlib2.writer.ClassSection getClassSection() -> f
    org.jf.dexlib2.writer.MethodSection getMethodSection() -> e
    org.jf.dexlib2.writer.FieldSection getFieldSection() -> d
    org.jf.dexlib2.writer.ProtoSection getProtoSection() -> c
    org.jf.dexlib2.writer.TypeSection getTypeSection() -> b
    org.jf.dexlib2.writer.StringSection getStringSection() -> a
org.jf.dexlib2.writer.pool.EncodedArrayPool -> org.jf.dexlib2.f.b.s:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.value.ArrayEncodedValue) -> a
    java.util.List getEncodedValueList(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.FieldPool -> org.jf.dexlib2.f.b.t:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.reference.FieldReference) -> d
    int getFieldIndex(java.lang.Object) -> a
    java.lang.Object getName(org.jf.dexlib2.iface.reference.FieldReference) -> c
    java.lang.Object getFieldType(org.jf.dexlib2.iface.reference.FieldReference) -> b
    java.lang.Object getDefiningClass(org.jf.dexlib2.iface.reference.FieldReference) -> a
org.jf.dexlib2.writer.pool.MethodHandlePool -> org.jf.dexlib2.f.b.u:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.reference.MethodHandleReference) -> c
    org.jf.dexlib2.iface.reference.FieldReference getFieldReference(org.jf.dexlib2.iface.reference.MethodHandleReference) -> a
    org.jf.dexlib2.iface.reference.MethodReference getMethodReference(org.jf.dexlib2.iface.reference.MethodHandleReference) -> b
org.jf.dexlib2.writer.pool.MethodPool -> org.jf.dexlib2.f.b.v:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.reference.MethodReference) -> d
    org.jf.dexlib2.iface.reference.MethodProtoReference getPrototype(org.jf.dexlib2.iface.reference.MethodReference) -> b
    int getMethodIndex(java.lang.Object) -> c
    java.lang.Object getName(org.jf.dexlib2.iface.reference.MethodReference) -> c
    org.jf.dexlib2.iface.reference.MethodProtoReference getPrototype(java.lang.Object) -> b
    java.lang.Object getDefiningClass(org.jf.dexlib2.iface.reference.MethodReference) -> a
    org.jf.dexlib2.iface.reference.MethodReference getMethodReference(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.PoolClassDef -> org.jf.dexlib2.f.b.w:
    org.jf.dexlib2.iface.ClassDef classDef -> h
    org.jf.dexlib2.writer.pool.TypeListPool$Key interfaces -> a
    com.google.common.collect.ImmutableSortedSet staticFields -> b
    com.google.common.collect.ImmutableSortedSet instanceFields -> c
    com.google.common.collect.ImmutableSortedSet directMethods -> d
    com.google.common.collect.ImmutableSortedSet virtualMethods -> e
    int classDefIndex -> f
    int annotationDirectoryOffset -> g
    void <init>(org.jf.dexlib2.iface.ClassDef) -> <init>
    java.lang.String getType() -> a
    int getAccessFlags() -> d
    java.lang.String getSuperclass() -> b
    java.util.List getInterfaces() -> f
    java.lang.String getSourceFile() -> e
    java.util.Set getAnnotations() -> g
    java.util.Collection getFields() -> l
    java.util.Collection getMethods() -> m
    java.lang.Iterable getVirtualMethods() -> k
    java.lang.Iterable getDirectMethods() -> j
    java.lang.Iterable getInstanceFields() -> i
    java.lang.Iterable getStaticFields() -> h
org.jf.dexlib2.writer.pool.PoolClassDef$1 -> org.jf.dexlib2.f.b.x:
    org.jf.dexlib2.writer.pool.PoolClassDef this$0 -> a
    void <init>(org.jf.dexlib2.writer.pool.PoolClassDef) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.writer.pool.PoolClassDef$2 -> org.jf.dexlib2.f.b.y:
    org.jf.dexlib2.writer.pool.PoolClassDef this$0 -> a
    void <init>(org.jf.dexlib2.writer.pool.PoolClassDef) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.writer.pool.PoolMethod -> org.jf.dexlib2.f.b.z:
    org.jf.dexlib2.iface.Method method -> d
    int annotationSetRefListOffset -> a
    int codeItemOffset -> b
    com.google.common.base.Function TRANSFORM -> c
    void <init>(org.jf.dexlib2.iface.Method) -> <init>
    java.lang.String getDefiningClass() -> a
    java.lang.String getName() -> d
    java.util.List getParameterTypes() -> i
    java.util.List getParameters() -> f
    java.lang.String getReturnType() -> e
    int getAccessFlags() -> b
    java.util.Set getAnnotations() -> j
    java.util.Set getHiddenApiRestrictions() -> k
    org.jf.dexlib2.iface.MethodImplementation getImplementation() -> l
    void <clinit>() -> <clinit>
org.jf.dexlib2.writer.pool.PoolMethod$1 -> org.jf.dexlib2.f.b.A:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.PoolMethodProto -> org.jf.dexlib2.f.b.B:
    org.jf.dexlib2.iface.reference.MethodReference methodReference -> a
    void <init>(org.jf.dexlib2.iface.reference.MethodReference) -> <init>
    java.util.List getParameterTypes() -> a
    java.lang.String getReturnType() -> k_
org.jf.dexlib2.writer.pool.ProtoPool -> org.jf.dexlib2.f.b.C:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(org.jf.dexlib2.iface.reference.MethodProtoReference) -> a
    java.lang.CharSequence getShorty(org.jf.dexlib2.iface.reference.MethodProtoReference) -> b
    java.lang.Object getParameters(java.lang.Object) -> c
    java.lang.Object getReturnType(java.lang.Object) -> b
    java.lang.Object getShorty(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.StringPool -> org.jf.dexlib2.f.b.D:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(java.lang.CharSequence) -> a
    void internNullable(java.lang.CharSequence) -> b
    int getItemIndex(org.jf.dexlib2.iface.reference.StringReference) -> a
    boolean hasJumboIndexes() -> a
org.jf.dexlib2.writer.pool.StringTypeBasePool -> org.jf.dexlib2.f.b.E:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    java.util.Collection getItems() -> b
    int getItemIndex(java.lang.CharSequence) -> c
    int getNullableItemIndex(java.lang.Object) -> a
    int getItemIndex(java.lang.Object) -> D
org.jf.dexlib2.writer.pool.TypeListPool -> org.jf.dexlib2.f.b.F:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(java.util.Collection) -> a
    int getNullableItemOffset(java.lang.Object) -> b
    java.util.Collection getTypes(java.lang.Object) -> a
org.jf.dexlib2.writer.pool.TypeListPool$Key -> org.jf.dexlib2.f.b.G:
    java.util.Collection types -> a
    void <init>(java.util.Collection) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jf.dexlib2.writer.pool.TypePool -> org.jf.dexlib2.f.b.H:
    void <init>(org.jf.dexlib2.writer.pool.DexPool) -> <init>
    void intern(java.lang.CharSequence) -> a
    void internNullable(java.lang.CharSequence) -> b
    int getItemIndex(org.jf.dexlib2.iface.reference.TypeReference) -> a
    java.lang.Object getString(java.lang.Object) -> b
org.jf.dexlib2.writer.util.CallSiteUtil -> org.jf.dexlib2.f.c.a:
    org.jf.dexlib2.iface.value.ArrayEncodedValue getEncodedCallSite(org.jf.dexlib2.iface.reference.CallSiteReference) -> a
org.jf.dexlib2.writer.util.CallSiteUtil$1 -> org.jf.dexlib2.f.c.b:
    org.jf.dexlib2.iface.reference.CallSiteReference val$callSiteReference -> a
    void <init>(org.jf.dexlib2.iface.reference.CallSiteReference) -> <init>
    java.util.List getValue() -> b
org.jf.dexlib2.writer.util.CallSiteUtil$1$1 -> org.jf.dexlib2.f.c.c:
    org.jf.dexlib2.writer.util.CallSiteUtil$1 this$0 -> a
    void <init>(org.jf.dexlib2.writer.util.CallSiteUtil$1) -> <init>
    org.jf.dexlib2.iface.reference.MethodHandleReference getValue() -> b
org.jf.dexlib2.writer.util.CallSiteUtil$1$2 -> org.jf.dexlib2.f.c.d:
    org.jf.dexlib2.writer.util.CallSiteUtil$1 this$0 -> a
    void <init>(org.jf.dexlib2.writer.util.CallSiteUtil$1) -> <init>
    org.jf.dexlib2.iface.reference.MethodProtoReference getValue() -> b
org.jf.dexlib2.writer.util.StaticInitializerUtil -> org.jf.dexlib2.f.c.e:
    com.google.common.base.Predicate HAS_INITIALIZER -> a
    com.google.common.base.Function GET_INITIAL_VALUE -> b
    org.jf.dexlib2.iface.value.ArrayEncodedValue getStaticInitializers(java.util.SortedSet) -> a
    com.google.common.base.Function access$000() -> a
    void <clinit>() -> <clinit>
org.jf.dexlib2.writer.util.StaticInitializerUtil$1 -> org.jf.dexlib2.f.c.f:
    java.util.SortedSet val$sortedStaticFields -> a
    int val$lastIndex -> b
    void <init>(java.util.SortedSet,int) -> <init>
    java.util.List getValue() -> b
org.jf.dexlib2.writer.util.StaticInitializerUtil$1$1 -> org.jf.dexlib2.f.c.g:
    org.jf.dexlib2.writer.util.StaticInitializerUtil$1 this$0 -> a
    void <init>(org.jf.dexlib2.writer.util.StaticInitializerUtil$1) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jf.dexlib2.writer.util.StaticInitializerUtil$2 -> org.jf.dexlib2.f.c.h:
    void <init>() -> <init>
    boolean apply(java.lang.Object) -> apply
org.jf.dexlib2.writer.util.StaticInitializerUtil$3 -> org.jf.dexlib2.f.c.i:
    void <init>() -> <init>
    java.lang.Object apply(java.lang.Object) -> a
org.jf.dexlib2.writer.util.TryListBuilder -> org.jf.dexlib2.f.c.j:
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock listStart -> a
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock listEnd -> b
    void <init>() -> <init>
    java.util.List massageTryBlocks(java.util.List) -> a
    org.jf.dexlib2.writer.util.TryListBuilder$TryBounds getBoundingRanges(int,int) -> a
    void addHandler(int,int,org.jf.dexlib2.iface.ExceptionHandler) -> a
    java.util.List getTryBlocks() -> a
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock access$000(org.jf.dexlib2.writer.util.TryListBuilder) -> a
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock access$100(org.jf.dexlib2.writer.util.TryListBuilder) -> b
org.jf.dexlib2.writer.util.TryListBuilder$1 -> org.jf.dexlib2.f.c.k:
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock next -> a
    org.jf.dexlib2.writer.util.TryListBuilder this$0 -> b
    void <init>(org.jf.dexlib2.writer.util.TryListBuilder) -> <init>
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock readNextItem() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.jf.dexlib2.writer.util.TryListBuilder$InvalidTryException -> org.jf.dexlib2.f.c.l:
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock -> org.jf.dexlib2.f.c.m:
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock prev -> a
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock next -> b
    int startCodeAddress -> c
    int endCodeAddress -> d
    java.util.List exceptionHandlers -> e
    void <init>(int,int) -> <init>
    void <init>(int,int,java.util.List) -> <init>
    int getStartCodeAddress() -> a
    int getCodeUnitCount() -> b
    java.util.List getExceptionHandlers() -> c
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock split(int) -> a
    void append(org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock) -> b
    void prepend(org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock) -> a
    void addHandler(org.jf.dexlib2.iface.ExceptionHandler) -> a
org.jf.dexlib2.writer.util.TryListBuilder$TryBounds -> org.jf.dexlib2.f.c.n:
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock start -> a
    org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock end -> b
    void <init>(org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock,org.jf.dexlib2.writer.util.TryListBuilder$MutableTryBlock) -> <init>
org.jf.util.AbstractForwardSequentialList -> org.jf.b.a:
    void <init>() -> <init>
    java.util.Iterator iterator(int) -> a
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator access$000(org.jf.util.AbstractForwardSequentialList,int) -> a
org.jf.util.AbstractForwardSequentialList$1 -> org.jf.b.b:
    int index -> a
    java.util.Iterator forwardIterator -> b
    int val$initialIndex -> c
    java.util.Iterator val$initialIterator -> d
    org.jf.util.AbstractForwardSequentialList this$0 -> e
    void <init>(org.jf.util.AbstractForwardSequentialList,int,java.util.Iterator) -> <init>
    java.util.Iterator getForwardIterator() -> a
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
org.jf.util.AbstractListIterator -> org.jf.b.c:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
org.jf.util.CharSequenceUtils -> org.jf.b.d:
    com.google.common.base.Function TO_STRING -> a
    boolean listEquals(java.util.List,java.util.List) -> a
    void <clinit>() -> <clinit>
org.jf.util.ClassFileNameHandler -> org.jf.b.e:
    int forcedCaseSensitivity -> a
    org.jf.util.ClassFileNameHandler$DirectoryEntry top -> b
    java.lang.String fileExtension -> c
    boolean modifyWindowsReservedFilenames -> d
    java.util.regex.Pattern reservedFileNameRegex -> e
    boolean $assertionsDisabled -> f
    void <init>(java.io.File,java.lang.String) -> <init>
    java.io.File getUniqueFilenameForClass(java.lang.String) -> a
    java.io.File addUniqueChild(org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String[],int) -> a
    int utf8Length(int) -> a
    java.lang.String shortenPathComponent(java.lang.String,int) -> a
    boolean access$200(org.jf.util.ClassFileNameHandler) -> a
    boolean access$300(java.lang.String) -> b
    java.lang.String access$400(java.lang.String,java.lang.String) -> a
    int access$500(java.lang.String) -> c
    int access$600(org.jf.util.ClassFileNameHandler) -> b
    int access$700(org.jf.util.ClassFileNameHandler) -> c
    void <clinit>() -> <clinit>
org.jf.util.ClassFileNameHandler$DirectoryEntry -> org.jf.b.f:
    java.io.File file -> d
    int caseSensitivity -> e
    com.google.common.collect.Multimap children -> f
    boolean $assertionsDisabled -> g
    org.jf.util.ClassFileNameHandler this$0 -> h
    void <init>(org.jf.util.ClassFileNameHandler,java.io.File) -> <init>
    void <init>(org.jf.util.ClassFileNameHandler,org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String) -> <init>
    org.jf.util.ClassFileNameHandler$FileSystemEntry addChild(org.jf.util.ClassFileNameHandler$FileSystemEntry) -> a
    java.lang.String makePhysicalName(int) -> a
    void setSuffix(int) -> b
    boolean isCaseSensitive() -> a
    boolean testCaseSensitivity(java.io.File) -> a
    java.io.File access$100(org.jf.util.ClassFileNameHandler$DirectoryEntry) -> a
    void <clinit>() -> <clinit>
org.jf.util.ClassFileNameHandler$FileEntry -> org.jf.b.g:
    void <init>(org.jf.util.ClassFileNameHandler,org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String) -> <init>
    java.lang.String makePhysicalName(int) -> a
    void <init>(org.jf.util.ClassFileNameHandler,org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String,byte) -> <init>
org.jf.util.ClassFileNameHandler$FileSystemEntry -> org.jf.b.h:
    org.jf.util.ClassFileNameHandler$DirectoryEntry parent -> a
    java.lang.String logicalName -> b
    java.lang.String physicalName -> c
    org.jf.util.ClassFileNameHandler this$0 -> d
    void <init>(org.jf.util.ClassFileNameHandler,org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String) -> <init>
    java.lang.String getNormalizedName(boolean) -> a
    java.lang.String getPhysicalName() -> b
    void setSuffix(int) -> b
    java.lang.String makePhysicalName(int) -> a
    void <init>(org.jf.util.ClassFileNameHandler,org.jf.util.ClassFileNameHandler$DirectoryEntry,java.lang.String,byte) -> <init>
org.jf.util.ExceptionWithContext -> org.jf.b.i:
    java.lang.StringBuffer context -> a
    org.jf.util.ExceptionWithContext withContext(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> <init>
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    void addContext(java.lang.String) -> a
org.jf.util.ImmutableConverter -> org.jf.b.j:
    void <init>() -> <init>
    boolean isImmutable(java.lang.Object) -> b
    java.lang.Object makeImmutable(java.lang.Object) -> a
    com.google.common.collect.ImmutableList toList(java.lang.Iterable) -> a
    com.google.common.collect.ImmutableSet toSet(java.lang.Iterable) -> b
org.jf.util.ImmutableConverter$1 -> org.jf.b.k:
    java.util.Iterator val$iter -> a
    org.jf.util.ImmutableConverter this$0 -> b
    void <init>(org.jf.util.ImmutableConverter,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jf.util.ImmutableConverter$2 -> org.jf.b.l:
    java.util.Iterator val$iter -> a
    org.jf.util.ImmutableConverter this$0 -> b
    void <init>(org.jf.util.ImmutableConverter,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jf.util.IndentingWriter -> org.jf.b.m:
    java.io.Writer writer -> a
    char[] buffer -> b
    int indentLevel -> c
    boolean beginningOfLine -> d
    java.lang.String newLine -> e
    void <init>(java.io.Writer) -> <init>
    void writeIndent() -> a
    void write(int) -> write
    void writeLine(char[],int,int) -> a
    void writeLine(java.lang.String,int,int) -> a
    void write(char[]) -> write
    void write(char[],int,int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    java.io.Writer append(char) -> append
    void flush() -> flush
    void close() -> close
    void indent(int) -> a
    void deindent(int) -> b
    void printUnsignedLongAsHex(long) -> a
    void printSignedLongAsDec(long) -> b
    void printSignedIntAsDec(int) -> c
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    void <clinit>() -> <clinit>
org.jf.util.NumberUtils -> org.jf.b.n:
    int canonicalFloatNaN -> a
    int maxFloat -> b
    int piFloat -> c
    int eFloat -> d
    long canonicalDoubleNaN -> e
    long maxDouble -> f
    long piDouble -> g
    long eDouble -> h
    java.text.DecimalFormat format -> i
    boolean isLikelyFloat(int) -> a
    boolean isLikelyDouble(long) -> a
    void <clinit>() -> <clinit>
org.jf.util.RandomAccessFileInputStream -> org.jf.b.o:
    int filePosition -> a
    java.io.RandomAccessFile raf -> b
    void <init>(java.io.RandomAccessFile,int) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    boolean markSupported() -> markSupported
org.jf.util.RandomAccessFileOutputStream -> org.jf.b.p:
    int filePosition -> a
    java.io.RandomAccessFile raf -> b
    void <init>(java.io.RandomAccessFile,int) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
org.jf.util.Utf8Utils -> org.jf.b.q:
    java.lang.ThreadLocal localBuffer -> a
    java.lang.String utf8BytesWithUtf16LengthToString(byte[],int,int,int[]) -> a
    java.lang.String throwBadUtf8(int,int) -> a
    void <clinit>() -> <clinit>
org.jf.util.Utf8Utils$1 -> org.jf.b.r:
    void <init>() -> <init>
    java.lang.Object initialValue() -> initialValue
utils.CustomBaksmali -> utils.CustomBaksmali:
    void <init>() -> <init>
    boolean disassembleDexFile(org.jf.dexlib2.iface.DexFile,java.io.File,java.lang.String) -> disassembleDexFile
    boolean disassembleClass(org.jf.dexlib2.iface.ClassDef,org.jf.util.ClassFileNameHandler,org.jf.baksmali.BaksmaliOptions) -> disassembleClass
    org.jf.baksmali.BaksmaliOptions getSmaliOptions(org.jf.dexlib2.dexbacked.DexBackedDexFile) -> getSmaliOptions
    int getNumberOfAvailableProcessors() -> getNumberOfAvailableProcessors
    java.lang.Boolean lambda$disassembleDexFile$0(org.jf.dexlib2.iface.ClassDef,org.jf.util.ClassFileNameHandler,org.jf.baksmali.BaksmaliOptions) -> lambda$disassembleDexFile$0
utils.FileTypes -> utils.FileTypes:
    int FILE -> FILE
    int FOLDER -> FOLDER
    int JAR -> JAR
    int JAR_AS_FILE -> JAR_AS_FILE
    int JAR_CONTENT -> JAR_CONTENT
utils.PathHelper -> utils.PathHelper:
    java.lang.String digPath -> digPath
    java.lang.String decompiledFilesPath -> decompiledFilesPath
    java.lang.String webPath -> webPath
    java.lang.String analyzedJsPath -> analyzedJsPath
    java.lang.String htmlPath -> htmlPath
    void <init>(com.intellij.openapi.project.Project) -> <init>
    java.lang.String getDig() -> getDig
    java.lang.String getDecompiledDir() -> getDecompiledDir
    java.lang.String getWebDir() -> getWebDir
    java.lang.String getAnalyzedJsFile() -> getAnalyzedJsFile
    java.lang.String getIndexHtmlFile() -> getIndexHtmlFile
    java.lang.String replaceCharWithSpace(java.lang.String) -> replaceCharWithSpace
utils.PropertyKeys -> utils.PropertyKeys:
    java.lang.String APK_PATH -> APK_PATH
    java.lang.String PACKAGE_NAME -> PACKAGE_NAME
    java.lang.String IS_INNER_CLASS_ENABLE -> IS_INNER_CLASS_ENABLE
    void <init>() -> <init>
utils.SmaliAnalyzer -> utils.SmaliAnalyzer:
    com.intellij.openapi.project.Project project -> project
    boolean isProcessingInner -> isProcessingInner
    java.lang.String packageName -> packageName
    java.util.Map dependencies -> dependencies
    void <init>(com.intellij.openapi.project.Project,boolean,java.lang.String) -> <init>
    java.util.Map getDependencies() -> getDependencies
    boolean run() -> run
    void traverseSmaliCodeDir(java.io.File) -> traverseSmaliCodeDir
    void processSmaliFile(java.io.File) -> processSmaliFile
    boolean isClassOk(java.lang.String,java.lang.String) -> isClassOk
    void parseAndAddClassNames(java.util.Set,java.lang.String) -> parseAndAddClassNames
    void addDependencies(java.lang.String,java.util.Set) -> addDependencies
    java.util.Map getFilteredDependencies() -> getFilteredDependencies
    boolean isClassGenerated(java.lang.String) -> isClassGenerated
    boolean isClassInner(java.lang.String) -> isClassInner
    java.lang.String getOuterClass(java.lang.String) -> getOuterClass
    boolean isClassAnonymous(java.lang.String) -> isClassAnonymous
    java.lang.String getAnonymousNearestOuter(java.lang.String) -> getAnonymousNearestOuter
    int getEndGenericIndex(java.lang.String,int) -> getEndGenericIndex
    java.lang.String getClassSimpleName(java.lang.String) -> getClassSimpleName
    boolean isInstantRunEnabled(java.lang.String) -> isInstantRunEnabled
    boolean isSmaliFile(java.io.File) -> isSmaliFile
utils.Strings -> utils.Strings:
    java.lang.String TITLE_DEFAULT_ERROR -> TITLE_DEFAULT_ERROR
    java.lang.String MESSAGE_ASK_APK_FILE -> MESSAGE_ASK_APK_FILE
    java.lang.String TITLE_ASK_APK_FILE -> TITLE_ASK_APK_FILE
    java.lang.String MESSAGE_ASK_PACKAGE_NAME_TO_FILTER -> MESSAGE_ASK_PACKAGE_NAME_TO_FILTER
    java.lang.String TITLE_ASK_PACKAGE_NAME_TO_FILTER -> TITLE_ASK_PACKAGE_NAME_TO_FILTER
    java.lang.String TRUE -> TRUE
    java.lang.String FALSE -> FALSE
    java.lang.String BACKGROUNDABLE_PROGRESS_TITLE -> BACKGROUNDABLE_PROGRESS_TITLE
    java.lang.String TITLE_ERROR_SHOW_GENERATED_DEPENDENCIES -> TITLE_ERROR_SHOW_GENERATED_DEPENDENCIES
    java.lang.String ERROR_SHOW_GENERATED_DEPENDENCIES -> ERROR_SHOW_GENERATED_DEPENDENCIES
    java.lang.String TITLE_ERROR_INSTANT_RUN_ENABLED -> TITLE_ERROR_INSTANT_RUN_ENABLED
    java.lang.String ERROR_INSTANT_RUN_ENABLED -> ERROR_INSTANT_RUN_ENABLED
    java.lang.String TITLE_ERROR_OPEN_BROWSER -> TITLE_ERROR_OPEN_BROWSER
    java.lang.String ERROR_OPEN_BROWSER -> ERROR_OPEN_BROWSER
    java.lang.String TITLE_CANCELED_ANALYZING -> TITLE_CANCELED_ANALYZING
    java.lang.String ERROR_CANCELED_ANALYZING -> ERROR_CANCELED_ANALYZING
    java.lang.String CANCELING_BY_ANALYZER -> CANCELING_BY_ANALYZER
    void <init>() -> <init>
utils.Writer -> utils.Writer:
    void <init>() -> <init>
    void write(java.io.File,java.util.Map) -> write
